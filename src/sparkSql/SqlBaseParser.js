/* eslint-disable */
// Generated from SqlBase.g4 by ANTLR 4.7.1
// jshint ignore: start
var antlr4 = require('antlr4/index');
// var grammarFileName = "SqlBase.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u0133\u0af6\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
    "x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0003\u0002\u0003",
    "\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003\b\u0003",
    "\b\u0003\b\u0003\t\u0003\t\u0005\t\u0112\n\t\u0003\t\u0003\t\u0003\t",
    "\u0005\t\u0117\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005",
    "\t\u011f\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0007\t\u0128\n\t\f\t\u000e\t\u012b\u000b\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u013e\n\t\u0003\t",
    "\u0003\t\u0005\t\u0142\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u0148",
    "\n\t\u0003\t\u0005\t\u014b\n\t\u0003\t\u0005\t\u014e\n\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0005\t\u0155\n\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0007\t\u0163\n\t\f\t\u000e\t\u0166\u000b\t\u0003\t\u0005\t\u0169",
    "\n\t\u0003\t\u0005\t\u016c\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0005\t\u0173\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u0180\n\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0007\t\u0189\n\t\f\t\u000e",
    "\t\u018c\u000b\t\u0003\t\u0005\t\u018f\n\t\u0003\t\u0005\t\u0192\n\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u0199\n\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0005\t\u019f\n\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0005\t\u01a6\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0007\t\u01b4\n\t",
    "\f\t\u000e\t\u01b7\u000b\t\u0003\t\u0005\t\u01ba\n\t\u0003\t\u0005\t",
    "\u01bd\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u01c3\n\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005",
    "\t\u01ce\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0005\t\u020e\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0005\t\u0217\n\t\u0003\t\u0003\t\u0003\t\u0005\t\u021c",
    "\n\t\u0003\t\u0003\t\u0005\t\u0220\n\t\u0003\t\u0005\t\u0223\n\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0005\t\u0229\n\t\u0003\t\u0003\t\u0005\t",
    "\u022d\n\t\u0003\t\u0003\t\u0003\t\u0005\t\u0232\n\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0005\t\u0238\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0005\t\u0240\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t",
    "\u0246\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0005\t\u0253\n\t\u0003\t\u0006\t\u0256\n",
    "\t\r\t\u000e\t\u0257\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0005\t\u0261\n\t\u0003\t\u0006\t\u0264\n\t\r\t\u000e\t\u0265",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u0276\n\t\u0003\t",
    "\u0003\t\u0003\t\u0007\t\u027b\n\t\f\t\u000e\t\u027e\u000b\t\u0003\t",
    "\u0005\t\u0281\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005",
    "\t\u0289\n\t\u0003\t\u0003\t\u0003\t\u0007\t\u028e\n\t\f\t\u000e\t\u0291",
    "\u000b\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u02aa\n\t",
    "\u0003\t\u0003\t\u0005\t\u02ae\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005",
    "\t\u02b4\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u02ba\n\t\u0003",
    "\t\u0005\t\u02bd\n\t\u0003\t\u0005\t\u02c0\n\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0005\t\u02c6\n\t\u0003\t\u0003\t\u0005\t\u02ca\n\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0007\t\u02d3\n\t",
    "\f\t\u000e\t\u02d6\u000b\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0005\t\u02de\n\t\u0003\t\u0005\t\u02e1\n\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u02ea\n\t\u0003\t\u0003\t",
    "\u0003\t\u0005\t\u02ef\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u02f5",
    "\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u02fc\n\t\u0003",
    "\t\u0005\t\u02ff\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u0305\n",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0007\t\u030e",
    "\n\t\f\t\u000e\t\u0311\u000b\t\u0005\t\u0313\n\t\u0003\t\u0003\t\u0005",
    "\t\u0317\n\t\u0003\t\u0003\t\u0003\t\u0005\t\u031c\n\t\u0003\t\u0003",
    "\t\u0003\t\u0005\t\u0321\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0005\t\u0328\n\t\u0003\t\u0005\t\u032b\n\t\u0003\t\u0005\t\u032e\n",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u0335\n\t\u0003\t",
    "\u0003\t\u0003\t\u0005\t\u033a\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0005\t\u0343\n\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0005\t\u034b\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005",
    "\t\u0351\n\t\u0003\t\u0003\t\u0005\t\u0355\n\t\u0003\t\u0003\t\u0005",
    "\t\u0359\n\t\u0003\t\u0003\t\u0005\t\u035d\n\t\u0005\t\u035f\n\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u0368\n\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u036e\n\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0005\t\u0374\n\t\u0003\t\u0005\t\u0377\n\t\u0003\t\u0003",
    "\t\u0005\t\u037b\n\t\u0003\t\u0005\t\u037e\n\t\u0003\t\u0003\t\u0005",
    "\t\u0382\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0007\t\u038b\n\t\f\t\u000e\t\u038e\u000b\t\u0005\t\u0390\n\t\u0003",
    "\t\u0003\t\u0005\t\u0394\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t",
    "\u039a\n\t\u0003\t\u0005\t\u039d\n\t\u0003\t\u0005\t\u03a0\n\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0005\t\u03a6\n\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0005\t\u03ae\n\t\u0003\t\u0003\t\u0003\t\u0005",
    "\t\u03b3\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u03b9\n\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0005\t\u03bf\n\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0007\t\u03c8\n\t\f\t\u000e\t\u03cb",
    "\u000b\t\u0003\t\u0003\t\u0003\t\u0007\t\u03d0\n\t\f\t\u000e\t\u03d3",
    "\u000b\t\u0003\t\u0003\t\u0007\t\u03d7\n\t\f\t\u000e\t\u03da\u000b\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u03e2\n\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u03e9\n\t\u0003\t\u0003\t",
    "\u0007\t\u03ed\n\t\f\t\u000e\t\u03f0\u000b\t\u0005\t\u03f2\n\t\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u03fa\n\n\u0003\n",
    "\u0003\n\u0005\n\u03fe\n\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0005",
    "\n\u0405\n\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n",
    "\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0005",
    "\n\u0479\n\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n",
    "\u0481\n\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u0489",
    "\n\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n",
    "\u0492\n\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0005\n\u049e\n\n\u0003\u000b\u0003\u000b\u0005\u000b",
    "\u04a2\n\u000b\u0003\u000b\u0005\u000b\u04a5\n\u000b\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u04ab\n\u000b\u0003\u000b",
    "\u0003\u000b\u0003\f\u0003\f\u0005\f\u04b1\n\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u04bd",
    "\n\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u04c9\n\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u04ce\n\u000e\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u0010\u0005\u0010\u04d4\n\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0005",
    "\u0011\u04dc\n\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0005\u0011\u04e3\n\u0011\u0005\u0011\u04e5\n\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u04ea\n\u0011\u0003\u0011",
    "\u0003\u0011\u0005\u0011\u04ee\n\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0005\u0011\u04f3\n\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0005\u0011\u04f8\n\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005",
    "\u0011\u04fd\n\u0011\u0003\u0011\u0005\u0011\u0500\n\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0005\u0011\u0505\n\u0011\u0003\u0011\u0003",
    "\u0011\u0005\u0011\u0509\n\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0005\u0011\u050e\n\u0011\u0005\u0011\u0510\n\u0011\u0003\u0012\u0003",
    "\u0012\u0005\u0012\u0514\n\u0012\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0007\u0013\u051b\n\u0013\f\u0013\u000e\u0013",
    "\u051e\u000b\u0013\u0003\u0013\u0003\u0013\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0005\u0014\u0525\n\u0014\u0003\u0015\u0003\u0015\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u052e\n",
    "\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0007\u0017\u0533\n\u0017",
    "\f\u0017\u000e\u0017\u0536\u000b\u0017\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0007\u0018\u053c\n\u0018\f\u0018\u000e\u0018\u053f",
    "\u000b\u0018\u0003\u0019\u0003\u0019\u0005\u0019\u0543\n\u0019\u0003",
    "\u0019\u0005\u0019\u0546\n\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0007\u001b\u0553\n\u001b\f\u001b\u000e\u001b",
    "\u0556\u000b\u001b\u0003\u001b\u0003\u001b\u0003\u001c\u0003\u001c\u0005",
    "\u001c\u055c\n\u001c\u0003\u001c\u0005\u001c\u055f\n\u001c\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0007\u001d\u0564\n\u001d\f\u001d\u000e\u001d",
    "\u0567\u000b\u001d\u0003\u001d\u0005\u001d\u056a\n\u001d\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u0570\n\u001e\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0007\u001f\u0576\n\u001f",
    "\f\u001f\u000e\u001f\u0579\u000b\u001f\u0003\u001f\u0003\u001f\u0003",
    " \u0003 \u0003 \u0003 \u0007 \u0581\n \f \u000e \u0584\u000b \u0003",
    " \u0003 \u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0005!\u058e\n!\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0003\"\u0005\"\u0595\n\"\u0003#\u0003#\u0003",
    "#\u0003#\u0005#\u059b\n#\u0003$\u0003$\u0003$\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0003%\u0006%\u05a6\n%\r%\u000e%\u05a7\u0005%\u05aa\n%\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0007&\u05b1\n&\f&\u000e&\u05b4\u000b",
    "&\u0005&\u05b6\n&\u0003&\u0003&\u0003&\u0003&\u0003&\u0007&\u05bd\n",
    "&\f&\u000e&\u05c0\u000b&\u0005&\u05c2\n&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0007&\u05c9\n&\f&\u000e&\u05cc\u000b&\u0005&\u05ce\n&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0007&\u05d5\n&\f&\u000e&\u05d8\u000b",
    "&\u0005&\u05da\n&\u0003&\u0005&\u05dd\n&\u0003&\u0003&\u0003&\u0005",
    "&\u05e2\n&\u0005&\u05e4\n&\u0003\'\u0003\'\u0003\'\u0003(\u0003(\u0003",
    "(\u0003(\u0003(\u0003(\u0003(\u0005(\u05f0\n(\u0003(\u0003(\u0003(\u0003",
    "(\u0003(\u0005(\u05f7\n(\u0003(\u0003(\u0003(\u0003(\u0003(\u0005(\u05fe",
    "\n(\u0003(\u0007(\u0601\n(\f(\u000e(\u0604\u000b(\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0005)\u060f\n)\u0003*\u0003",
    "*\u0005*\u0613\n*\u0003*\u0003*\u0005*\u0617\n*\u0003+\u0003+\u0006",
    "+\u061b\n+\r+\u000e+\u061c\u0003,\u0003,\u0005,\u0621\n,\u0003,\u0003",
    ",\u0003,\u0003,\u0007,\u0627\n,\f,\u000e,\u062a\u000b,\u0003,\u0005",
    ",\u062d\n,\u0003,\u0005,\u0630\n,\u0003,\u0005,\u0633\n,\u0003,\u0005",
    ",\u0636\n,\u0003,\u0003,\u0005,\u063a\n,\u0003-\u0003-\u0005-\u063e",
    "\n-\u0003-\u0005-\u0641\n-\u0003-\u0003-\u0005-\u0645\n-\u0003-\u0007",
    "-\u0648\n-\f-\u000e-\u064b\u000b-\u0003-\u0005-\u064e\n-\u0003-\u0005",
    "-\u0651\n-\u0003-\u0005-\u0654\n-\u0003-\u0005-\u0657\n-\u0005-\u0659",
    "\n-\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0005.\u0665\n.\u0003.\u0005.\u0668\n.\u0003.\u0003.\u0005.\u066c",
    "\n.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0005.\u0676",
    "\n.\u0003.\u0003.\u0005.\u067a\n.\u0005.\u067c\n.\u0003.\u0005.\u067f",
    "\n.\u0003.\u0003.\u0005.\u0683\n.\u0003/\u0003/\u0007/\u0687\n/\f/\u000e",
    "/\u068a\u000b/\u0003/\u0005/\u068d\n/\u0003/\u0003/\u00030\u00030\u0003",
    "0\u00030\u00070\u0695\n0\f0\u000e0\u0698\u000b0\u00031\u00031\u0003",
    "1\u00031\u00032\u00032\u00032\u00033\u00033\u00033\u00034\u00034\u0003",
    "4\u00054\u06a7\n4\u00034\u00074\u06aa\n4\f4\u000e4\u06ad\u000b4\u0003",
    "4\u00034\u00035\u00035\u00035\u00035\u00035\u00035\u00075\u06b7\n5\f",
    "5\u000e5\u06ba\u000b5\u00035\u00035\u00055\u06be\n5\u00036\u00036\u0003",
    "6\u00036\u00076\u06c4\n6\f6\u000e6\u06c7\u000b6\u00036\u00076\u06ca",
    "\n6\f6\u000e6\u06cd\u000b6\u00036\u00056\u06d0\n6\u00037\u00037\u0003",
    "7\u00037\u00037\u00077\u06d7\n7\f7\u000e7\u06da\u000b7\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00077\u06e6",
    "\n7\f7\u000e7\u06e9\u000b7\u00037\u00037\u00057\u06ed\n7\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00077\u06f7\n7\f7\u000e",
    "7\u06fa\u000b7\u00037\u00037\u00057\u06fe\n7\u00038\u00038\u00038\u0003",
    "8\u00078\u0704\n8\f8\u000e8\u0707\u000b8\u00058\u0709\n8\u00038\u0003",
    "8\u00058\u070d\n8\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u0003",
    "9\u00039\u00039\u00079\u0719\n9\f9\u000e9\u071c\u000b9\u00039\u0003",
    "9\u00039\u0003:\u0003:\u0003:\u0003:\u0003:\u0007:\u0726\n:\f:\u000e",
    ":\u0729\u000b:\u0003:\u0003:\u0005:\u072d\n:\u0003;\u0003;\u0005;\u0731",
    "\n;\u0003;\u0005;\u0734\n;\u0003<\u0003<\u0003<\u0005<\u0739\n<\u0003",
    "<\u0003<\u0003<\u0003<\u0003<\u0007<\u0740\n<\f<\u000e<\u0743\u000b",
    "<\u0005<\u0745\n<\u0003<\u0003<\u0003<\u0005<\u074a\n<\u0003<\u0003",
    "<\u0003<\u0007<\u074f\n<\f<\u000e<\u0752\u000b<\u0005<\u0754\n<\u0003",
    "=\u0003=\u0003>\u0003>\u0007>\u075a\n>\f>\u000e>\u075d\u000b>\u0003",
    "?\u0003?\u0003?\u0003?\u0005?\u0763\n?\u0003?\u0003?\u0003?\u0003?\u0003",
    "?\u0005?\u076a\n?\u0003@\u0005@\u076d\n@\u0003@\u0003@\u0003@\u0005",
    "@\u0772\n@\u0003@\u0005@\u0775\n@\u0003@\u0003@\u0003@\u0005@\u077a",
    "\n@\u0003@\u0003@\u0005@\u077e\n@\u0003@\u0005@\u0781\n@\u0003@\u0005",
    "@\u0784\n@\u0003A\u0003A\u0003A\u0003A\u0005A\u078a\nA\u0003B\u0003",
    "B\u0003B\u0005B\u078f\nB\u0003B\u0003B\u0003C\u0005C\u0794\nC\u0003",
    "C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003",
    "C\u0003C\u0003C\u0003C\u0003C\u0003C\u0005C\u07a6\nC\u0005C\u07a8\n",
    "C\u0003C\u0005C\u07ab\nC\u0003D\u0003D\u0003D\u0003D\u0003E\u0003E\u0003",
    "E\u0007E\u07b4\nE\fE\u000eE\u07b7\u000bE\u0003F\u0003F\u0003F\u0003",
    "F\u0007F\u07bd\nF\fF\u000eF\u07c0\u000bF\u0003F\u0003F\u0003G\u0003",
    "G\u0005G\u07c6\nG\u0003H\u0003H\u0003H\u0003H\u0007H\u07cc\nH\fH\u000e",
    "H\u07cf\u000bH\u0003H\u0003H\u0003I\u0003I\u0003I\u0005I\u07d6\nI\u0003",
    "J\u0003J\u0005J\u07da\nJ\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0005",
    "J\u07e2\nJ\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0005J\u07ea\n",
    "J\u0003J\u0003J\u0003J\u0003J\u0005J\u07f0\nJ\u0003K\u0003K\u0003K\u0003",
    "K\u0007K\u07f6\nK\fK\u000eK\u07f9\u000bK\u0003K\u0003K\u0003L\u0003",
    "L\u0003L\u0003L\u0003L\u0007L\u0802\nL\fL\u000eL\u0805\u000bL\u0005",
    "L\u0807\nL\u0003L\u0003L\u0003L\u0003M\u0005M\u080d\nM\u0003M\u0003",
    "M\u0005M\u0811\nM\u0005M\u0813\nM\u0003N\u0003N\u0003N\u0003N\u0003",
    "N\u0003N\u0003N\u0005N\u081c\nN\u0003N\u0003N\u0003N\u0003N\u0003N\u0003",
    "N\u0003N\u0003N\u0003N\u0003N\u0005N\u0828\nN\u0005N\u082a\nN\u0003",
    "N\u0003N\u0003N\u0003N\u0003N\u0005N\u0831\nN\u0003N\u0003N\u0003N\u0003",
    "N\u0003N\u0005N\u0838\nN\u0003N\u0003N\u0003N\u0003N\u0005N\u083e\n",
    "N\u0003N\u0003N\u0003N\u0003N\u0005N\u0844\nN\u0005N\u0846\nN\u0003",
    "O\u0003O\u0003O\u0007O\u084b\nO\fO\u000eO\u084e\u000bO\u0003P\u0003",
    "P\u0003P\u0005P\u0853\nP\u0003P\u0003P\u0003Q\u0003Q\u0003Q\u0005Q\u085a",
    "\nQ\u0003Q\u0003Q\u0003R\u0003R\u0005R\u0860\nR\u0003R\u0003R\u0005",
    "R\u0864\nR\u0005R\u0866\nR\u0003S\u0003S\u0003S\u0007S\u086b\nS\fS\u000e",
    "S\u086e\u000bS\u0003T\u0003T\u0003T\u0003T\u0007T\u0874\nT\fT\u000e",
    "T\u0877\u000bT\u0003T\u0003T\u0003U\u0003U\u0003U\u0003U\u0003U\u0003",
    "U\u0007U\u0881\nU\fU\u000eU\u0884\u000bU\u0003U\u0003U\u0005U\u0888",
    "\nU\u0003V\u0003V\u0005V\u088c\nV\u0003W\u0003W\u0003X\u0003X\u0003",
    "X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0005X\u089a\nX\u0005",
    "X\u089c\nX\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0007X\u08a4\n",
    "X\fX\u000eX\u08a7\u000bX\u0003Y\u0005Y\u08aa\nY\u0003Y\u0003Y\u0003",
    "Y\u0003Y\u0003Y\u0003Y\u0005Y\u08b2\nY\u0003Y\u0003Y\u0003Y\u0003Y\u0003",
    "Y\u0007Y\u08b9\nY\fY\u000eY\u08bc\u000bY\u0003Y\u0003Y\u0003Y\u0005",
    "Y\u08c1\nY\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0005Y\u08c9\n",
    "Y\u0003Y\u0003Y\u0003Y\u0003Y\u0005Y\u08cf\nY\u0003Y\u0003Y\u0003Y\u0005",
    "Y\u08d4\nY\u0003Y\u0003Y\u0003Y\u0005Y\u08d9\nY\u0003Y\u0003Y\u0003",
    "Y\u0005Y\u08de\nY\u0003Z\u0003Z\u0003Z\u0003Z\u0005Z\u08e4\nZ\u0003",
    "Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003",
    "Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0007Z\u08f9",
    "\nZ\fZ\u000eZ\u08fc\u000bZ\u0003[\u0003[\u0003[\u0003[\u0006[\u0902",
    "\n[\r[\u000e[\u0903\u0003[\u0003[\u0005[\u0908\n[\u0003[\u0003[\u0003",
    "[\u0003[\u0003[\u0006[\u090f\n[\r[\u000e[\u0910\u0003[\u0003[\u0005",
    "[\u0915\n[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003",
    "[\u0003[\u0003[\u0003[\u0003[\u0003[\u0007[\u0925\n[\f[\u000e[\u0928",
    "\u000b[\u0005[\u092a\n[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0005",
    "[\u0932\n[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0005[\u093b",
    "\n[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003",
    "[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0006",
    "[\u0950\n[\r[\u000e[\u0951\u0003[\u0003[\u0003[\u0003[\u0003[\u0003",
    "[\u0003[\u0003[\u0003[\u0005[\u095d\n[\u0003[\u0003[\u0003[\u0007[\u0962",
    "\n[\f[\u000e[\u0965\u000b[\u0005[\u0967\n[\u0003[\u0003[\u0003[\u0005",
    "[\u096c\n[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0006[\u0975",
    "\n[\r[\u000e[\u0976\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003",
    "[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003",
    "[\u0003[\u0003[\u0003[\u0003[\u0003[\u0005[\u098f\n[\u0003[\u0003[\u0003",
    "[\u0003[\u0003[\u0005[\u0996\n[\u0003[\u0005[\u0999\n[\u0003[\u0003",
    "[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003",
    "[\u0003[\u0005[\u09a8\n[\u0003[\u0003[\u0005[\u09ac\n[\u0003[\u0003",
    "[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0007[\u09b6\n[\f[\u000e",
    "[\u09b9\u000b[\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003",
    "\\\u0003\\\u0006\\\u09c3\n\\\r\\\u000e\\\u09c4\u0005\\\u09c7\n\\\u0003",
    "]\u0003]\u0003^\u0003^\u0003_\u0003_\u0003`\u0003`\u0003a\u0003a\u0005",
    "a\u09d3\na\u0003a\u0006a\u09d6\na\ra\u000ea\u09d7\u0003a\u0003a\u0003",
    "a\u0007a\u09dd\na\fa\u000ea\u09e0\u000ba\u0005a\u09e2\na\u0003b\u0003",
    "b\u0003b\u0003b\u0005b\u09e8\nb\u0003c\u0005c\u09eb\nc\u0003c\u0003",
    "c\u0005c\u09ef\nc\u0003d\u0003d\u0003e\u0003e\u0003e\u0005e\u09f6\n",
    "e\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003",
    "f\u0003f\u0003f\u0003f\u0003f\u0003f\u0005f\u0a07\nf\u0003f\u0003f\u0005",
    "f\u0a0b\nf\u0003f\u0003f\u0003f\u0003f\u0003f\u0007f\u0a12\nf\ff\u000e",
    "f\u0a15\u000bf\u0003f\u0005f\u0a18\nf\u0005f\u0a1a\nf\u0003g\u0003g",
    "\u0003g\u0007g\u0a1f\ng\fg\u000eg\u0a22\u000bg\u0003h\u0003h\u0003h",
    "\u0003h\u0005h\u0a28\nh\u0003h\u0005h\u0a2b\nh\u0003i\u0003i\u0003i",
    "\u0007i\u0a30\ni\fi\u000ei\u0a33\u000bi\u0003j\u0003j\u0003j\u0003j",
    "\u0005j\u0a39\nj\u0003k\u0003k\u0003k\u0007k\u0a3e\nk\fk\u000ek\u0a41",
    "\u000bk\u0003l\u0003l\u0003l\u0003l\u0003l\u0005l\u0a48\nl\u0003m\u0003",
    "m\u0003m\u0003m\u0003m\u0003n\u0003n\u0003n\u0003n\u0007n\u0a53\nn\f",
    "n\u000en\u0a56\u000bn\u0003o\u0003o\u0003o\u0003o\u0003p\u0003p\u0003",
    "p\u0003p\u0003p\u0003p\u0003p\u0003p\u0003p\u0003p\u0003p\u0007p\u0a67",
    "\np\fp\u000ep\u0a6a\u000bp\u0003p\u0003p\u0003p\u0003p\u0003p\u0007",
    "p\u0a71\np\fp\u000ep\u0a74\u000bp\u0005p\u0a76\np\u0003p\u0003p\u0003",
    "p\u0003p\u0003p\u0007p\u0a7d\np\fp\u000ep\u0a80\u000bp\u0005p\u0a82",
    "\np\u0005p\u0a84\np\u0003p\u0005p\u0a87\np\u0003p\u0005p\u0a8a\np\u0003",
    "q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003",
    "q\u0003q\u0003q\u0003q\u0003q\u0003q\u0005q\u0a9c\nq\u0003r\u0003r\u0003",
    "r\u0003r\u0003r\u0003r\u0003r\u0005r\u0aa5\nr\u0003s\u0003s\u0003s\u0007",
    "s\u0aaa\ns\fs\u000es\u0aad\u000bs\u0003t\u0003t\u0003t\u0007t\u0ab2",
    "\nt\ft\u000et\u0ab5\u000bt\u0003u\u0003u\u0003u\u0003v\u0003v\u0006",
    "v\u0abc\nv\rv\u000ev\u0abd\u0003v\u0005v\u0ac1\nv\u0003w\u0003w\u0003",
    "w\u0005w\u0ac6\nw\u0003x\u0003x\u0003x\u0003x\u0003x\u0003x\u0005x\u0ace",
    "\nx\u0003y\u0003y\u0003z\u0005z\u0ad3\nz\u0003z\u0003z\u0005z\u0ad7",
    "\nz\u0003z\u0003z\u0005z\u0adb\nz\u0003z\u0003z\u0005z\u0adf\nz\u0003",
    "z\u0003z\u0005z\u0ae3\nz\u0003z\u0003z\u0005z\u0ae7\nz\u0003z\u0003",
    "z\u0005z\u0aeb\nz\u0003z\u0005z\u0aee\nz\u0003{\u0003{\u0003|\u0003",
    "|\u0003}\u0003}\u0003}\u0007\u038c\u03c9\u03d1\u03d8\u03ee\u0006N\u00ae",
    "\u00b2\u00b4~\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016",
    "\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnp",
    "rtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092",
    "\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa",
    "\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2",
    "\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da",
    "\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2",
    "\u00f4\u00f6\u00f8\u0002,\u0004\u0002!!\u00c9\u00c9\u0004\u0002@@\u009d",
    "\u009d\u0004\u0002eess\u0003\u0002,-\u0004\u0002\u00eb\u00eb\u0109\u0109",
    "\u0004\u0002\u0010\u0010$$\u0007\u0002))55WWdd\u0090\u0090\u0003\u0002",
    "GH\u0004\u0002WWdd\u0004\u0002\r\r\u008a\u008a\u0004\u0002??\u00d3\u00d3",
    "\u0006\u0002RRzz\u00dd\u00dd\u00ff\u00ff\u0005\u0002RR\u00dd\u00dd\u00ff",
    "\u00ff\u0004\u0002\u0018\u0018GG\u0004\u0002^^\u0081\u0081\u0004\u0002",
    "\u000f\u000fLL\u0003\u0002\u0129\u012a\u0004\u0002\u0087\u0087\u00cc",
    "\u00cc\u0005\u0002ZZ\u00f9\u00f9\u0101\u0101\u0004\u0002\u011a\u011b",
    "\u0120\u0120\u0003\u0002\u011c\u011f\u0004\u0002\u011a\u011b\u0123\u0123",
    "\u0004\u0002::<<\u0003\u0002^_\u0004\u0002qq\u00c8\u00c8\u0003\u0002",
    "\u0081\u0082\u0003\u0002\u00e9\u00ea\u0004\u0002\u0005\u0005ee\u0004",
    "\u0002\u0005\u0005aa\u0005\u0002\u001c\u001c\u0085\u0085\u00f4\u00f4",
    "\u0003\u0002\u0112\u0119\u0003\u0002\u011a\u0124\u0006\u0002\u0012\u0012",
    "ss\u00a0\u00a0\u00a8\u00a8\u0004\u0002ZZ\u00f9\u00f9\u0003\u0002\u011a",
    "\u011b\b\u0002ABno\u0093\u009a\u00d4\u00d5\u010a\u010b\u0110\u0111\u0004",
    "\u0002MM\u00b1\u00b1\u0004\u0002\u00a9\u00a9\u00e2\u00e2\u0004\u0002",
    "``\u00b8\u00b89\u0002\r\u000e\u0010\u0011\u0015\u0016\u0018\u0019\u001b",
    "\u001b\u001d!$$&)++-35589>@BKMNQQSY\\^``cdgillortuwy{{~~\u0080\u0081",
    "\u0083\u0084\u0087\u0096\u0098\u0098\u009a\u009d\u009f\u009f\u00a2\u00a3",
    "\u00a6\u00a7\u00aa\u00aa\u00ac\u00ad\u00af\u00b8\u00ba\u00c1\u00c3\u00ca",
    "\u00cc\u00d3\u00d5\u00d5\u00d8\u00da\u00dc\u00dc\u00de\u00e0\u00e2\u00ea",
    "\u00ec\u00f0\u00f3\u00f3\u00f5\u00fa\u00fc\u00fe\u0102\u0105\u0108\u010b",
    "\u010e\u010e\u0111\u0111\u011f\u011f\u0011\u0002\u0013\u001377RRffv",
    "vzz\u007f\u007f\u0086\u0086\u009e\u009e\u00a4\u00a4\u00cb\u00cb\u00d7",
    "\u00d7\u00dd\u00dd\u00ff\u00ff\u0107\u0107\u0013\u0002\r\u0012\u0014",
    "68QSeguwy{~\u0080\u0085\u0087\u009d\u009f\u00a3\u00a5\u00ca\u00cc\u00d6",
    "\u00d8\u00dc\u00de\u00fe\u0100\u0106\u0108\u0111\u011f\u011f\u0002\u0cae",
    "\u0002\u00fa\u0003\u0002\u0002\u0002\u0004\u00fd\u0003\u0002\u0002\u0002",
    "\u0006\u0100\u0003\u0002\u0002\u0002\b\u0103\u0003\u0002\u0002\u0002",
    "\n\u0106\u0003\u0002\u0002\u0002\f\u0109\u0003\u0002\u0002\u0002\u000e",
    "\u010c\u0003\u0002\u0002\u0002\u0010\u03f1\u0003\u0002\u0002\u0002\u0012",
    "\u049d\u0003\u0002\u0002\u0002\u0014\u049f\u0003\u0002\u0002\u0002\u0016",
    "\u04b0\u0003\u0002\u0002\u0002\u0018\u04b6\u0003\u0002\u0002\u0002\u001a",
    "\u04c2\u0003\u0002\u0002\u0002\u001c\u04cf\u0003\u0002\u0002\u0002\u001e",
    "\u04d3\u0003\u0002\u0002\u0002 \u050f\u0003\u0002\u0002\u0002\"\u0511",
    "\u0003\u0002\u0002\u0002$\u0515\u0003\u0002\u0002\u0002&\u0521\u0003",
    "\u0002\u0002\u0002(\u0526\u0003\u0002\u0002\u0002*\u052d\u0003\u0002",
    "\u0002\u0002,\u052f\u0003\u0002\u0002\u0002.\u0537\u0003\u0002\u0002",
    "\u00020\u0540\u0003\u0002\u0002\u00022\u054b\u0003\u0002\u0002\u0002",
    "4\u054e\u0003\u0002\u0002\u00026\u0559\u0003\u0002\u0002\u00028\u0569",
    "\u0003\u0002\u0002\u0002:\u056f\u0003\u0002\u0002\u0002<\u0571\u0003",
    "\u0002\u0002\u0002>\u057c\u0003\u0002\u0002\u0002@\u058d\u0003\u0002",
    "\u0002\u0002B\u0594\u0003\u0002\u0002\u0002D\u0596\u0003\u0002\u0002",
    "\u0002F\u059c\u0003\u0002\u0002\u0002H\u05a9\u0003\u0002\u0002\u0002",
    "J\u05b5\u0003\u0002\u0002\u0002L\u05e5\u0003\u0002\u0002\u0002N\u05e8",
    "\u0003\u0002\u0002\u0002P\u060e\u0003\u0002\u0002\u0002R\u0610\u0003",
    "\u0002\u0002\u0002T\u0618\u0003\u0002\u0002\u0002V\u0639\u0003\u0002",
    "\u0002\u0002X\u0658\u0003\u0002\u0002\u0002Z\u0664\u0003\u0002\u0002",
    "\u0002\\\u0684\u0003\u0002\u0002\u0002^\u0690\u0003\u0002\u0002\u0002",
    "`\u0699\u0003\u0002\u0002\u0002b\u069d\u0003\u0002\u0002\u0002d\u06a0",
    "\u0003\u0002\u0002\u0002f\u06a3\u0003\u0002\u0002\u0002h\u06bd\u0003",
    "\u0002\u0002\u0002j\u06bf\u0003\u0002\u0002\u0002l\u06fd\u0003\u0002",
    "\u0002\u0002n\u070c\u0003\u0002\u0002\u0002p\u070e\u0003\u0002\u0002",
    "\u0002r\u072c\u0003\u0002\u0002\u0002t\u072e\u0003\u0002\u0002\u0002",
    "v\u0735\u0003\u0002\u0002\u0002x\u0755\u0003\u0002\u0002\u0002z\u0757",
    "\u0003\u0002\u0002\u0002|\u0769\u0003\u0002\u0002\u0002~\u0783\u0003",
    "\u0002\u0002\u0002\u0080\u0789\u0003\u0002\u0002\u0002\u0082\u078b\u0003",
    "\u0002\u0002\u0002\u0084\u07aa\u0003\u0002\u0002\u0002\u0086\u07ac\u0003",
    "\u0002\u0002\u0002\u0088\u07b0\u0003\u0002\u0002\u0002\u008a\u07b8\u0003",
    "\u0002\u0002\u0002\u008c\u07c3\u0003\u0002\u0002\u0002\u008e\u07c7\u0003",
    "\u0002\u0002\u0002\u0090\u07d2\u0003\u0002\u0002\u0002\u0092\u07ef\u0003",
    "\u0002\u0002\u0002\u0094\u07f1\u0003\u0002\u0002\u0002\u0096\u07fc\u0003",
    "\u0002\u0002\u0002\u0098\u0812\u0003\u0002\u0002\u0002\u009a\u0845\u0003",
    "\u0002\u0002\u0002\u009c\u0847\u0003\u0002\u0002\u0002\u009e\u0852\u0003",
    "\u0002\u0002\u0002\u00a0\u0859\u0003\u0002\u0002\u0002\u00a2\u085d\u0003",
    "\u0002\u0002\u0002\u00a4\u0867\u0003\u0002\u0002\u0002\u00a6\u086f\u0003",
    "\u0002\u0002\u0002\u00a8\u0887\u0003\u0002\u0002\u0002\u00aa\u088b\u0003",
    "\u0002\u0002\u0002\u00ac\u088d\u0003\u0002\u0002\u0002\u00ae\u089b\u0003",
    "\u0002\u0002\u0002\u00b0\u08dd\u0003\u0002\u0002\u0002\u00b2\u08e3\u0003",
    "\u0002\u0002\u0002\u00b4\u09ab\u0003\u0002\u0002\u0002\u00b6\u09c6\u0003",
    "\u0002\u0002\u0002\u00b8\u09c8\u0003\u0002\u0002\u0002\u00ba\u09ca\u0003",
    "\u0002\u0002\u0002\u00bc\u09cc\u0003\u0002\u0002\u0002\u00be\u09ce\u0003",
    "\u0002\u0002\u0002\u00c0\u09e1\u0003\u0002\u0002\u0002\u00c2\u09e3\u0003",
    "\u0002\u0002\u0002\u00c4\u09ee\u0003\u0002\u0002\u0002\u00c6\u09f0\u0003",
    "\u0002\u0002\u0002\u00c8\u09f5\u0003\u0002\u0002\u0002\u00ca\u0a19\u0003",
    "\u0002\u0002\u0002\u00cc\u0a1b\u0003\u0002\u0002\u0002\u00ce\u0a23\u0003",
    "\u0002\u0002\u0002\u00d0\u0a2c\u0003\u0002\u0002\u0002\u00d2\u0a34\u0003",
    "\u0002\u0002\u0002\u00d4\u0a3a\u0003\u0002\u0002\u0002\u00d6\u0a42\u0003",
    "\u0002\u0002\u0002\u00d8\u0a49\u0003\u0002\u0002\u0002\u00da\u0a4e\u0003",
    "\u0002\u0002\u0002\u00dc\u0a57\u0003\u0002\u0002\u0002\u00de\u0a89\u0003",
    "\u0002\u0002\u0002\u00e0\u0a9b\u0003\u0002\u0002\u0002\u00e2\u0aa4\u0003",
    "\u0002\u0002\u0002\u00e4\u0aa6\u0003\u0002\u0002\u0002\u00e6\u0aae\u0003",
    "\u0002\u0002\u0002\u00e8\u0ab6\u0003\u0002\u0002\u0002\u00ea\u0ac0\u0003",
    "\u0002\u0002\u0002\u00ec\u0ac5\u0003\u0002\u0002\u0002\u00ee\u0acd\u0003",
    "\u0002\u0002\u0002\u00f0\u0acf\u0003\u0002\u0002\u0002\u00f2\u0aed\u0003",
    "\u0002\u0002\u0002\u00f4\u0aef\u0003\u0002\u0002\u0002\u00f6\u0af1\u0003",
    "\u0002\u0002\u0002\u00f8\u0af3\u0003\u0002\u0002\u0002\u00fa\u00fb\u0005",
    "\u0010\t\u0002\u00fb\u00fc\u0007\u0002\u0002\u0003\u00fc\u0003\u0003",
    "\u0002\u0002\u0002\u00fd\u00fe\u0005\u00a2R\u0002\u00fe\u00ff\u0007",
    "\u0002\u0002\u0003\u00ff\u0005\u0003\u0002\u0002\u0002\u0100\u0101\u0005",
    "\u009eP\u0002\u0101\u0102\u0007\u0002\u0002\u0003\u0102\u0007\u0003",
    "\u0002\u0002\u0002\u0103\u0104\u0005\u009cO\u0002\u0104\u0105\u0007",
    "\u0002\u0002\u0003\u0105\t\u0003\u0002\u0002\u0002\u0106\u0107\u0005",
    "\u00a0Q\u0002\u0107\u0108\u0007\u0002\u0002\u0003\u0108\u000b\u0003",
    "\u0002\u0002\u0002\u0109\u010a\u0005\u00caf\u0002\u010a\u010b\u0007",
    "\u0002\u0002\u0003\u010b\r\u0003\u0002\u0002\u0002\u010c\u010d\u0005",
    "\u00d0i\u0002\u010d\u010e\u0007\u0002\u0002\u0003\u010e\u000f\u0003",
    "\u0002\u0002\u0002\u010f\u03f2\u0005\u001e\u0010\u0002\u0110\u0112\u0005",
    ".\u0018\u0002\u0111\u0110\u0003\u0002\u0002\u0002\u0111\u0112\u0003",
    "\u0002\u0002\u0002\u0112\u0113\u0003\u0002\u0002\u0002\u0113\u03f2\u0005",
    "H%\u0002\u0114\u0116\u0007\u0105\u0002\u0002\u0115\u0117\u0007\u009c",
    "\u0002\u0002\u0116\u0115\u0003\u0002\u0002\u0002\u0116\u0117\u0003\u0002",
    "\u0002\u0002\u0117\u0118\u0003\u0002\u0002\u0002\u0118\u03f2\u0005\u009c",
    "O\u0002\u0119\u011a\u00076\u0002\u0002\u011a\u011e\u0005(\u0015\u0002",
    "\u011b\u011c\u0007p\u0002\u0002\u011c\u011d\u0007\u00a0\u0002\u0002",
    "\u011d\u011f\u0007T\u0002\u0002\u011e\u011b\u0003\u0002\u0002\u0002",
    "\u011e\u011f\u0003\u0002\u0002\u0002\u011f\u0120\u0003\u0002\u0002\u0002",
    "\u0120\u0129\u0005\u00e8u\u0002\u0121\u0122\u0007.\u0002\u0002\u0122",
    "\u0128\u0007\u0125\u0002\u0002\u0123\u0128\u0005\u001c\u000f\u0002\u0124",
    "\u0125\u0007\u010f\u0002\u0002\u0125\u0126\u0007C\u0002\u0002\u0126",
    "\u0128\u00054\u001b\u0002\u0127\u0121\u0003\u0002\u0002\u0002\u0127",
    "\u0123\u0003\u0002\u0002\u0002\u0127\u0124\u0003\u0002\u0002\u0002\u0128",
    "\u012b\u0003\u0002\u0002\u0002\u0129\u0127\u0003\u0002\u0002\u0002\u0129",
    "\u012a\u0003\u0002\u0002\u0002\u012a\u03f2\u0003\u0002\u0002\u0002\u012b",
    "\u0129\u0003\u0002\u0002\u0002\u012c\u012d\u0007\u0010\u0002\u0002\u012d",
    "\u012e\u0005(\u0015\u0002\u012e\u012f\u0005\u00e8u\u0002\u012f\u0130",
    "\u0007\u00dc\u0002\u0002\u0130\u0131\u0007C\u0002\u0002\u0131\u0132",
    "\u00054\u001b\u0002\u0132\u03f2\u0003\u0002\u0002\u0002\u0133\u0134",
    "\u0007\u0010\u0002\u0002\u0134\u0135\u0005(\u0015\u0002\u0135\u0136",
    "\u0005\u00e8u\u0002\u0136\u0137\u0007\u00dc\u0002\u0002\u0137\u0138",
    "\u0005\u001c\u000f\u0002\u0138\u03f2\u0003\u0002\u0002\u0002\u0139\u013a",
    "\u0007N\u0002\u0002\u013a\u013d\u0005(\u0015\u0002\u013b\u013c\u0007",
    "p\u0002\u0002\u013c\u013e\u0007T\u0002\u0002\u013d\u013b\u0003\u0002",
    "\u0002\u0002\u013d\u013e\u0003\u0002\u0002\u0002\u013e\u013f\u0003\u0002",
    "\u0002\u0002\u013f\u0141\u0005\u00e8u\u0002\u0140\u0142\t\u0002\u0002",
    "\u0002\u0141\u0140\u0003\u0002\u0002\u0002\u0141\u0142\u0003\u0002\u0002",
    "\u0002\u0142\u03f2\u0003\u0002\u0002\u0002\u0143\u0144\u0007\u00df\u0002",
    "\u0002\u0144\u0147\t\u0003\u0002\u0002\u0145\u0146\t\u0004\u0002\u0002",
    "\u0146\u0148\u0005\u009cO\u0002\u0147\u0145\u0003\u0002\u0002\u0002",
    "\u0147\u0148\u0003\u0002\u0002\u0002\u0148\u014d\u0003\u0002\u0002\u0002",
    "\u0149\u014b\u0007\u0087\u0002\u0002\u014a\u0149\u0003\u0002\u0002\u0002",
    "\u014a\u014b\u0003\u0002\u0002\u0002\u014b\u014c\u0003\u0002\u0002\u0002",
    "\u014c\u014e\u0007\u0125\u0002\u0002\u014d\u014a\u0003\u0002\u0002\u0002",
    "\u014d\u014e\u0003\u0002\u0002\u0002\u014e\u03f2\u0003\u0002\u0002\u0002",
    "\u014f\u0154\u0005\u0014\u000b\u0002\u0150\u0151\u0007\u0003\u0002\u0002",
    "\u0151\u0152\u0005\u00d0i\u0002\u0152\u0153\u0007\u0004\u0002\u0002",
    "\u0153\u0155\u0003\u0002\u0002\u0002\u0154\u0150\u0003\u0002\u0002\u0002",
    "\u0154\u0155\u0003\u0002\u0002\u0002\u0155\u0156\u0003\u0002\u0002\u0002",
    "\u0156\u0164\u00052\u001a\u0002\u0157\u0158\u0007\u00a7\u0002\u0002",
    "\u0158\u0163\u00054\u001b\u0002\u0159\u015a\u0007\u00b2\u0002\u0002",
    "\u015a\u015b\u0007\u001f\u0002\u0002\u015b\u0163\u0005\u00a6T\u0002",
    "\u015c\u0163\u0005\u0018\r\u0002\u015d\u0163\u0005\u001c\u000f\u0002",
    "\u015e\u015f\u0007.\u0002\u0002\u015f\u0163\u0007\u0125\u0002\u0002",
    "\u0160\u0161\u0007\u00ee\u0002\u0002\u0161\u0163\u00054\u001b\u0002",
    "\u0162\u0157\u0003\u0002\u0002\u0002\u0162\u0159\u0003\u0002\u0002\u0002",
    "\u0162\u015c\u0003\u0002\u0002\u0002\u0162\u015d\u0003\u0002\u0002\u0002",
    "\u0162\u015e\u0003\u0002\u0002\u0002\u0162\u0160\u0003\u0002\u0002\u0002",
    "\u0163\u0166\u0003\u0002\u0002\u0002\u0164\u0162\u0003\u0002\u0002\u0002",
    "\u0164\u0165\u0003\u0002\u0002\u0002\u0165\u016b\u0003\u0002\u0002\u0002",
    "\u0166\u0164\u0003\u0002\u0002\u0002\u0167\u0169\u0007\u0017\u0002\u0002",
    "\u0168\u0167\u0003\u0002\u0002\u0002\u0168\u0169\u0003\u0002\u0002\u0002",
    "\u0169\u016a\u0003\u0002\u0002\u0002\u016a\u016c\u0005\u001e\u0010\u0002",
    "\u016b\u0168\u0003\u0002\u0002\u0002\u016b\u016c\u0003\u0002\u0002\u0002",
    "\u016c\u03f2\u0003\u0002\u0002\u0002\u016d\u0172\u0005\u0014\u000b\u0002",
    "\u016e\u016f\u0007\u0003\u0002\u0002\u016f\u0170\u0005\u00d0i\u0002",
    "\u0170\u0171\u0007\u0004\u0002\u0002\u0171\u0173\u0003\u0002\u0002\u0002",
    "\u0172\u016e\u0003\u0002\u0002\u0002\u0172\u0173\u0003\u0002\u0002\u0002",
    "\u0173\u018a\u0003\u0002\u0002\u0002\u0174\u0175\u0007.\u0002\u0002",
    "\u0175\u0189\u0007\u0125\u0002\u0002\u0176\u0177\u0007\u00b2\u0002\u0002",
    "\u0177\u0178\u0007\u001f\u0002\u0002\u0178\u0179\u0007\u0003\u0002\u0002",
    "\u0179\u017a\u0005\u00d0i\u0002\u017a\u017b\u0007\u0004\u0002\u0002",
    "\u017b\u0180\u0003\u0002\u0002\u0002\u017c\u017d\u0007\u00b2\u0002\u0002",
    "\u017d\u017e\u0007\u001f\u0002\u0002\u017e\u0180\u0005\u0086D\u0002",
    "\u017f\u0176\u0003\u0002\u0002\u0002\u017f\u017c\u0003\u0002\u0002\u0002",
    "\u0180\u0189\u0003\u0002\u0002\u0002\u0181\u0189\u0005\u0018\r\u0002",
    "\u0182\u0189\u0005\u001a\u000e\u0002\u0183\u0189\u0005\u009aN\u0002",
    "\u0184\u0189\u0005@!\u0002\u0185\u0189\u0005\u001c\u000f\u0002\u0186",
    "\u0187\u0007\u00ee\u0002\u0002\u0187\u0189\u00054\u001b\u0002\u0188",
    "\u0174\u0003\u0002\u0002\u0002\u0188\u017f\u0003\u0002\u0002\u0002\u0188",
    "\u0181\u0003\u0002\u0002\u0002\u0188\u0182\u0003\u0002\u0002\u0002\u0188",
    "\u0183\u0003\u0002\u0002\u0002\u0188\u0184\u0003\u0002\u0002\u0002\u0188",
    "\u0185\u0003\u0002\u0002\u0002\u0188\u0186\u0003\u0002\u0002\u0002\u0189",
    "\u018c\u0003\u0002\u0002\u0002\u018a\u0188\u0003\u0002\u0002\u0002\u018a",
    "\u018b\u0003\u0002\u0002\u0002\u018b\u0191\u0003\u0002\u0002\u0002\u018c",
    "\u018a\u0003\u0002\u0002\u0002\u018d\u018f\u0007\u0017\u0002\u0002\u018e",
    "\u018d\u0003\u0002\u0002\u0002\u018e\u018f\u0003\u0002\u0002\u0002\u018f",
    "\u0190\u0003\u0002\u0002\u0002\u0190\u0192\u0005\u001e\u0010\u0002\u0191",
    "\u018e\u0003\u0002\u0002\u0002\u0191\u0192\u0003\u0002\u0002\u0002\u0192",
    "\u03f2\u0003\u0002\u0002\u0002\u0193\u0194\u00076\u0002\u0002\u0194",
    "\u0198\u0007\u00eb\u0002\u0002\u0195\u0196\u0007p\u0002\u0002\u0196",
    "\u0197\u0007\u00a0\u0002\u0002\u0197\u0199\u0007T\u0002\u0002\u0198",
    "\u0195\u0003\u0002\u0002\u0002\u0198\u0199\u0003\u0002\u0002\u0002\u0199",
    "\u019a\u0003\u0002\u0002\u0002\u019a\u019b\u0005\u009eP\u0002\u019b",
    "\u019c\u0007\u0087\u0002\u0002\u019c\u019e\u0005\u009eP\u0002\u019d",
    "\u019f\u0005\u001c\u000f\u0002\u019e\u019d\u0003\u0002\u0002\u0002\u019e",
    "\u019f\u0003\u0002\u0002\u0002\u019f\u03f2\u0003\u0002\u0002\u0002\u01a0",
    "\u01a5\u0005\u0016\f\u0002\u01a1\u01a2\u0007\u0003\u0002\u0002\u01a2",
    "\u01a3\u0005\u00d0i\u0002\u01a3\u01a4\u0007\u0004\u0002\u0002\u01a4",
    "\u01a6\u0003\u0002\u0002\u0002\u01a5\u01a1\u0003\u0002\u0002\u0002\u01a5",
    "\u01a6\u0003\u0002\u0002\u0002\u01a6\u01a7\u0003\u0002\u0002\u0002\u01a7",
    "\u01b5\u00052\u001a\u0002\u01a8\u01a9\u0007\u00a7\u0002\u0002\u01a9",
    "\u01b4\u00054\u001b\u0002\u01aa\u01ab\u0007\u00b2\u0002\u0002\u01ab",
    "\u01ac\u0007\u001f\u0002\u0002\u01ac\u01b4\u0005\u00a6T\u0002\u01ad",
    "\u01b4\u0005\u0018\r\u0002\u01ae\u01b4\u0005\u001c\u000f\u0002\u01af",
    "\u01b0\u0007.\u0002\u0002\u01b0\u01b4\u0007\u0125\u0002\u0002\u01b1",
    "\u01b2\u0007\u00ee\u0002\u0002\u01b2\u01b4\u00054\u001b\u0002\u01b3",
    "\u01a8\u0003\u0002\u0002\u0002\u01b3\u01aa\u0003\u0002\u0002\u0002\u01b3",
    "\u01ad\u0003\u0002\u0002\u0002\u01b3\u01ae\u0003\u0002\u0002\u0002\u01b3",
    "\u01af\u0003\u0002\u0002\u0002\u01b3\u01b1\u0003\u0002\u0002\u0002\u01b4",
    "\u01b7\u0003\u0002\u0002\u0002\u01b5\u01b3\u0003\u0002\u0002\u0002\u01b5",
    "\u01b6\u0003\u0002\u0002\u0002\u01b6\u01bc\u0003\u0002\u0002\u0002\u01b7",
    "\u01b5\u0003\u0002\u0002\u0002\u01b8\u01ba\u0007\u0017\u0002\u0002\u01b9",
    "\u01b8\u0003\u0002\u0002\u0002\u01b9\u01ba\u0003\u0002\u0002\u0002\u01ba",
    "\u01bb\u0003\u0002\u0002\u0002\u01bb\u01bd\u0005\u001e\u0010\u0002\u01bc",
    "\u01b9\u0003\u0002\u0002\u0002\u01bc\u01bd\u0003\u0002\u0002\u0002\u01bd",
    "\u03f2\u0003\u0002\u0002\u0002\u01be\u01bf\u0007\u0011\u0002\u0002\u01bf",
    "\u01c0\u0007\u00eb\u0002\u0002\u01c0\u01c2\u0005\u009eP\u0002\u01c1",
    "\u01c3\u0005$\u0013\u0002\u01c2\u01c1\u0003\u0002\u0002\u0002\u01c2",
    "\u01c3\u0003\u0002\u0002\u0002\u01c3\u01c4\u0003\u0002\u0002\u0002\u01c4",
    "\u01c5\u00072\u0002\u0002\u01c5\u01cd\u0007\u00e5\u0002\u0002\u01c6",
    "\u01ce\u0005\u00ecw\u0002\u01c7\u01c8\u0007a\u0002\u0002\u01c8\u01c9",
    "\u0007-\u0002\u0002\u01c9\u01ce\u0005\u0088E\u0002\u01ca\u01cb\u0007",
    "a\u0002\u0002\u01cb\u01cc\u0007\u000f\u0002\u0002\u01cc\u01ce\u0007",
    "-\u0002\u0002\u01cd\u01c6\u0003\u0002\u0002\u0002\u01cd\u01c7\u0003",
    "\u0002\u0002\u0002\u01cd\u01ca\u0003\u0002\u0002\u0002\u01cd\u01ce\u0003",
    "\u0002\u0002\u0002\u01ce\u03f2\u0003\u0002\u0002\u0002\u01cf\u01d0\u0007",
    "\u0010\u0002\u0002\u01d0\u01d1\u0007\u00eb\u0002\u0002\u01d1\u01d2\u0005",
    "\u009cO\u0002\u01d2\u01d3\u0007\r\u0002\u0002\u01d3\u01d4\t\u0005\u0002",
    "\u0002\u01d4\u01d5\u0005\u00ccg\u0002\u01d5\u03f2\u0003\u0002\u0002",
    "\u0002\u01d6\u01d7\u0007\u0010\u0002\u0002\u01d7\u01d8\u0007\u00eb\u0002",
    "\u0002\u01d8\u01d9\u0005\u009cO\u0002\u01d9\u01da\u0007\r\u0002\u0002",
    "\u01da\u01db\t\u0005\u0002\u0002\u01db\u01dc\u0007\u0003\u0002\u0002",
    "\u01dc\u01dd\u0005\u00ccg\u0002\u01dd\u01de\u0007\u0004\u0002\u0002",
    "\u01de\u03f2\u0003\u0002\u0002\u0002\u01df\u01e0\u0007\u0010\u0002\u0002",
    "\u01e0\u01e1\u0007\u00eb\u0002\u0002\u01e1\u01e2\u0005\u009cO\u0002",
    "\u01e2\u01e3\u0007\u00c4\u0002\u0002\u01e3\u01e4\u0007,\u0002\u0002",
    "\u01e4\u01e5\u0005\u00e6t\u0002\u01e5\u01e6\u0007\u00f2\u0002\u0002",
    "\u01e6\u01e7\u0005\u00ecw\u0002\u01e7\u03f2\u0003\u0002\u0002\u0002",
    "\u01e8\u01e9\u0007\u0010\u0002\u0002\u01e9\u01ea\u0007\u00eb\u0002\u0002",
    "\u01ea\u01eb\u0005\u009cO\u0002\u01eb\u01ec\u0007N\u0002\u0002\u01ec",
    "\u01ed\t\u0005\u0002\u0002\u01ed\u01ee\u0007\u0003\u0002\u0002\u01ee",
    "\u01ef\u0005\u00e4s\u0002\u01ef\u01f0\u0007\u0004\u0002\u0002\u01f0",
    "\u03f2\u0003\u0002\u0002\u0002\u01f1\u01f2\u0007\u0010\u0002\u0002\u01f2",
    "\u01f3\u0007\u00eb\u0002\u0002\u01f3\u01f4\u0005\u009cO\u0002\u01f4",
    "\u01f5\u0007N\u0002\u0002\u01f5\u01f6\t\u0005\u0002\u0002\u01f6\u01f7",
    "\u0005\u00e4s\u0002\u01f7\u03f2\u0003\u0002\u0002\u0002\u01f8\u01f9",
    "\u0007\u0010\u0002\u0002\u01f9\u01fa\t\u0006\u0002\u0002\u01fa\u01fb",
    "\u0005\u009eP\u0002\u01fb\u01fc\u0007\u00c4\u0002\u0002\u01fc\u01fd",
    "\u0007\u00f2\u0002\u0002\u01fd\u01fe\u0005\u009eP\u0002\u01fe\u03f2",
    "\u0003\u0002\u0002\u0002\u01ff\u0200\u0007\u0010\u0002\u0002\u0200\u0201",
    "\t\u0006\u0002\u0002\u0201\u0202\u0005\u009cO\u0002\u0202\u0203\u0007",
    "\u00dc\u0002\u0002\u0203\u0204\u0007\u00ee\u0002\u0002\u0204\u0205\u0005",
    "4\u001b\u0002\u0205\u03f2\u0003\u0002\u0002\u0002\u0206\u0207\u0007",
    "\u0010\u0002\u0002\u0207\u0208\t\u0006\u0002\u0002\u0208\u0209\u0005",
    "\u009cO\u0002\u0209\u020a\u0007\u0103\u0002\u0002\u020a\u020d\u0007",
    "\u00ee\u0002\u0002\u020b\u020c\u0007p\u0002\u0002\u020c\u020e\u0007",
    "T\u0002\u0002\u020d\u020b\u0003\u0002\u0002\u0002\u020d\u020e\u0003",
    "\u0002\u0002\u0002\u020e\u020f\u0003\u0002\u0002\u0002\u020f\u0210\u0005",
    "4\u001b\u0002\u0210\u03f2\u0003\u0002\u0002\u0002\u0211\u0212\u0007",
    "\u0010\u0002\u0002\u0212\u0213\u0007\u00eb\u0002\u0002\u0213\u0214\u0005",
    "\u009cO\u0002\u0214\u0216\t\u0007\u0002\u0002\u0215\u0217\u0007,\u0002",
    "\u0002\u0216\u0215\u0003\u0002\u0002\u0002\u0216\u0217\u0003\u0002\u0002",
    "\u0002\u0217\u0218\u0003\u0002\u0002\u0002\u0218\u021b\u0005\u00e6t",
    "\u0002\u0219\u021a\u0007\u00fb\u0002\u0002\u021a\u021c\u0005\u00caf",
    "\u0002\u021b\u0219\u0003\u0002\u0002\u0002\u021b\u021c\u0003\u0002\u0002",
    "\u0002\u021c\u021f\u0003\u0002\u0002\u0002\u021d\u021e\u0007.\u0002",
    "\u0002\u021e\u0220\u0007\u0125\u0002\u0002\u021f\u021d\u0003\u0002\u0002",
    "\u0002\u021f\u0220\u0003\u0002\u0002\u0002\u0220\u0222\u0003\u0002\u0002",
    "\u0002\u0221\u0223\u0005\u00c8e\u0002\u0222\u0221\u0003\u0002\u0002",
    "\u0002\u0222\u0223\u0003\u0002\u0002\u0002\u0223\u03f2\u0003\u0002\u0002",
    "\u0002\u0224\u0225\u0007\u0010\u0002\u0002\u0225\u0226\u0007\u00eb\u0002",
    "\u0002\u0226\u0228\u0005\u009eP\u0002\u0227\u0229\u0005$\u0013\u0002",
    "\u0228\u0227\u0003\u0002\u0002\u0002\u0228\u0229\u0003\u0002\u0002\u0002",
    "\u0229\u022a\u0003\u0002\u0002\u0002\u022a\u022c\u0007$\u0002\u0002",
    "\u022b\u022d\u0007,\u0002\u0002\u022c\u022b\u0003\u0002\u0002\u0002",
    "\u022c\u022d\u0003\u0002\u0002\u0002\u022d\u022e\u0003\u0002\u0002\u0002",
    "\u022e\u022f\u0005\u00e8u\u0002\u022f\u0231\u0005\u00d2j\u0002\u0230",
    "\u0232\u0005\u00c8e\u0002\u0231\u0230\u0003\u0002\u0002\u0002\u0231",
    "\u0232\u0003\u0002\u0002\u0002\u0232\u03f2\u0003\u0002\u0002\u0002\u0233",
    "\u0234\u0007\u0010\u0002\u0002\u0234\u0235\u0007\u00eb\u0002\u0002\u0235",
    "\u0237\u0005\u009eP\u0002\u0236\u0238\u0005$\u0013\u0002\u0237\u0236",
    "\u0003\u0002\u0002\u0002\u0237\u0238\u0003\u0002\u0002\u0002\u0238\u0239",
    "\u0003\u0002\u0002\u0002\u0239\u023a\u0007\u00dc\u0002\u0002\u023a\u023b",
    "\u0007\u00d9\u0002\u0002\u023b\u023f\u0007\u0125\u0002\u0002\u023c\u023d",
    "\u0007\u010f\u0002\u0002\u023d\u023e\u0007\u00da\u0002\u0002\u023e\u0240",
    "\u00054\u001b\u0002\u023f\u023c\u0003\u0002\u0002\u0002\u023f\u0240",
    "\u0003\u0002\u0002\u0002\u0240\u03f2\u0003\u0002\u0002\u0002\u0241\u0242",
    "\u0007\u0010\u0002\u0002\u0242\u0243\u0007\u00eb\u0002\u0002\u0243\u0245",
    "\u0005\u009eP\u0002\u0244\u0246\u0005$\u0013\u0002\u0245\u0244\u0003",
    "\u0002\u0002\u0002\u0245\u0246\u0003\u0002\u0002\u0002\u0246\u0247\u0003",
    "\u0002\u0002\u0002\u0247\u0248\u0007\u00dc\u0002\u0002\u0248\u0249\u0007",
    "\u00da\u0002\u0002\u0249\u024a\u00054\u001b\u0002\u024a\u03f2\u0003",
    "\u0002\u0002\u0002\u024b\u024c\u0007\u0010\u0002\u0002\u024c\u024d\u0007",
    "\u00eb\u0002\u0002\u024d\u024e\u0005\u009eP\u0002\u024e\u0252\u0007",
    "\r\u0002\u0002\u024f\u0250\u0007p\u0002\u0002\u0250\u0251\u0007\u00a0",
    "\u0002\u0002\u0251\u0253\u0007T\u0002\u0002\u0252\u024f\u0003\u0002",
    "\u0002\u0002\u0252\u0253\u0003\u0002\u0002\u0002\u0253\u0255\u0003\u0002",
    "\u0002\u0002\u0254\u0256\u0005\"\u0012\u0002\u0255\u0254\u0003\u0002",
    "\u0002\u0002\u0256\u0257\u0003\u0002\u0002\u0002\u0257\u0255\u0003\u0002",
    "\u0002\u0002\u0257\u0258\u0003\u0002\u0002\u0002\u0258\u03f2\u0003\u0002",
    "\u0002\u0002\u0259\u025a\u0007\u0010\u0002\u0002\u025a\u025b\u0007\u0109",
    "\u0002\u0002\u025b\u025c\u0005\u009eP\u0002\u025c\u0260\u0007\r\u0002",
    "\u0002\u025d\u025e\u0007p\u0002\u0002\u025e\u025f\u0007\u00a0\u0002",
    "\u0002\u025f\u0261\u0007T\u0002\u0002\u0260\u025d\u0003\u0002\u0002",
    "\u0002\u0260\u0261\u0003\u0002\u0002\u0002\u0261\u0263\u0003\u0002\u0002",
    "\u0002\u0262\u0264\u0005$\u0013\u0002\u0263\u0262\u0003\u0002\u0002",
    "\u0002\u0264\u0265\u0003\u0002\u0002\u0002\u0265\u0263\u0003\u0002\u0002",
    "\u0002\u0265\u0266\u0003\u0002\u0002\u0002\u0266\u03f2\u0003\u0002\u0002",
    "\u0002\u0267\u0268\u0007\u0010\u0002\u0002\u0268\u0269\u0007\u00eb\u0002",
    "\u0002\u0269\u026a\u0005\u009eP\u0002\u026a\u026b\u0005$\u0013\u0002",
    "\u026b\u026c\u0007\u00c4\u0002\u0002\u026c\u026d\u0007\u00f2\u0002\u0002",
    "\u026d\u026e\u0005$\u0013\u0002\u026e\u03f2\u0003\u0002\u0002\u0002",
    "\u026f\u0270\u0007\u0010\u0002\u0002\u0270\u0271\u0007\u00eb\u0002\u0002",
    "\u0271\u0272\u0005\u009eP\u0002\u0272\u0275\u0007N\u0002\u0002\u0273",
    "\u0274\u0007p\u0002\u0002\u0274\u0276\u0007T\u0002\u0002\u0275\u0273",
    "\u0003\u0002\u0002\u0002\u0275\u0276\u0003\u0002\u0002\u0002\u0276\u0277",
    "\u0003\u0002\u0002\u0002\u0277\u027c\u0005$\u0013\u0002\u0278\u0279",
    "\u0007\u0005\u0002\u0002\u0279\u027b\u0005$\u0013\u0002\u027a\u0278",
    "\u0003\u0002\u0002\u0002\u027b\u027e\u0003\u0002\u0002\u0002\u027c\u027a",
    "\u0003\u0002\u0002\u0002\u027c\u027d\u0003\u0002\u0002\u0002\u027d\u0280",
    "\u0003\u0002\u0002\u0002\u027e\u027c\u0003\u0002\u0002\u0002\u027f\u0281",
    "\u0007\u00bb\u0002\u0002\u0280\u027f\u0003\u0002\u0002\u0002\u0280\u0281",
    "\u0003\u0002\u0002\u0002\u0281\u03f2\u0003\u0002\u0002\u0002\u0282\u0283",
    "\u0007\u0010\u0002\u0002\u0283\u0284\u0007\u0109\u0002\u0002\u0284\u0285",
    "\u0005\u009eP\u0002\u0285\u0288\u0007N\u0002\u0002\u0286\u0287\u0007",
    "p\u0002\u0002\u0287\u0289\u0007T\u0002\u0002\u0288\u0286\u0003\u0002",
    "\u0002\u0002\u0288\u0289\u0003\u0002\u0002\u0002\u0289\u028a\u0003\u0002",
    "\u0002\u0002\u028a\u028f\u0005$\u0013\u0002\u028b\u028c\u0007\u0005",
    "\u0002\u0002\u028c\u028e\u0005$\u0013\u0002\u028d\u028b\u0003\u0002",
    "\u0002\u0002\u028e\u0291\u0003\u0002\u0002\u0002\u028f\u028d\u0003\u0002",
    "\u0002\u0002\u028f\u0290\u0003\u0002\u0002\u0002\u0290\u03f2\u0003\u0002",
    "\u0002\u0002\u0291\u028f\u0003\u0002\u0002\u0002\u0292\u0293\u0007\u0010",
    "\u0002\u0002\u0293\u0294\u0007\u00eb\u0002\u0002\u0294\u0295\u0005\u009c",
    "O\u0002\u0295\u0296\u0007\u00dc\u0002\u0002\u0296\u0297\u0005\u001c",
    "\u000f\u0002\u0297\u03f2\u0003\u0002\u0002\u0002\u0298\u0299\u0007\u0010",
    "\u0002\u0002\u0299\u029a\u0007\u00eb\u0002\u0002\u029a\u029b\u0005\u009e",
    "P\u0002\u029b\u029c\u0005$\u0013\u0002\u029c\u029d\u0007\u00dc\u0002",
    "\u0002\u029d\u029e\u0005\u001c\u000f\u0002\u029e\u03f2\u0003\u0002\u0002",
    "\u0002\u029f\u02a0\u0007\u0010\u0002\u0002\u02a0\u02a1\u0007\u00eb\u0002",
    "\u0002\u02a1\u02a2\u0005\u009eP\u0002\u02a2\u02a3\u0007\u00c0\u0002",
    "\u0002\u02a3\u02a4\u0007\u00b3\u0002\u0002\u02a4\u03f2\u0003\u0002\u0002",
    "\u0002\u02a5\u02a6\u0007N\u0002\u0002\u02a6\u02a9\u0007\u00eb\u0002",
    "\u0002\u02a7\u02a8\u0007p\u0002\u0002\u02a8\u02aa\u0007T\u0002\u0002",
    "\u02a9\u02a7\u0003\u0002\u0002\u0002\u02a9\u02aa\u0003\u0002\u0002\u0002",
    "\u02aa\u02ab\u0003\u0002\u0002\u0002\u02ab\u02ad\u0005\u009cO\u0002",
    "\u02ac\u02ae\u0007\u00bb\u0002\u0002\u02ad\u02ac\u0003\u0002\u0002\u0002",
    "\u02ad\u02ae\u0003\u0002\u0002\u0002\u02ae\u03f2\u0003\u0002\u0002\u0002",
    "\u02af\u02b0\u0007N\u0002\u0002\u02b0\u02b3\u0007\u0109\u0002\u0002",
    "\u02b1\u02b2\u0007p\u0002\u0002\u02b2\u02b4\u0007T\u0002\u0002\u02b3",
    "\u02b1\u0003\u0002\u0002\u0002\u02b3\u02b4\u0003\u0002\u0002\u0002\u02b4",
    "\u02b5\u0003\u0002\u0002\u0002\u02b5\u03f2\u0005\u009cO\u0002\u02b6",
    "\u02b9\u00076\u0002\u0002\u02b7\u02b8\u0007\u00a8\u0002\u0002\u02b8",
    "\u02ba\u0007\u00c6\u0002\u0002\u02b9\u02b7\u0003\u0002\u0002\u0002\u02b9",
    "\u02ba\u0003\u0002\u0002\u0002\u02ba\u02bf\u0003\u0002\u0002\u0002\u02bb",
    "\u02bd\u0007i\u0002\u0002\u02bc\u02bb\u0003\u0002\u0002\u0002\u02bc",
    "\u02bd\u0003\u0002\u0002\u0002\u02bd\u02be\u0003\u0002\u0002\u0002\u02be",
    "\u02c0\u0007\u00ef\u0002\u0002\u02bf\u02bc\u0003\u0002\u0002\u0002\u02bf",
    "\u02c0\u0003\u0002\u0002\u0002\u02c0\u02c1\u0003\u0002\u0002\u0002\u02c1",
    "\u02c5\u0007\u0109\u0002\u0002\u02c2\u02c3\u0007p\u0002\u0002\u02c3",
    "\u02c4\u0007\u00a0\u0002\u0002\u02c4\u02c6\u0007T\u0002\u0002\u02c5",
    "\u02c2\u0003\u0002\u0002\u0002\u02c5\u02c6\u0003\u0002\u0002\u0002\u02c6",
    "\u02c7\u0003\u0002\u0002\u0002\u02c7\u02c9\u0005\u009eP\u0002\u02c8",
    "\u02ca\u0005\u008eH\u0002\u02c9\u02c8\u0003\u0002\u0002\u0002\u02c9",
    "\u02ca\u0003\u0002\u0002\u0002\u02ca\u02d4\u0003\u0002\u0002\u0002\u02cb",
    "\u02cc\u0007.\u0002\u0002\u02cc\u02d3\u0007\u0125\u0002\u0002\u02cd",
    "\u02ce\u0007\u00b2\u0002\u0002\u02ce\u02cf\u0007\u00a4\u0002\u0002\u02cf",
    "\u02d3\u0005\u0086D\u0002\u02d0\u02d1\u0007\u00ee\u0002\u0002\u02d1",
    "\u02d3\u00054\u001b\u0002\u02d2\u02cb\u0003\u0002\u0002\u0002\u02d2",
    "\u02cd\u0003\u0002\u0002\u0002\u02d2\u02d0\u0003\u0002\u0002\u0002\u02d3",
    "\u02d6\u0003\u0002\u0002\u0002\u02d4\u02d2\u0003\u0002\u0002\u0002\u02d4",
    "\u02d5\u0003\u0002\u0002\u0002\u02d5\u02d7\u0003\u0002\u0002\u0002\u02d6",
    "\u02d4\u0003\u0002\u0002\u0002\u02d7\u02d8\u0007\u0017\u0002\u0002\u02d8",
    "\u02d9\u0005\u001e\u0010\u0002\u02d9\u03f2\u0003\u0002\u0002\u0002\u02da",
    "\u02dd\u00076\u0002\u0002\u02db\u02dc\u0007\u00a8\u0002\u0002\u02dc",
    "\u02de\u0007\u00c6\u0002\u0002\u02dd\u02db\u0003\u0002\u0002\u0002\u02dd",
    "\u02de\u0003\u0002\u0002\u0002\u02de\u02e0\u0003\u0002\u0002\u0002\u02df",
    "\u02e1\u0007i\u0002\u0002\u02e0\u02df\u0003\u0002\u0002\u0002\u02e0",
    "\u02e1\u0003\u0002\u0002\u0002\u02e1\u02e2\u0003\u0002\u0002\u0002\u02e2",
    "\u02e3\u0007\u00ef\u0002\u0002\u02e3\u02e4\u0007\u0109\u0002\u0002\u02e4",
    "\u02e9\u0005\u009eP\u0002\u02e5\u02e6\u0007\u0003\u0002\u0002\u02e6",
    "\u02e7\u0005\u00d0i\u0002\u02e7\u02e8\u0007\u0004\u0002\u0002\u02e8",
    "\u02ea\u0003\u0002\u0002\u0002\u02e9\u02e5\u0003\u0002\u0002\u0002\u02e9",
    "\u02ea\u0003\u0002\u0002\u0002\u02ea\u02eb\u0003\u0002\u0002\u0002\u02eb",
    "\u02ee\u00052\u001a\u0002\u02ec\u02ed\u0007\u00a7\u0002\u0002\u02ed",
    "\u02ef\u00054\u001b\u0002\u02ee\u02ec\u0003\u0002\u0002\u0002\u02ee",
    "\u02ef\u0003\u0002\u0002\u0002\u02ef\u03f2\u0003\u0002\u0002\u0002\u02f0",
    "\u02f1\u0007\u0010\u0002\u0002\u02f1\u02f2\u0007\u0109\u0002\u0002\u02f2",
    "\u02f4\u0005\u009eP\u0002\u02f3\u02f5\u0007\u0017\u0002\u0002\u02f4",
    "\u02f3\u0003\u0002\u0002\u0002\u02f4\u02f5\u0003\u0002\u0002\u0002\u02f5",
    "\u02f6\u0003\u0002\u0002\u0002\u02f6\u02f7\u0005\u001e\u0010\u0002\u02f7",
    "\u03f2\u0003\u0002\u0002\u0002\u02f8\u02fb\u00076\u0002\u0002\u02f9",
    "\u02fa\u0007\u00a8\u0002\u0002\u02fa\u02fc\u0007\u00c6\u0002\u0002\u02fb",
    "\u02f9\u0003\u0002\u0002\u0002\u02fb\u02fc\u0003\u0002\u0002\u0002\u02fc",
    "\u02fe\u0003\u0002\u0002\u0002\u02fd\u02ff\u0007\u00ef\u0002\u0002\u02fe",
    "\u02fd\u0003\u0002\u0002\u0002\u02fe\u02ff\u0003\u0002\u0002\u0002\u02ff",
    "\u0300\u0003\u0002\u0002\u0002\u0300\u0304\u0007g\u0002\u0002\u0301",
    "\u0302\u0007p\u0002\u0002\u0302\u0303\u0007\u00a0\u0002\u0002\u0303",
    "\u0305\u0007T\u0002\u0002\u0304\u0301\u0003\u0002\u0002\u0002\u0304",
    "\u0305\u0003\u0002\u0002\u0002\u0305\u0306\u0003\u0002\u0002\u0002\u0306",
    "\u0307\u0005\u00e6t\u0002\u0307\u0308\u0007\u0017\u0002\u0002\u0308",
    "\u0312\u0007\u0125\u0002\u0002\u0309\u030a\u0007\u0107\u0002\u0002\u030a",
    "\u030f\u0005F$\u0002\u030b\u030c\u0007\u0005\u0002\u0002\u030c\u030e",
    "\u0005F$\u0002\u030d\u030b\u0003\u0002\u0002\u0002\u030e\u0311\u0003",
    "\u0002\u0002\u0002\u030f\u030d\u0003\u0002\u0002\u0002\u030f\u0310\u0003",
    "\u0002\u0002\u0002\u0310\u0313\u0003\u0002\u0002\u0002\u0311\u030f\u0003",
    "\u0002\u0002\u0002\u0312\u0309\u0003\u0002\u0002\u0002\u0312\u0313\u0003",
    "\u0002\u0002\u0002\u0313\u03f2\u0003\u0002\u0002\u0002\u0314\u0316\u0007",
    "N\u0002\u0002\u0315\u0317\u0007\u00ef\u0002\u0002\u0316\u0315\u0003",
    "\u0002\u0002\u0002\u0316\u0317\u0003\u0002\u0002\u0002\u0317\u0318\u0003",
    "\u0002\u0002\u0002\u0318\u031b\u0007g\u0002\u0002\u0319\u031a\u0007",
    "p\u0002\u0002\u031a\u031c\u0007T\u0002\u0002\u031b\u0319\u0003\u0002",
    "\u0002\u0002\u031b\u031c\u0003\u0002\u0002\u0002\u031c\u031d\u0003\u0002",
    "\u0002\u0002\u031d\u03f2\u0005\u00e6t\u0002\u031e\u0320\u0007U\u0002",
    "\u0002\u031f\u0321\t\b\u0002\u0002\u0320\u031f\u0003\u0002\u0002\u0002",
    "\u0320\u0321\u0003\u0002\u0002\u0002\u0321\u0322\u0003\u0002\u0002\u0002",
    "\u0322\u03f2\u0005\u0010\t\u0002\u0323\u0324\u0007\u00df\u0002\u0002",
    "\u0324\u0327\u0007\u00ec\u0002\u0002\u0325\u0326\t\u0004\u0002\u0002",
    "\u0326\u0328\u0005\u009cO\u0002\u0327\u0325\u0003\u0002\u0002\u0002",
    "\u0327\u0328\u0003\u0002\u0002\u0002\u0328\u032d\u0003\u0002\u0002\u0002",
    "\u0329\u032b\u0007\u0087\u0002\u0002\u032a\u0329\u0003\u0002\u0002\u0002",
    "\u032a\u032b\u0003\u0002\u0002\u0002\u032b\u032c\u0003\u0002\u0002\u0002",
    "\u032c\u032e\u0007\u0125\u0002\u0002\u032d\u032a\u0003\u0002\u0002\u0002",
    "\u032d\u032e\u0003\u0002\u0002\u0002\u032e\u03f2\u0003\u0002\u0002\u0002",
    "\u032f\u0330\u0007\u00df\u0002\u0002\u0330\u0331\u0007\u00eb\u0002\u0002",
    "\u0331\u0334\u0007W\u0002\u0002\u0332\u0333\t\u0004\u0002\u0002\u0333",
    "\u0335\u0005\u00e8u\u0002\u0334\u0332\u0003\u0002\u0002\u0002\u0334",
    "\u0335\u0003\u0002\u0002\u0002\u0335\u0336\u0003\u0002\u0002\u0002\u0336",
    "\u0337\u0007\u0087\u0002\u0002\u0337\u0339\u0007\u0125\u0002\u0002\u0338",
    "\u033a\u0005$\u0013\u0002\u0339\u0338\u0003\u0002\u0002\u0002\u0339",
    "\u033a\u0003\u0002\u0002\u0002\u033a\u03f2\u0003\u0002\u0002\u0002\u033b",
    "\u033c\u0007\u00df\u0002\u0002\u033c\u033d\u0007\u00ee\u0002\u0002\u033d",
    "\u0342\u0005\u009eP\u0002\u033e\u033f\u0007\u0003\u0002\u0002\u033f",
    "\u0340\u00058\u001d\u0002\u0340\u0341\u0007\u0004\u0002\u0002\u0341",
    "\u0343\u0003\u0002\u0002\u0002\u0342\u033e\u0003\u0002\u0002\u0002\u0342",
    "\u0343\u0003\u0002\u0002\u0002\u0343\u03f2\u0003\u0002\u0002\u0002\u0344",
    "\u0345\u0007\u00df\u0002\u0002\u0345\u0346\u0007-\u0002\u0002\u0346",
    "\u0347\t\u0004\u0002\u0002\u0347\u034a\u0005\u009eP\u0002\u0348\u0349",
    "\t\u0004\u0002\u0002\u0349\u034b\u0005\u00e8u\u0002\u034a\u0348\u0003",
    "\u0002\u0002\u0002\u034a\u034b\u0003\u0002\u0002\u0002\u034b\u03f2\u0003",
    "\u0002\u0002\u0002\u034c\u034d\u0007\u00df\u0002\u0002\u034d\u034e\u0007",
    "\u00b3\u0002\u0002\u034e\u0350\u0005\u009eP\u0002\u034f\u0351\u0005",
    "$\u0013\u0002\u0350\u034f\u0003\u0002\u0002\u0002\u0350\u0351\u0003",
    "\u0002\u0002\u0002\u0351\u03f2\u0003\u0002\u0002\u0002\u0352\u0354\u0007",
    "\u00df\u0002\u0002\u0353\u0355\u0005\u00ecw\u0002\u0354\u0353\u0003",
    "\u0002\u0002\u0002\u0354\u0355\u0003\u0002\u0002\u0002\u0355\u0356\u0003",
    "\u0002\u0002\u0002\u0356\u035e\u0007h\u0002\u0002\u0357\u0359\u0007",
    "\u0087\u0002\u0002\u0358\u0357\u0003\u0002\u0002\u0002\u0358\u0359\u0003",
    "\u0002\u0002\u0002\u0359\u035c\u0003\u0002\u0002\u0002\u035a\u035d\u0005",
    "\u00e6t\u0002\u035b\u035d\u0007\u0125\u0002\u0002\u035c\u035a\u0003",
    "\u0002\u0002\u0002\u035c\u035b\u0003\u0002\u0002\u0002\u035d\u035f\u0003",
    "\u0002\u0002\u0002\u035e\u0358\u0003\u0002\u0002\u0002\u035e\u035f\u0003",
    "\u0002\u0002\u0002\u035f\u03f2\u0003\u0002\u0002\u0002\u0360\u0361\u0007",
    "\u00df\u0002\u0002\u0361\u0362\u00076\u0002\u0002\u0362\u0363\u0007",
    "\u00eb\u0002\u0002\u0363\u03f2\u0005\u009eP\u0002\u0364\u0365\t\t\u0002",
    "\u0002\u0365\u0367\u0007g\u0002\u0002\u0366\u0368\u0007W\u0002\u0002",
    "\u0367\u0366\u0003\u0002\u0002\u0002\u0367\u0368\u0003\u0002\u0002\u0002",
    "\u0368\u0369\u0003\u0002\u0002\u0002\u0369\u03f2\u0005*\u0016\u0002",
    "\u036a\u036b\t\t\u0002\u0002\u036b\u036d\u0005(\u0015\u0002\u036c\u036e",
    "\u0007W\u0002\u0002\u036d\u036c\u0003\u0002\u0002\u0002\u036d\u036e",
    "\u0003\u0002\u0002\u0002\u036e\u036f\u0003\u0002\u0002\u0002\u036f\u0370",
    "\u0005\u00e8u\u0002\u0370\u03f2\u0003\u0002\u0002\u0002\u0371\u0373",
    "\t\t\u0002\u0002\u0372\u0374\u0007\u00eb\u0002\u0002\u0373\u0372\u0003",
    "\u0002\u0002\u0002\u0373\u0374\u0003\u0002\u0002\u0002\u0374\u0376\u0003",
    "\u0002\u0002\u0002\u0375\u0377\t\n\u0002\u0002\u0376\u0375\u0003\u0002",
    "\u0002\u0002\u0376\u0377\u0003\u0002\u0002\u0002\u0377\u0378\u0003\u0002",
    "\u0002\u0002\u0378\u037a\u0005\u009cO\u0002\u0379\u037b\u0005$\u0013",
    "\u0002\u037a\u0379\u0003\u0002\u0002\u0002\u037a\u037b\u0003\u0002\u0002",
    "\u0002\u037b\u037d\u0003\u0002\u0002\u0002\u037c\u037e\u0005,\u0017",
    "\u0002\u037d\u037c\u0003\u0002\u0002\u0002\u037d\u037e\u0003\u0002\u0002",
    "\u0002\u037e\u03f2\u0003\u0002\u0002\u0002\u037f\u0381\t\t\u0002\u0002",
    "\u0380\u0382\u0007\u00bc\u0002\u0002\u0381\u0380\u0003\u0002\u0002\u0002",
    "\u0381\u0382\u0003\u0002\u0002\u0002\u0382\u0383\u0003\u0002\u0002\u0002",
    "\u0383\u03f2\u0005\u001e\u0010\u0002\u0384\u0385\u0007\u00c3\u0002\u0002",
    "\u0385\u0386\u0007\u00eb\u0002\u0002\u0386\u03f2\u0005\u009eP\u0002",
    "\u0387\u038f\u0007\u00c3\u0002\u0002\u0388\u0390\u0007\u0125\u0002\u0002",
    "\u0389\u038b\u000b\u0002\u0002\u0002\u038a\u0389\u0003\u0002\u0002\u0002",
    "\u038b\u038e\u0003\u0002\u0002\u0002\u038c\u038d\u0003\u0002\u0002\u0002",
    "\u038c\u038a\u0003\u0002\u0002\u0002\u038d\u0390\u0003\u0002\u0002\u0002",
    "\u038e\u038c\u0003\u0002\u0002\u0002\u038f\u0388\u0003\u0002\u0002\u0002",
    "\u038f\u038c\u0003\u0002\u0002\u0002\u0390\u03f2\u0003\u0002\u0002\u0002",
    "\u0391\u0393\u0007 \u0002\u0002\u0392\u0394\u0007\u0084\u0002\u0002",
    "\u0393\u0392\u0003\u0002\u0002\u0002\u0393\u0394\u0003\u0002\u0002\u0002",
    "\u0394\u0395\u0003\u0002\u0002\u0002\u0395\u0396\u0007\u00eb\u0002\u0002",
    "\u0396\u0399\u0005\u009eP\u0002\u0397\u0398\u0007\u00a7\u0002\u0002",
    "\u0398\u039a\u00054\u001b\u0002\u0399\u0397\u0003\u0002\u0002\u0002",
    "\u0399\u039a\u0003\u0002\u0002\u0002\u039a\u039f\u0003\u0002\u0002\u0002",
    "\u039b\u039d\u0007\u0017\u0002\u0002\u039c\u039b\u0003\u0002\u0002\u0002",
    "\u039c\u039d\u0003\u0002\u0002\u0002\u039d\u039e\u0003\u0002\u0002\u0002",
    "\u039e\u03a0\u0005\u001e\u0010\u0002\u039f\u039c\u0003\u0002\u0002\u0002",
    "\u039f\u03a0\u0003\u0002\u0002\u0002\u03a0\u03f2\u0003\u0002\u0002\u0002",
    "\u03a1\u03a2\u0007\u00fe\u0002\u0002\u03a2\u03a5\u0007\u00eb\u0002\u0002",
    "\u03a3\u03a4\u0007p\u0002\u0002\u03a4\u03a6\u0007T\u0002\u0002\u03a5",
    "\u03a3\u0003\u0002\u0002\u0002\u03a5\u03a6\u0003\u0002\u0002\u0002\u03a6",
    "\u03a7\u0003\u0002\u0002\u0002\u03a7\u03f2\u0005\u009eP\u0002\u03a8",
    "\u03a9\u0007&\u0002\u0002\u03a9\u03f2\u0007 \u0002\u0002\u03aa\u03ab",
    "\u0007\u008b\u0002\u0002\u03ab\u03ad\u0007>\u0002\u0002\u03ac\u03ae",
    "\u0007\u008c\u0002\u0002\u03ad\u03ac\u0003\u0002\u0002\u0002\u03ad\u03ae",
    "\u0003\u0002\u0002\u0002\u03ae\u03af\u0003\u0002\u0002\u0002\u03af\u03b0",
    "\u0007w\u0002\u0002\u03b0\u03b2\u0007\u0125\u0002\u0002\u03b1\u03b3",
    "\u0007\u00b0\u0002\u0002\u03b2\u03b1\u0003\u0002\u0002\u0002\u03b2\u03b3",
    "\u0003\u0002\u0002\u0002\u03b3\u03b4\u0003\u0002\u0002\u0002\u03b4\u03b5",
    "\u0007|\u0002\u0002\u03b5\u03b6\u0007\u00eb\u0002\u0002\u03b6\u03b8",
    "\u0005\u009eP\u0002\u03b7\u03b9\u0005$\u0013\u0002\u03b8\u03b7\u0003",
    "\u0002\u0002\u0002\u03b8\u03b9\u0003\u0002\u0002\u0002\u03b9\u03f2\u0003",
    "\u0002\u0002\u0002\u03ba\u03bb\u0007\u00fa\u0002\u0002\u03bb\u03bc\u0007",
    "\u00eb\u0002\u0002\u03bc\u03be\u0005\u009eP\u0002\u03bd\u03bf\u0005",
    "$\u0013\u0002\u03be\u03bd\u0003\u0002\u0002\u0002\u03be\u03bf\u0003",
    "\u0002\u0002\u0002\u03bf\u03f2\u0003\u0002\u0002\u0002\u03c0\u03c1\u0007",
    "\u009b\u0002\u0002\u03c1\u03c2\u0007\u00c5\u0002\u0002\u03c2\u03c3\u0007",
    "\u00eb\u0002\u0002\u03c3\u03f2\u0005\u009eP\u0002\u03c4\u03c5\t\u000b",
    "\u0002\u0002\u03c5\u03c9\u0005\u00ecw\u0002\u03c6\u03c8\u000b\u0002",
    "\u0002\u0002\u03c7\u03c6\u0003\u0002\u0002\u0002\u03c8\u03cb\u0003\u0002",
    "\u0002\u0002\u03c9\u03ca\u0003\u0002\u0002\u0002\u03c9\u03c7\u0003\u0002",
    "\u0002\u0002\u03ca\u03f2\u0003\u0002\u0002\u0002\u03cb\u03c9\u0003\u0002",
    "\u0002\u0002\u03cc\u03cd\u0007\u00dc\u0002\u0002\u03cd\u03d1\u0007\u00cd",
    "\u0002\u0002\u03ce\u03d0\u000b\u0002\u0002\u0002\u03cf\u03ce\u0003\u0002",
    "\u0002\u0002\u03d0\u03d3\u0003\u0002\u0002\u0002\u03d1\u03d2\u0003\u0002",
    "\u0002\u0002\u03d1\u03cf\u0003\u0002\u0002\u0002\u03d2\u03f2\u0003\u0002",
    "\u0002\u0002\u03d3\u03d1\u0003\u0002\u0002\u0002\u03d4\u03d8\u0007\u00dc",
    "\u0002\u0002\u03d5\u03d7\u000b\u0002\u0002\u0002\u03d6\u03d5\u0003\u0002",
    "\u0002\u0002\u03d7\u03da\u0003\u0002\u0002\u0002\u03d8\u03d9\u0003\u0002",
    "\u0002\u0002\u03d8\u03d6\u0003\u0002\u0002\u0002\u03d9\u03f2\u0003\u0002",
    "\u0002\u0002\u03da\u03d8\u0003\u0002\u0002\u0002\u03db\u03f2\u0007\u00c7",
    "\u0002\u0002\u03dc\u03dd\u0007E\u0002\u0002\u03dd\u03de\u0007e\u0002",
    "\u0002\u03de\u03df\u0005\u009cO\u0002\u03df\u03e1\u0005\u0098M\u0002",
    "\u03e0\u03e2\u0005b2\u0002\u03e1\u03e0\u0003\u0002\u0002\u0002\u03e1",
    "\u03e2\u0003\u0002\u0002\u0002\u03e2\u03f2\u0003\u0002\u0002\u0002\u03e3",
    "\u03e4\u0007\u0104\u0002\u0002\u03e4\u03e5\u0005\u009cO\u0002\u03e5",
    "\u03e6\u0005\u0098M\u0002\u03e6\u03e8\u0005^0\u0002\u03e7\u03e9\u0005",
    "b2\u0002\u03e8\u03e7\u0003\u0002\u0002\u0002\u03e8\u03e9\u0003\u0002",
    "\u0002\u0002\u03e9\u03f2\u0003\u0002\u0002\u0002\u03ea\u03ee\u0005\u0012",
    "\n\u0002\u03eb\u03ed\u000b\u0002\u0002\u0002\u03ec\u03eb\u0003\u0002",
    "\u0002\u0002\u03ed\u03f0\u0003\u0002\u0002\u0002\u03ee\u03ef\u0003\u0002",
    "\u0002\u0002\u03ee\u03ec\u0003\u0002\u0002\u0002\u03ef\u03f2\u0003\u0002",
    "\u0002\u0002\u03f0\u03ee\u0003\u0002\u0002\u0002\u03f1\u010f\u0003\u0002",
    "\u0002\u0002\u03f1\u0111\u0003\u0002\u0002\u0002\u03f1\u0114\u0003\u0002",
    "\u0002\u0002\u03f1\u0119\u0003\u0002\u0002\u0002\u03f1\u012c\u0003\u0002",
    "\u0002\u0002\u03f1\u0133\u0003\u0002\u0002\u0002\u03f1\u0139\u0003\u0002",
    "\u0002\u0002\u03f1\u0143\u0003\u0002\u0002\u0002\u03f1\u014f\u0003\u0002",
    "\u0002\u0002\u03f1\u016d\u0003\u0002\u0002\u0002\u03f1\u0193\u0003\u0002",
    "\u0002\u0002\u03f1\u01a0\u0003\u0002\u0002\u0002\u03f1\u01be\u0003\u0002",
    "\u0002\u0002\u03f1\u01cf\u0003\u0002\u0002\u0002\u03f1\u01d6\u0003\u0002",
    "\u0002\u0002\u03f1\u01df\u0003\u0002\u0002\u0002\u03f1\u01e8\u0003\u0002",
    "\u0002\u0002\u03f1\u01f1\u0003\u0002\u0002\u0002\u03f1\u01f8\u0003\u0002",
    "\u0002\u0002\u03f1\u01ff\u0003\u0002\u0002\u0002\u03f1\u0206\u0003\u0002",
    "\u0002\u0002\u03f1\u0211\u0003\u0002\u0002\u0002\u03f1\u0224\u0003\u0002",
    "\u0002\u0002\u03f1\u0233\u0003\u0002\u0002\u0002\u03f1\u0241\u0003\u0002",
    "\u0002\u0002\u03f1\u024b\u0003\u0002\u0002\u0002\u03f1\u0259\u0003\u0002",
    "\u0002\u0002\u03f1\u0267\u0003\u0002\u0002\u0002\u03f1\u026f\u0003\u0002",
    "\u0002\u0002\u03f1\u0282\u0003\u0002\u0002\u0002\u03f1\u0292\u0003\u0002",
    "\u0002\u0002\u03f1\u0298\u0003\u0002\u0002\u0002\u03f1\u029f\u0003\u0002",
    "\u0002\u0002\u03f1\u02a5\u0003\u0002\u0002\u0002\u03f1\u02af\u0003\u0002",
    "\u0002\u0002\u03f1\u02b6\u0003\u0002\u0002\u0002\u03f1\u02da\u0003\u0002",
    "\u0002\u0002\u03f1\u02f0\u0003\u0002\u0002\u0002\u03f1\u02f8\u0003\u0002",
    "\u0002\u0002\u03f1\u0314\u0003\u0002\u0002\u0002\u03f1\u031e\u0003\u0002",
    "\u0002\u0002\u03f1\u0323\u0003\u0002\u0002\u0002\u03f1\u032f\u0003\u0002",
    "\u0002\u0002\u03f1\u033b\u0003\u0002\u0002\u0002\u03f1\u0344\u0003\u0002",
    "\u0002\u0002\u03f1\u034c\u0003\u0002\u0002\u0002\u03f1\u0352\u0003\u0002",
    "\u0002\u0002\u03f1\u0360\u0003\u0002\u0002\u0002\u03f1\u0364\u0003\u0002",
    "\u0002\u0002\u03f1\u036a\u0003\u0002\u0002\u0002\u03f1\u0371\u0003\u0002",
    "\u0002\u0002\u03f1\u037f\u0003\u0002\u0002\u0002\u03f1\u0384\u0003\u0002",
    "\u0002\u0002\u03f1\u0387\u0003\u0002\u0002\u0002\u03f1\u0391\u0003\u0002",
    "\u0002\u0002\u03f1\u03a1\u0003\u0002\u0002\u0002\u03f1\u03a8\u0003\u0002",
    "\u0002\u0002\u03f1\u03aa\u0003\u0002\u0002\u0002\u03f1\u03ba\u0003\u0002",
    "\u0002\u0002\u03f1\u03c0\u0003\u0002\u0002\u0002\u03f1\u03c4\u0003\u0002",
    "\u0002\u0002\u03f1\u03cc\u0003\u0002\u0002\u0002\u03f1\u03d4\u0003\u0002",
    "\u0002\u0002\u03f1\u03db\u0003\u0002\u0002\u0002\u03f1\u03dc\u0003\u0002",
    "\u0002\u0002\u03f1\u03e3\u0003\u0002\u0002\u0002\u03f1\u03ea\u0003\u0002",
    "\u0002\u0002\u03f2\u0011\u0003\u0002\u0002\u0002\u03f3\u03f4\u00076",
    "\u0002\u0002\u03f4\u049e\u0007\u00cd\u0002\u0002\u03f5\u03f6\u0007N",
    "\u0002\u0002\u03f6\u049e\u0007\u00cd\u0002\u0002\u03f7\u03f9\u0007j",
    "\u0002\u0002\u03f8\u03fa\u0007\u00cd\u0002\u0002\u03f9\u03f8\u0003\u0002",
    "\u0002\u0002\u03f9\u03fa\u0003\u0002\u0002\u0002\u03fa\u049e\u0003\u0002",
    "\u0002\u0002\u03fb\u03fd\u0007\u00ca\u0002\u0002\u03fc\u03fe\u0007\u00cd",
    "\u0002\u0002\u03fd\u03fc\u0003\u0002\u0002\u0002\u03fd\u03fe\u0003\u0002",
    "\u0002\u0002\u03fe\u049e\u0003\u0002\u0002\u0002\u03ff\u0400\u0007\u00df",
    "\u0002\u0002\u0400\u049e\u0007j\u0002\u0002\u0401\u0402\u0007\u00df",
    "\u0002\u0002\u0402\u0404\u0007\u00cd\u0002\u0002\u0403\u0405\u0007j",
    "\u0002\u0002\u0404\u0403\u0003\u0002\u0002\u0002\u0404\u0405\u0003\u0002",
    "\u0002\u0002\u0405\u049e\u0003\u0002\u0002\u0002\u0406\u0407\u0007\u00df",
    "\u0002\u0002\u0407\u049e\u0007\u00ba\u0002\u0002\u0408\u0409\u0007\u00df",
    "\u0002\u0002\u0409\u049e\u0007\u00ce\u0002\u0002\u040a\u040b\u0007\u00df",
    "\u0002\u0002\u040b\u040c\u00079\u0002\u0002\u040c\u049e\u0007\u00ce",
    "\u0002\u0002\u040d\u040e\u0007V\u0002\u0002\u040e\u049e\u0007\u00eb",
    "\u0002\u0002\u040f\u0410\u0007r\u0002\u0002\u0410\u049e\u0007\u00eb",
    "\u0002\u0002\u0411\u0412\u0007\u00df\u0002\u0002\u0412\u049e\u00071",
    "\u0002\u0002\u0413\u0414\u0007\u00df\u0002\u0002\u0414\u0415\u00076",
    "\u0002\u0002\u0415\u049e\u0007\u00eb\u0002\u0002\u0416\u0417\u0007\u00df",
    "\u0002\u0002\u0417\u049e\u0007\u00f6\u0002\u0002\u0418\u0419\u0007\u00df",
    "\u0002\u0002\u0419\u049e\u0007u\u0002\u0002\u041a\u041b\u0007\u00df",
    "\u0002\u0002\u041b\u049e\u0007\u008f\u0002\u0002\u041c\u041d\u00076",
    "\u0002\u0002\u041d\u049e\u0007t\u0002\u0002\u041e\u041f\u0007N\u0002",
    "\u0002\u041f\u049e\u0007t\u0002\u0002\u0420\u0421\u0007\u0010\u0002",
    "\u0002\u0421\u049e\u0007t\u0002\u0002\u0422\u0423\u0007\u008e\u0002",
    "\u0002\u0423\u049e\u0007\u00eb\u0002\u0002\u0424\u0425\u0007\u008e\u0002",
    "\u0002\u0425\u049e\u0007?\u0002\u0002\u0426\u0427\u0007\u0102\u0002",
    "\u0002\u0427\u049e\u0007\u00eb\u0002\u0002\u0428\u0429\u0007\u0102\u0002",
    "\u0002\u0429\u049e\u0007?\u0002\u0002\u042a\u042b\u00076\u0002\u0002",
    "\u042b\u042c\u0007\u00ef\u0002\u0002\u042c\u049e\u0007\u0091\u0002\u0002",
    "\u042d\u042e\u0007N\u0002\u0002\u042e\u042f\u0007\u00ef\u0002\u0002",
    "\u042f\u049e\u0007\u0091\u0002\u0002\u0430\u0431\u0007\u0010\u0002\u0002",
    "\u0431\u0432\u0007\u00eb\u0002\u0002\u0432\u0433\u0005\u009eP\u0002",
    "\u0433\u0434\u0007\u00a0\u0002\u0002\u0434\u0435\u0007(\u0002\u0002",
    "\u0435\u049e\u0003\u0002\u0002\u0002\u0436\u0437\u0007\u0010\u0002\u0002",
    "\u0437\u0438\u0007\u00eb\u0002\u0002\u0438\u0439\u0005\u009eP\u0002",
    "\u0439\u043a\u0007(\u0002\u0002\u043a\u043b\u0007\u001f\u0002\u0002",
    "\u043b\u049e\u0003\u0002\u0002\u0002\u043c\u043d\u0007\u0010\u0002\u0002",
    "\u043d\u043e\u0007\u00eb\u0002\u0002\u043e\u043f\u0005\u009eP\u0002",
    "\u043f\u0440\u0007\u00a0\u0002\u0002\u0440\u0441\u0007\u00e3\u0002\u0002",
    "\u0441\u049e\u0003\u0002\u0002\u0002\u0442\u0443\u0007\u0010\u0002\u0002",
    "\u0443\u0444\u0007\u00eb\u0002\u0002\u0444\u0445\u0005\u009eP\u0002",
    "\u0445\u0446\u0007\u00e0\u0002\u0002\u0446\u0447\u0007\u001f\u0002\u0002",
    "\u0447\u049e\u0003\u0002\u0002\u0002\u0448\u0449\u0007\u0010\u0002\u0002",
    "\u0449\u044a\u0007\u00eb\u0002\u0002\u044a\u044b\u0005\u009eP\u0002",
    "\u044b\u044c\u0007\u00a0\u0002\u0002\u044c\u044d\u0007\u00e0\u0002\u0002",
    "\u044d\u049e\u0003\u0002\u0002\u0002\u044e\u044f\u0007\u0010\u0002\u0002",
    "\u044f\u0450\u0007\u00eb\u0002\u0002\u0450\u0451\u0005\u009eP\u0002",
    "\u0451\u0452\u0007\u00a0\u0002\u0002\u0452\u0453\u0007\u00e6\u0002\u0002",
    "\u0453\u0454\u0007\u0017\u0002\u0002\u0454\u0455\u0007J\u0002\u0002",
    "\u0455\u049e\u0003\u0002\u0002\u0002\u0456\u0457\u0007\u0010\u0002\u0002",
    "\u0457\u0458\u0007\u00eb\u0002\u0002\u0458\u0459\u0005\u009eP\u0002",
    "\u0459\u045a\u0007\u00dc\u0002\u0002\u045a\u045b\u0007\u00e0\u0002\u0002",
    "\u045b\u045c\u0007\u008d\u0002\u0002\u045c\u049e\u0003\u0002\u0002\u0002",
    "\u045d\u045e\u0007\u0010\u0002\u0002\u045e\u045f\u0007\u00eb\u0002\u0002",
    "\u045f\u0460\u0005\u009eP\u0002\u0460\u0461\u0007S\u0002\u0002\u0461",
    "\u0462\u0007\u00b1\u0002\u0002\u0462\u049e\u0003\u0002\u0002\u0002\u0463",
    "\u0464\u0007\u0010\u0002\u0002\u0464\u0465\u0007\u00eb\u0002\u0002\u0465",
    "\u0466\u0005\u009eP\u0002\u0466\u0467\u0007\u0015\u0002\u0002\u0467",
    "\u0468\u0007\u00b1\u0002\u0002\u0468\u049e\u0003\u0002\u0002\u0002\u0469",
    "\u046a\u0007\u0010\u0002\u0002\u046a\u046b\u0007\u00eb\u0002\u0002\u046b",
    "\u046c\u0005\u009eP\u0002\u046c\u046d\u0007\u00fc\u0002\u0002\u046d",
    "\u046e\u0007\u00b1\u0002\u0002\u046e\u049e\u0003\u0002\u0002\u0002\u046f",
    "\u0470\u0007\u0010\u0002\u0002\u0470\u0471\u0007\u00eb\u0002\u0002\u0471",
    "\u0472\u0005\u009eP\u0002\u0472\u0473\u0007\u00f3\u0002\u0002\u0473",
    "\u049e\u0003\u0002\u0002\u0002\u0474\u0475\u0007\u0010\u0002\u0002\u0475",
    "\u0476\u0007\u00eb\u0002\u0002\u0476\u0478\u0005\u009eP\u0002\u0477",
    "\u0479\u0005$\u0013\u0002\u0478\u0477\u0003\u0002\u0002\u0002\u0478",
    "\u0479\u0003\u0002\u0002\u0002\u0479\u047a\u0003\u0002\u0002\u0002\u047a",
    "\u047b\u00070\u0002\u0002\u047b\u049e\u0003\u0002\u0002\u0002\u047c",
    "\u047d\u0007\u0010\u0002\u0002\u047d\u047e\u0007\u00eb\u0002\u0002\u047e",
    "\u0480\u0005\u009eP\u0002\u047f\u0481\u0005$\u0013\u0002\u0480\u047f",
    "\u0003\u0002\u0002\u0002\u0480\u0481\u0003\u0002\u0002\u0002\u0481\u0482",
    "\u0003\u0002\u0002\u0002\u0482\u0483\u00073\u0002\u0002\u0483\u049e",
    "\u0003\u0002\u0002\u0002\u0484\u0485\u0007\u0010\u0002\u0002\u0485\u0486",
    "\u0007\u00eb\u0002\u0002\u0486\u0488\u0005\u009eP\u0002\u0487\u0489",
    "\u0005$\u0013\u0002\u0488\u0487\u0003\u0002\u0002\u0002\u0488\u0489",
    "\u0003\u0002\u0002\u0002\u0489\u048a\u0003\u0002\u0002\u0002\u048a\u048b",
    "\u0007\u00dc\u0002\u0002\u048b\u048c\u0007]\u0002\u0002\u048c\u049e",
    "\u0003\u0002\u0002\u0002\u048d\u048e\u0007\u0010\u0002\u0002\u048e\u048f",
    "\u0007\u00eb\u0002\u0002\u048f\u0491\u0005\u009eP\u0002\u0490\u0492",
    "\u0005$\u0013\u0002\u0491\u0490\u0003\u0002\u0002\u0002\u0491\u0492",
    "\u0003\u0002\u0002\u0002\u0492\u0493\u0003\u0002\u0002\u0002\u0493\u0494",
    "\u0007\u00c6\u0002\u0002\u0494\u0495\u0007-\u0002\u0002\u0495\u049e",
    "\u0003\u0002\u0002\u0002\u0496\u0497\u0007\u00e4\u0002\u0002\u0497\u049e",
    "\u0007\u00f5\u0002\u0002\u0498\u049e\u0007/\u0002\u0002\u0499\u049e",
    "\u0007\u00cf\u0002\u0002\u049a\u049e\u0007I\u0002\u0002\u049b\u049c",
    "\u0007E\u0002\u0002\u049c\u049e\u0007e\u0002\u0002\u049d\u03f3\u0003",
    "\u0002\u0002\u0002\u049d\u03f5\u0003\u0002\u0002\u0002\u049d\u03f7\u0003",
    "\u0002\u0002\u0002\u049d\u03fb\u0003\u0002\u0002\u0002\u049d\u03ff\u0003",
    "\u0002\u0002\u0002\u049d\u0401\u0003\u0002\u0002\u0002\u049d\u0406\u0003",
    "\u0002\u0002\u0002\u049d\u0408\u0003\u0002\u0002\u0002\u049d\u040a\u0003",
    "\u0002\u0002\u0002\u049d\u040d\u0003\u0002\u0002\u0002\u049d\u040f\u0003",
    "\u0002\u0002\u0002\u049d\u0411\u0003\u0002\u0002\u0002\u049d\u0413\u0003",
    "\u0002\u0002\u0002\u049d\u0416\u0003\u0002\u0002\u0002\u049d\u0418\u0003",
    "\u0002\u0002\u0002\u049d\u041a\u0003\u0002\u0002\u0002\u049d\u041c\u0003",
    "\u0002\u0002\u0002\u049d\u041e\u0003\u0002\u0002\u0002\u049d\u0420\u0003",
    "\u0002\u0002\u0002\u049d\u0422\u0003\u0002\u0002\u0002\u049d\u0424\u0003",
    "\u0002\u0002\u0002\u049d\u0426\u0003\u0002\u0002\u0002\u049d\u0428\u0003",
    "\u0002\u0002\u0002\u049d\u042a\u0003\u0002\u0002\u0002\u049d\u042d\u0003",
    "\u0002\u0002\u0002\u049d\u0430\u0003\u0002\u0002\u0002\u049d\u0436\u0003",
    "\u0002\u0002\u0002\u049d\u043c\u0003\u0002\u0002\u0002\u049d\u0442\u0003",
    "\u0002\u0002\u0002\u049d\u0448\u0003\u0002\u0002\u0002\u049d\u044e\u0003",
    "\u0002\u0002\u0002\u049d\u0456\u0003\u0002\u0002\u0002\u049d\u045d\u0003",
    "\u0002\u0002\u0002\u049d\u0463\u0003\u0002\u0002\u0002\u049d\u0469\u0003",
    "\u0002\u0002\u0002\u049d\u046f\u0003\u0002\u0002\u0002\u049d\u0474\u0003",
    "\u0002\u0002\u0002\u049d\u047c\u0003\u0002\u0002\u0002\u049d\u0484\u0003",
    "\u0002\u0002\u0002\u049d\u048d\u0003\u0002\u0002\u0002\u049d\u0496\u0003",
    "\u0002\u0002\u0002\u049d\u0498\u0003\u0002\u0002\u0002\u049d\u0499\u0003",
    "\u0002\u0002\u0002\u049d\u049a\u0003\u0002\u0002\u0002\u049d\u049b\u0003",
    "\u0002\u0002\u0002\u049e\u0013\u0003\u0002\u0002\u0002\u049f\u04a1\u0007",
    "6\u0002\u0002\u04a0\u04a2\u0007\u00ef\u0002\u0002\u04a1\u04a0\u0003",
    "\u0002\u0002\u0002\u04a1\u04a2\u0003\u0002\u0002\u0002\u04a2\u04a4\u0003",
    "\u0002\u0002\u0002\u04a3\u04a5\u0007X\u0002\u0002\u04a4\u04a3\u0003",
    "\u0002\u0002\u0002\u04a4\u04a5\u0003\u0002\u0002\u0002\u04a5\u04a6\u0003",
    "\u0002\u0002\u0002\u04a6\u04aa\u0007\u00eb\u0002\u0002\u04a7\u04a8\u0007",
    "p\u0002\u0002\u04a8\u04a9\u0007\u00a0\u0002\u0002\u04a9\u04ab\u0007",
    "T\u0002\u0002\u04aa\u04a7\u0003\u0002\u0002\u0002\u04aa\u04ab\u0003",
    "\u0002\u0002\u0002\u04ab\u04ac\u0003\u0002\u0002\u0002\u04ac\u04ad\u0005",
    "\u009cO\u0002\u04ad\u0015\u0003\u0002\u0002\u0002\u04ae\u04af\u0007",
    "6\u0002\u0002\u04af\u04b1\u0007\u00a8\u0002\u0002\u04b0\u04ae\u0003",
    "\u0002\u0002\u0002\u04b0\u04b1\u0003\u0002\u0002\u0002\u04b1\u04b2\u0003",
    "\u0002\u0002\u0002\u04b2\u04b3\u0007\u00c6\u0002\u0002\u04b3\u04b4\u0007",
    "\u00eb\u0002\u0002\u04b4\u04b5\u0005\u009cO\u0002\u04b5\u0017\u0003",
    "\u0002\u0002\u0002\u04b6\u04b7\u0007(\u0002\u0002\u04b7\u04b8\u0007",
    "\u001f\u0002\u0002\u04b8\u04bc\u0005\u0086D\u0002\u04b9\u04ba\u0007",
    "\u00e3\u0002\u0002\u04ba\u04bb\u0007\u001f\u0002\u0002\u04bb\u04bd\u0005",
    "\u008aF\u0002\u04bc\u04b9\u0003\u0002\u0002\u0002\u04bc\u04bd\u0003",
    "\u0002\u0002\u0002\u04bd\u04be\u0003\u0002\u0002\u0002\u04be\u04bf\u0007",
    "|\u0002\u0002\u04bf\u04c0\u0007\u0129\u0002\u0002\u04c0\u04c1\u0007",
    "\u001e\u0002\u0002\u04c1\u0019\u0003\u0002\u0002\u0002\u04c2\u04c3\u0007",
    "\u00e0\u0002\u0002\u04c3\u04c4\u0007\u001f\u0002\u0002\u04c4\u04c5\u0005",
    "\u0086D\u0002\u04c5\u04c8\u0007\u00a4\u0002\u0002\u04c6\u04c9\u0005",
    "<\u001f\u0002\u04c7\u04c9\u0005> \u0002\u04c8\u04c6\u0003\u0002\u0002",
    "\u0002\u04c8\u04c7\u0003\u0002\u0002\u0002\u04c9\u04cd\u0003\u0002\u0002",
    "\u0002\u04ca\u04cb\u0007\u00e6\u0002\u0002\u04cb\u04cc\u0007\u0017\u0002",
    "\u0002\u04cc\u04ce\u0007J\u0002\u0002\u04cd\u04ca\u0003\u0002\u0002",
    "\u0002\u04cd\u04ce\u0003\u0002\u0002\u0002\u04ce\u001b\u0003\u0002\u0002",
    "\u0002\u04cf\u04d0\u0007\u008d\u0002\u0002\u04d0\u04d1\u0007\u0125\u0002",
    "\u0002\u04d1\u001d\u0003\u0002\u0002\u0002\u04d2\u04d4\u0005.\u0018",
    "\u0002\u04d3\u04d2\u0003\u0002\u0002\u0002\u04d3\u04d4\u0003\u0002\u0002",
    "\u0002\u04d4\u04d5\u0003\u0002\u0002\u0002\u04d5\u04d6\u0005N(\u0002",
    "\u04d6\u04d7\u0005J&\u0002\u04d7\u001f\u0003\u0002\u0002\u0002\u04d8",
    "\u04d9\u0007y\u0002\u0002\u04d9\u04db\u0007\u00b0\u0002\u0002\u04da",
    "\u04dc\u0007\u00eb\u0002\u0002\u04db\u04da\u0003\u0002\u0002\u0002\u04db",
    "\u04dc\u0003\u0002\u0002\u0002\u04dc\u04dd\u0003\u0002\u0002\u0002\u04dd",
    "\u04e4\u0005\u009cO\u0002\u04de\u04e2\u0005$\u0013\u0002\u04df\u04e0",
    "\u0007p\u0002\u0002\u04e0\u04e1\u0007\u00a0\u0002\u0002\u04e1\u04e3",
    "\u0007T\u0002\u0002\u04e2\u04df\u0003\u0002\u0002\u0002\u04e2\u04e3",
    "\u0003\u0002\u0002\u0002\u04e3\u04e5\u0003\u0002\u0002\u0002\u04e4\u04de",
    "\u0003\u0002\u0002\u0002\u04e4\u04e5\u0003\u0002\u0002\u0002\u04e5\u0510",
    "\u0003\u0002\u0002\u0002\u04e6\u04e7\u0007y\u0002\u0002\u04e7\u04e9",
    "\u0007|\u0002\u0002\u04e8\u04ea\u0007\u00eb\u0002\u0002\u04e9\u04e8",
    "\u0003\u0002\u0002\u0002\u04e9\u04ea\u0003\u0002\u0002\u0002\u04ea\u04eb",
    "\u0003\u0002\u0002\u0002\u04eb\u04ed\u0005\u009cO\u0002\u04ec\u04ee",
    "\u0005$\u0013\u0002\u04ed\u04ec\u0003\u0002\u0002\u0002\u04ed\u04ee",
    "\u0003\u0002\u0002\u0002\u04ee\u04f2\u0003\u0002\u0002\u0002\u04ef\u04f0",
    "\u0007p\u0002\u0002\u04f0\u04f1\u0007\u00a0\u0002\u0002\u04f1\u04f3",
    "\u0007T\u0002\u0002\u04f2\u04ef\u0003\u0002\u0002\u0002\u04f2\u04f3",
    "\u0003\u0002\u0002\u0002\u04f3\u0510\u0003\u0002\u0002\u0002\u04f4\u04f5",
    "\u0007y\u0002\u0002\u04f5\u04f7\u0007\u00b0\u0002\u0002\u04f6\u04f8",
    "\u0007\u008c\u0002\u0002\u04f7\u04f6\u0003\u0002\u0002\u0002\u04f7\u04f8",
    "\u0003\u0002\u0002\u0002\u04f8\u04f9\u0003\u0002\u0002\u0002\u04f9\u04fa",
    "\u0007K\u0002\u0002\u04fa\u04fc\u0007\u0125\u0002\u0002\u04fb\u04fd",
    "\u0005\u009aN\u0002\u04fc\u04fb\u0003\u0002\u0002\u0002\u04fc\u04fd",
    "\u0003\u0002\u0002\u0002\u04fd\u04ff\u0003\u0002\u0002\u0002\u04fe\u0500",
    "\u0005@!\u0002\u04ff\u04fe\u0003\u0002\u0002\u0002\u04ff\u0500\u0003",
    "\u0002\u0002\u0002\u0500\u0510\u0003\u0002\u0002\u0002\u0501\u0502\u0007",
    "y\u0002\u0002\u0502\u0504\u0007\u00b0\u0002\u0002\u0503\u0505\u0007",
    "\u008c\u0002\u0002\u0504\u0503\u0003\u0002\u0002\u0002\u0504\u0505\u0003",
    "\u0002\u0002\u0002\u0505\u0506\u0003\u0002\u0002\u0002\u0506\u0508\u0007",
    "K\u0002\u0002\u0507\u0509\u0007\u0125\u0002\u0002\u0508\u0507\u0003",
    "\u0002\u0002\u0002\u0508\u0509\u0003\u0002\u0002\u0002\u0509\u050a\u0003",
    "\u0002\u0002\u0002\u050a\u050d\u00052\u001a\u0002\u050b\u050c\u0007",
    "\u00a7\u0002\u0002\u050c\u050e\u00054\u001b\u0002\u050d\u050b\u0003",
    "\u0002\u0002\u0002\u050d\u050e\u0003\u0002\u0002\u0002\u050e\u0510\u0003",
    "\u0002\u0002\u0002\u050f\u04d8\u0003\u0002\u0002\u0002\u050f\u04e6\u0003",
    "\u0002\u0002\u0002\u050f\u04f4\u0003\u0002\u0002\u0002\u050f\u0501\u0003",
    "\u0002\u0002\u0002\u0510!\u0003\u0002\u0002\u0002\u0511\u0513\u0005",
    "$\u0013\u0002\u0512\u0514\u0005\u001c\u000f\u0002\u0513\u0512\u0003",
    "\u0002\u0002\u0002\u0513\u0514\u0003\u0002\u0002\u0002\u0514#\u0003",
    "\u0002\u0002\u0002\u0515\u0516\u0007\u00b1\u0002\u0002\u0516\u0517\u0007",
    "\u0003\u0002\u0002\u0517\u051c\u0005&\u0014\u0002\u0518\u0519\u0007",
    "\u0005\u0002\u0002\u0519\u051b\u0005&\u0014\u0002\u051a\u0518\u0003",
    "\u0002\u0002\u0002\u051b\u051e\u0003\u0002\u0002\u0002\u051c\u051a\u0003",
    "\u0002\u0002\u0002\u051c\u051d\u0003\u0002\u0002\u0002\u051d\u051f\u0003",
    "\u0002\u0002\u0002\u051e\u051c\u0003\u0002\u0002\u0002\u051f\u0520\u0007",
    "\u0004\u0002\u0002\u0520%\u0003\u0002\u0002\u0002\u0521\u0524\u0005",
    "\u00ecw\u0002\u0522\u0523\u0007\u0112\u0002\u0002\u0523\u0525\u0005",
    "\u00b6\\\u0002\u0524\u0522\u0003\u0002\u0002\u0002\u0524\u0525\u0003",
    "\u0002\u0002\u0002\u0525\'\u0003\u0002\u0002\u0002\u0526\u0527\t\f\u0002",
    "\u0002\u0527)\u0003\u0002\u0002\u0002\u0528\u052e\u0005\u00e6t\u0002",
    "\u0529\u052e\u0007\u0125\u0002\u0002\u052a\u052e\u0005\u00b8]\u0002",
    "\u052b\u052e\u0005\u00ba^\u0002\u052c\u052e\u0005\u00bc_\u0002\u052d",
    "\u0528\u0003\u0002\u0002\u0002\u052d\u0529\u0003\u0002\u0002\u0002\u052d",
    "\u052a\u0003\u0002\u0002\u0002\u052d\u052b\u0003\u0002\u0002\u0002\u052d",
    "\u052c\u0003\u0002\u0002\u0002\u052e+\u0003\u0002\u0002\u0002\u052f",
    "\u0534\u0005\u00ecw\u0002\u0530\u0531\u0007\u0006\u0002\u0002\u0531",
    "\u0533\u0005\u00ecw\u0002\u0532\u0530\u0003\u0002\u0002\u0002\u0533",
    "\u0536\u0003\u0002\u0002\u0002\u0534\u0532\u0003\u0002\u0002\u0002\u0534",
    "\u0535\u0003\u0002\u0002\u0002\u0535-\u0003\u0002\u0002\u0002\u0536",
    "\u0534\u0003\u0002\u0002\u0002\u0537\u0538\u0007\u010f\u0002\u0002\u0538",
    "\u053d\u00050\u0019\u0002\u0539\u053a\u0007\u0005\u0002\u0002\u053a",
    "\u053c\u00050\u0019\u0002\u053b\u0539\u0003\u0002\u0002\u0002\u053c",
    "\u053f\u0003\u0002\u0002\u0002\u053d\u053b\u0003\u0002\u0002\u0002\u053d",
    "\u053e\u0003\u0002\u0002\u0002\u053e/\u0003\u0002\u0002\u0002\u053f",
    "\u053d\u0003\u0002\u0002\u0002\u0540\u0542\u0005\u00e8u\u0002\u0541",
    "\u0543\u0005\u0086D\u0002\u0542\u0541\u0003\u0002\u0002\u0002\u0542",
    "\u0543\u0003\u0002\u0002\u0002\u0543\u0545\u0003\u0002\u0002\u0002\u0544",
    "\u0546\u0007\u0017\u0002\u0002\u0545\u0544\u0003\u0002\u0002\u0002\u0545",
    "\u0546\u0003\u0002\u0002\u0002\u0546\u0547\u0003\u0002\u0002\u0002\u0547",
    "\u0548\u0007\u0003\u0002\u0002\u0548\u0549\u0005\u001e\u0010\u0002\u0549",
    "\u054a\u0007\u0004\u0002\u0002\u054a1\u0003\u0002\u0002\u0002\u054b",
    "\u054c\u0007\u0107\u0002\u0002\u054c\u054d\u0005\u00e6t\u0002\u054d",
    "3\u0003\u0002\u0002\u0002\u054e\u054f\u0007\u0003\u0002\u0002\u054f",
    "\u0554\u00056\u001c\u0002\u0550\u0551\u0007\u0005\u0002\u0002\u0551",
    "\u0553\u00056\u001c\u0002\u0552\u0550\u0003\u0002\u0002\u0002\u0553",
    "\u0556\u0003\u0002\u0002\u0002\u0554\u0552\u0003\u0002\u0002\u0002\u0554",
    "\u0555\u0003\u0002\u0002\u0002\u0555\u0557\u0003\u0002\u0002\u0002\u0556",
    "\u0554\u0003\u0002\u0002\u0002\u0557\u0558\u0007\u0004\u0002\u0002\u0558",
    "5\u0003\u0002\u0002\u0002\u0559\u055e\u00058\u001d\u0002\u055a\u055c",
    "\u0007\u0112\u0002\u0002\u055b\u055a\u0003\u0002\u0002\u0002\u055b\u055c",
    "\u0003\u0002\u0002\u0002\u055c\u055d\u0003\u0002\u0002\u0002\u055d\u055f",
    "\u0005:\u001e\u0002\u055e\u055b\u0003\u0002\u0002\u0002\u055e\u055f",
    "\u0003\u0002\u0002\u0002\u055f7\u0003\u0002\u0002\u0002\u0560\u0565",
    "\u0005\u00ecw\u0002\u0561\u0562\u0007\u0006\u0002\u0002\u0562\u0564",
    "\u0005\u00ecw\u0002\u0563\u0561\u0003\u0002\u0002\u0002\u0564\u0567",
    "\u0003\u0002\u0002\u0002\u0565\u0563\u0003\u0002\u0002\u0002\u0565\u0566",
    "\u0003\u0002\u0002\u0002\u0566\u056a\u0003\u0002\u0002\u0002\u0567\u0565",
    "\u0003\u0002\u0002\u0002\u0568\u056a\u0007\u0125\u0002\u0002\u0569\u0560",
    "\u0003\u0002\u0002\u0002\u0569\u0568\u0003\u0002\u0002\u0002\u056a9",
    "\u0003\u0002\u0002\u0002\u056b\u0570\u0007\u0129\u0002\u0002\u056c\u0570",
    "\u0007\u012a\u0002\u0002\u056d\u0570\u0005\u00be`\u0002\u056e\u0570",
    "\u0007\u0125\u0002\u0002\u056f\u056b\u0003\u0002\u0002\u0002\u056f\u056c",
    "\u0003\u0002\u0002\u0002\u056f\u056d\u0003\u0002\u0002\u0002\u056f\u056e",
    "\u0003\u0002\u0002\u0002\u0570;\u0003\u0002\u0002\u0002\u0571\u0572",
    "\u0007\u0003\u0002\u0002\u0572\u0577\u0005\u00b6\\\u0002\u0573\u0574",
    "\u0007\u0005\u0002\u0002\u0574\u0576\u0005\u00b6\\\u0002\u0575\u0573",
    "\u0003\u0002\u0002\u0002\u0576\u0579\u0003\u0002\u0002\u0002\u0577\u0575",
    "\u0003\u0002\u0002\u0002\u0577\u0578\u0003\u0002\u0002\u0002\u0578\u057a",
    "\u0003\u0002\u0002\u0002\u0579\u0577\u0003\u0002\u0002\u0002\u057a\u057b",
    "\u0007\u0004\u0002\u0002\u057b=\u0003\u0002\u0002\u0002\u057c\u057d",
    "\u0007\u0003\u0002\u0002\u057d\u0582\u0005<\u001f\u0002\u057e\u057f",
    "\u0007\u0005\u0002\u0002\u057f\u0581\u0005<\u001f\u0002\u0580\u057e",
    "\u0003\u0002\u0002\u0002\u0581\u0584\u0003\u0002\u0002\u0002\u0582\u0580",
    "\u0003\u0002\u0002\u0002\u0582\u0583\u0003\u0002\u0002\u0002\u0583\u0585",
    "\u0003\u0002\u0002\u0002\u0584\u0582\u0003\u0002\u0002\u0002\u0585\u0586",
    "\u0007\u0004\u0002\u0002\u0586?\u0003\u0002\u0002\u0002\u0587\u0588",
    "\u0007\u00e6\u0002\u0002\u0588\u0589\u0007\u0017\u0002\u0002\u0589\u058e",
    "\u0005B\"\u0002\u058a\u058b\u0007\u00e6\u0002\u0002\u058b\u058c\u0007",
    "\u001f\u0002\u0002\u058c\u058e\u0005D#\u0002\u058d\u0587\u0003\u0002",
    "\u0002\u0002\u058d\u058a\u0003\u0002\u0002\u0002\u058eA\u0003\u0002",
    "\u0002\u0002\u058f\u0590\u0007x\u0002\u0002\u0590\u0591\u0007\u0125",
    "\u0002\u0002\u0591\u0592\u0007\u00ac\u0002\u0002\u0592\u0595\u0007\u0125",
    "\u0002\u0002\u0593\u0595\u0005\u00ecw\u0002\u0594\u058f\u0003\u0002",
    "\u0002\u0002\u0594\u0593\u0003\u0002\u0002\u0002\u0595C\u0003\u0002",
    "\u0002\u0002\u0596\u059a\u0007\u0125\u0002\u0002\u0597\u0598\u0007\u010f",
    "\u0002\u0002\u0598\u0599\u0007\u00da\u0002\u0002\u0599\u059b\u00054",
    "\u001b\u0002\u059a\u0597\u0003\u0002\u0002\u0002\u059a\u059b\u0003\u0002",
    "\u0002\u0002\u059bE\u0003\u0002\u0002\u0002\u059c\u059d\u0005\u00ec",
    "w\u0002\u059d\u059e\u0007\u0125\u0002\u0002\u059eG\u0003\u0002\u0002",
    "\u0002\u059f\u05a0\u0005 \u0011\u0002\u05a0\u05a1\u0005N(\u0002\u05a1",
    "\u05a2\u0005J&\u0002\u05a2\u05aa\u0003\u0002\u0002\u0002\u05a3\u05a5",
    "\u0005j6\u0002\u05a4\u05a6\u0005L\'\u0002\u05a5\u05a4\u0003\u0002\u0002",
    "\u0002\u05a6\u05a7\u0003\u0002\u0002\u0002\u05a7\u05a5\u0003\u0002\u0002",
    "\u0002\u05a7\u05a8\u0003\u0002\u0002\u0002\u05a8\u05aa\u0003\u0002\u0002",
    "\u0002\u05a9\u059f\u0003\u0002\u0002\u0002\u05a9\u05a3\u0003\u0002\u0002",
    "\u0002\u05aaI\u0003\u0002\u0002\u0002\u05ab\u05ac\u0007\u00a9\u0002",
    "\u0002\u05ac\u05ad\u0007\u001f\u0002\u0002\u05ad\u05b2\u0005R*\u0002",
    "\u05ae\u05af\u0007\u0005\u0002\u0002\u05af\u05b1\u0005R*\u0002\u05b0",
    "\u05ae\u0003\u0002\u0002\u0002\u05b1\u05b4\u0003\u0002\u0002\u0002\u05b2",
    "\u05b0\u0003\u0002\u0002\u0002\u05b2\u05b3\u0003\u0002\u0002\u0002\u05b3",
    "\u05b6\u0003\u0002\u0002\u0002\u05b4\u05b2\u0003\u0002\u0002\u0002\u05b5",
    "\u05ab\u0003\u0002\u0002\u0002\u05b5\u05b6\u0003\u0002\u0002\u0002\u05b6",
    "\u05c1\u0003\u0002\u0002\u0002\u05b7\u05b8\u0007\'\u0002\u0002\u05b8",
    "\u05b9\u0007\u001f\u0002\u0002\u05b9\u05be\u0005\u00acW\u0002\u05ba",
    "\u05bb\u0007\u0005\u0002\u0002\u05bb\u05bd\u0005\u00acW\u0002\u05bc",
    "\u05ba\u0003\u0002\u0002\u0002\u05bd\u05c0\u0003\u0002\u0002\u0002\u05be",
    "\u05bc\u0003\u0002\u0002\u0002\u05be\u05bf\u0003\u0002\u0002\u0002\u05bf",
    "\u05c2\u0003\u0002\u0002\u0002\u05c0\u05be\u0003\u0002\u0002\u0002\u05c1",
    "\u05b7\u0003\u0002\u0002\u0002\u05c1\u05c2\u0003\u0002\u0002\u0002\u05c2",
    "\u05cd\u0003\u0002\u0002\u0002\u05c3\u05c4\u0007M\u0002\u0002\u05c4",
    "\u05c5\u0007\u001f\u0002\u0002\u05c5\u05ca\u0005\u00acW\u0002\u05c6",
    "\u05c7\u0007\u0005\u0002\u0002\u05c7\u05c9\u0005\u00acW\u0002\u05c8",
    "\u05c6\u0003\u0002\u0002\u0002\u05c9\u05cc\u0003\u0002\u0002\u0002\u05ca",
    "\u05c8\u0003\u0002\u0002\u0002\u05ca\u05cb\u0003\u0002\u0002\u0002\u05cb",
    "\u05ce\u0003\u0002\u0002\u0002\u05cc\u05ca\u0003\u0002\u0002\u0002\u05cd",
    "\u05c3\u0003\u0002\u0002\u0002\u05cd\u05ce\u0003\u0002\u0002\u0002\u05ce",
    "\u05d9\u0003\u0002\u0002\u0002\u05cf\u05d0\u0007\u00e2\u0002\u0002\u05d0",
    "\u05d1\u0007\u001f\u0002\u0002\u05d1\u05d6\u0005R*\u0002\u05d2\u05d3",
    "\u0007\u0005\u0002\u0002\u05d3\u05d5\u0005R*\u0002\u05d4\u05d2\u0003",
    "\u0002\u0002\u0002\u05d5\u05d8\u0003\u0002\u0002\u0002\u05d6\u05d4\u0003",
    "\u0002\u0002\u0002\u05d6\u05d7\u0003\u0002\u0002\u0002\u05d7\u05da\u0003",
    "\u0002\u0002\u0002\u05d8\u05d6\u0003\u0002\u0002\u0002\u05d9\u05cf\u0003",
    "\u0002\u0002\u0002\u05d9\u05da\u0003\u0002\u0002\u0002\u05da\u05dc\u0003",
    "\u0002\u0002\u0002\u05db\u05dd\u0005\u00dan\u0002\u05dc\u05db\u0003",
    "\u0002\u0002\u0002\u05dc\u05dd\u0003\u0002\u0002\u0002\u05dd\u05e3\u0003",
    "\u0002\u0002\u0002\u05de\u05e1\u0007\u0088\u0002\u0002\u05df\u05e2\u0007",
    "\u000f\u0002\u0002\u05e0\u05e2\u0005\u00acW\u0002\u05e1\u05df\u0003",
    "\u0002\u0002\u0002\u05e1\u05e0\u0003\u0002\u0002\u0002\u05e2\u05e4\u0003",
    "\u0002\u0002\u0002\u05e3\u05de\u0003\u0002\u0002\u0002\u05e3\u05e4\u0003",
    "\u0002\u0002\u0002\u05e4K\u0003\u0002\u0002\u0002\u05e5\u05e6\u0005",
    " \u0011\u0002\u05e6\u05e7\u0005V,\u0002\u05e7M\u0003\u0002\u0002\u0002",
    "\u05e8\u05e9\b(\u0001\u0002\u05e9\u05ea\u0005P)\u0002\u05ea\u0602\u0003",
    "\u0002\u0002\u0002\u05eb\u05ec\f\u0005\u0002\u0002\u05ec\u05ed\u0006",
    "(\u0003\u0002\u05ed\u05ef\t\r\u0002\u0002\u05ee\u05f0\u0005x=\u0002",
    "\u05ef\u05ee\u0003\u0002\u0002\u0002\u05ef\u05f0\u0003\u0002\u0002\u0002",
    "\u05f0\u05f1\u0003\u0002\u0002\u0002\u05f1\u0601\u0005N(\u0006\u05f2",
    "\u05f3\f\u0004\u0002\u0002\u05f3\u05f4\u0006(\u0005\u0002\u05f4\u05f6",
    "\u0007z\u0002\u0002\u05f5\u05f7\u0005x=\u0002\u05f6\u05f5\u0003\u0002",
    "\u0002\u0002\u05f6\u05f7\u0003\u0002\u0002\u0002\u05f7\u05f8\u0003\u0002",
    "\u0002\u0002\u05f8\u0601\u0005N(\u0005\u05f9\u05fa\f\u0003\u0002\u0002",
    "\u05fa\u05fb\u0006(\u0007\u0002\u05fb\u05fd\t\u000e\u0002\u0002\u05fc",
    "\u05fe\u0005x=\u0002\u05fd\u05fc\u0003\u0002\u0002\u0002\u05fd\u05fe",
    "\u0003\u0002\u0002\u0002\u05fe\u05ff\u0003\u0002\u0002\u0002\u05ff\u0601",
    "\u0005N(\u0004\u0600\u05eb\u0003\u0002\u0002\u0002\u0600\u05f2\u0003",
    "\u0002\u0002\u0002\u0600\u05f9\u0003\u0002\u0002\u0002\u0601\u0604\u0003",
    "\u0002\u0002\u0002\u0602\u0600\u0003\u0002\u0002\u0002\u0602\u0603\u0003",
    "\u0002\u0002\u0002\u0603O\u0003\u0002\u0002\u0002\u0604\u0602\u0003",
    "\u0002\u0002\u0002\u0605\u060f\u0005X-\u0002\u0606\u060f\u0005T+\u0002",
    "\u0607\u0608\u0007\u00eb\u0002\u0002\u0608\u060f\u0005\u009cO\u0002",
    "\u0609\u060f\u0005\u0094K\u0002\u060a\u060b\u0007\u0003\u0002\u0002",
    "\u060b\u060c\u0005\u001e\u0010\u0002\u060c\u060d\u0007\u0004\u0002\u0002",
    "\u060d\u060f\u0003\u0002\u0002\u0002\u060e\u0605\u0003\u0002\u0002\u0002",
    "\u060e\u0606\u0003\u0002\u0002\u0002\u060e\u0607\u0003\u0002\u0002\u0002",
    "\u060e\u0609\u0003\u0002\u0002\u0002\u060e\u060a\u0003\u0002\u0002\u0002",
    "\u060fQ\u0003\u0002\u0002\u0002\u0610\u0612\u0005\u00acW\u0002\u0611",
    "\u0613\t\u000f\u0002\u0002\u0612\u0611\u0003\u0002\u0002\u0002\u0612",
    "\u0613\u0003\u0002\u0002\u0002\u0613\u0616\u0003\u0002\u0002\u0002\u0614",
    "\u0615\u0007\u00a2\u0002\u0002\u0615\u0617\t\u0010\u0002\u0002\u0616",
    "\u0614\u0003\u0002\u0002\u0002\u0616\u0617\u0003\u0002\u0002\u0002\u0617",
    "S\u0003\u0002\u0002\u0002\u0618\u061a\u0005j6\u0002\u0619\u061b\u0005",
    "V,\u0002\u061a\u0619\u0003\u0002\u0002\u0002\u061b\u061c\u0003\u0002",
    "\u0002\u0002\u061c\u061a\u0003\u0002\u0002\u0002\u061c\u061d\u0003\u0002",
    "\u0002\u0002\u061dU\u0003\u0002\u0002\u0002\u061e\u0620\u0005Z.\u0002",
    "\u061f\u0621\u0005b2\u0002\u0620\u061f\u0003\u0002\u0002\u0002\u0620",
    "\u0621\u0003\u0002\u0002\u0002\u0621\u0622\u0003\u0002\u0002\u0002\u0622",
    "\u0623\u0005J&\u0002\u0623\u063a\u0003\u0002\u0002\u0002\u0624\u0628",
    "\u0005\\/\u0002\u0625\u0627\u0005v<\u0002\u0626\u0625\u0003\u0002\u0002",
    "\u0002\u0627\u062a\u0003\u0002\u0002\u0002\u0628\u0626\u0003\u0002\u0002",
    "\u0002\u0628\u0629\u0003\u0002\u0002\u0002\u0629\u062c\u0003\u0002\u0002",
    "\u0002\u062a\u0628\u0003\u0002\u0002\u0002\u062b\u062d\u0005b2\u0002",
    "\u062c\u062b\u0003\u0002\u0002\u0002\u062c\u062d\u0003\u0002\u0002\u0002",
    "\u062d\u062f\u0003\u0002\u0002\u0002\u062e\u0630\u0005l7\u0002\u062f",
    "\u062e\u0003\u0002\u0002\u0002\u062f\u0630\u0003\u0002\u0002\u0002\u0630",
    "\u0632\u0003\u0002\u0002\u0002\u0631\u0633\u0005d3\u0002\u0632\u0631",
    "\u0003\u0002\u0002\u0002\u0632\u0633\u0003\u0002\u0002\u0002\u0633\u0635",
    "\u0003\u0002\u0002\u0002\u0634\u0636\u0005\u00dan\u0002\u0635\u0634",
    "\u0003\u0002\u0002\u0002\u0635\u0636\u0003\u0002\u0002\u0002\u0636\u0637",
    "\u0003\u0002\u0002\u0002\u0637\u0638\u0005J&\u0002\u0638\u063a\u0003",
    "\u0002\u0002\u0002\u0639\u061e\u0003\u0002\u0002\u0002\u0639\u0624\u0003",
    "\u0002\u0002\u0002\u063aW\u0003\u0002\u0002\u0002\u063b\u063d\u0005",
    "Z.\u0002\u063c\u063e\u0005j6\u0002\u063d\u063c\u0003\u0002\u0002\u0002",
    "\u063d\u063e\u0003\u0002\u0002\u0002\u063e\u0640\u0003\u0002\u0002\u0002",
    "\u063f\u0641\u0005b2\u0002\u0640\u063f\u0003\u0002\u0002\u0002\u0640",
    "\u0641\u0003\u0002\u0002\u0002\u0641\u0659\u0003\u0002\u0002\u0002\u0642",
    "\u0644\u0005\\/\u0002\u0643\u0645\u0005j6\u0002\u0644\u0643\u0003\u0002",
    "\u0002\u0002\u0644\u0645\u0003\u0002\u0002\u0002\u0645\u0649\u0003\u0002",
    "\u0002\u0002\u0646\u0648\u0005v<\u0002\u0647\u0646\u0003\u0002\u0002",
    "\u0002\u0648\u064b\u0003\u0002\u0002\u0002\u0649\u0647\u0003\u0002\u0002",
    "\u0002\u0649\u064a\u0003\u0002\u0002\u0002\u064a\u064d\u0003\u0002\u0002",
    "\u0002\u064b\u0649\u0003\u0002\u0002\u0002\u064c\u064e\u0005b2\u0002",
    "\u064d\u064c\u0003\u0002\u0002\u0002\u064d\u064e\u0003\u0002\u0002\u0002",
    "\u064e\u0650\u0003\u0002\u0002\u0002\u064f\u0651\u0005l7\u0002\u0650",
    "\u064f\u0003\u0002\u0002\u0002\u0650\u0651\u0003\u0002\u0002\u0002\u0651",
    "\u0653\u0003\u0002\u0002\u0002\u0652\u0654\u0005d3\u0002\u0653\u0652",
    "\u0003\u0002\u0002\u0002\u0653\u0654\u0003\u0002\u0002\u0002\u0654\u0656",
    "\u0003\u0002\u0002\u0002\u0655\u0657\u0005\u00dan\u0002\u0656\u0655",
    "\u0003\u0002\u0002\u0002\u0656\u0657\u0003\u0002\u0002\u0002\u0657\u0659",
    "\u0003\u0002\u0002\u0002\u0658\u063b\u0003\u0002\u0002\u0002\u0658\u0642",
    "\u0003\u0002\u0002\u0002\u0659Y\u0003\u0002\u0002\u0002\u065a\u065b",
    "\u0007\u00d6\u0002\u0002\u065b\u065c\u0007\u00f7\u0002\u0002\u065c\u065d",
    "\u0007\u0003\u0002\u0002\u065d\u065e\u0005\u00a4S\u0002\u065e\u065f",
    "\u0007\u0004\u0002\u0002\u065f\u0665\u0003\u0002\u0002\u0002\u0660\u0661",
    "\u0007\u0092\u0002\u0002\u0661\u0665\u0005\u00a4S\u0002\u0662\u0663",
    "\u0007\u00c1\u0002\u0002\u0663\u0665\u0005\u00a4S\u0002\u0664\u065a",
    "\u0003\u0002\u0002\u0002\u0664\u0660\u0003\u0002\u0002\u0002\u0664\u0662",
    "\u0003\u0002\u0002\u0002\u0665\u0667\u0003\u0002\u0002\u0002\u0666\u0668",
    "\u0005\u009aN\u0002\u0667\u0666\u0003\u0002\u0002\u0002\u0667\u0668",
    "\u0003\u0002\u0002\u0002\u0668\u066b\u0003\u0002\u0002\u0002\u0669\u066a",
    "\u0007\u00bf\u0002\u0002\u066a\u066c\u0007\u0125\u0002\u0002\u066b\u0669",
    "\u0003\u0002\u0002\u0002\u066b\u066c\u0003\u0002\u0002\u0002\u066c\u066d",
    "\u0003\u0002\u0002\u0002\u066d\u066e\u0007\u0107\u0002\u0002\u066e\u067b",
    "\u0007\u0125\u0002\u0002\u066f\u0679\u0007\u0017\u0002\u0002\u0670\u067a",
    "\u0005\u0088E\u0002\u0671\u067a\u0005\u00d0i\u0002\u0672\u0675\u0007",
    "\u0003\u0002\u0002\u0673\u0676\u0005\u0088E\u0002\u0674\u0676\u0005",
    "\u00d0i\u0002\u0675\u0673\u0003\u0002\u0002\u0002\u0675\u0674\u0003",
    "\u0002\u0002\u0002\u0676\u0677\u0003\u0002\u0002\u0002\u0677\u0678\u0007",
    "\u0004\u0002\u0002\u0678\u067a\u0003\u0002\u0002\u0002\u0679\u0670\u0003",
    "\u0002\u0002\u0002\u0679\u0671\u0003\u0002\u0002\u0002\u0679\u0672\u0003",
    "\u0002\u0002\u0002\u067a\u067c\u0003\u0002\u0002\u0002\u067b\u066f\u0003",
    "\u0002\u0002\u0002\u067b\u067c\u0003\u0002\u0002\u0002\u067c\u067e\u0003",
    "\u0002\u0002\u0002\u067d\u067f\u0005\u009aN\u0002\u067e\u067d\u0003",
    "\u0002\u0002\u0002\u067e\u067f\u0003\u0002\u0002\u0002\u067f\u0682\u0003",
    "\u0002\u0002\u0002\u0680\u0681\u0007\u00be\u0002\u0002\u0681\u0683\u0007",
    "\u0125\u0002\u0002\u0682\u0680\u0003\u0002\u0002\u0002\u0682\u0683\u0003",
    "\u0002\u0002\u0002\u0683[\u0003\u0002\u0002\u0002\u0684\u0688\u0007",
    "\u00d6\u0002\u0002\u0685\u0687\u0005f4\u0002\u0686\u0685\u0003\u0002",
    "\u0002\u0002\u0687\u068a\u0003\u0002\u0002\u0002\u0688\u0686\u0003\u0002",
    "\u0002\u0002\u0688\u0689\u0003\u0002\u0002\u0002\u0689\u068c\u0003\u0002",
    "\u0002\u0002\u068a\u0688\u0003\u0002\u0002\u0002\u068b\u068d\u0005x",
    "=\u0002\u068c\u068b\u0003\u0002\u0002\u0002\u068c\u068d\u0003\u0002",
    "\u0002\u0002\u068d\u068e\u0003\u0002\u0002\u0002\u068e\u068f\u0005\u00a4",
    "S\u0002\u068f]\u0003\u0002\u0002\u0002\u0690\u0691\u0007\u00dc\u0002",
    "\u0002\u0691\u0696\u0005`1\u0002\u0692\u0693\u0007\u0005\u0002\u0002",
    "\u0693\u0695\u0005`1\u0002\u0694\u0692\u0003\u0002\u0002\u0002\u0695",
    "\u0698\u0003\u0002\u0002\u0002\u0696\u0694\u0003\u0002\u0002\u0002\u0696",
    "\u0697\u0003\u0002\u0002\u0002\u0697_\u0003\u0002\u0002\u0002\u0698",
    "\u0696\u0003\u0002\u0002\u0002\u0699\u069a\u0005\u009cO\u0002\u069a",
    "\u069b\u0007\u0112\u0002\u0002\u069b\u069c\u0005\u00acW\u0002\u069c",
    "a\u0003\u0002\u0002\u0002\u069d\u069e\u0007\u010d\u0002\u0002\u069e",
    "\u069f\u0005\u00aeX\u0002\u069fc\u0003\u0002\u0002\u0002\u06a0\u06a1",
    "\u0007m\u0002\u0002\u06a1\u06a2\u0005\u00aeX\u0002\u06a2e\u0003\u0002",
    "\u0002\u0002\u06a3\u06a4\u0007\u0007\u0002\u0002\u06a4\u06ab\u0005h",
    "5\u0002\u06a5\u06a7\u0007\u0005\u0002\u0002\u06a6\u06a5\u0003\u0002",
    "\u0002\u0002\u06a6\u06a7\u0003\u0002\u0002\u0002\u06a7\u06a8\u0003\u0002",
    "\u0002\u0002\u06a8\u06aa\u0005h5\u0002\u06a9\u06a6\u0003\u0002\u0002",
    "\u0002\u06aa\u06ad\u0003\u0002\u0002\u0002\u06ab\u06a9\u0003\u0002\u0002",
    "\u0002\u06ab\u06ac\u0003\u0002\u0002\u0002\u06ac\u06ae\u0003\u0002\u0002",
    "\u0002\u06ad\u06ab\u0003\u0002\u0002\u0002\u06ae\u06af\u0007\b\u0002",
    "\u0002\u06afg\u0003\u0002\u0002\u0002\u06b0\u06be\u0005\u00ecw\u0002",
    "\u06b1\u06b2\u0005\u00ecw\u0002\u06b2\u06b3\u0007\u0003\u0002\u0002",
    "\u06b3\u06b8\u0005\u00b4[\u0002\u06b4\u06b5\u0007\u0005\u0002\u0002",
    "\u06b5\u06b7\u0005\u00b4[\u0002\u06b6\u06b4\u0003\u0002\u0002\u0002",
    "\u06b7\u06ba\u0003\u0002\u0002\u0002\u06b8\u06b6\u0003\u0002\u0002\u0002",
    "\u06b8\u06b9\u0003\u0002\u0002\u0002\u06b9\u06bb\u0003\u0002\u0002\u0002",
    "\u06ba\u06b8\u0003\u0002\u0002\u0002\u06bb\u06bc\u0007\u0004\u0002\u0002",
    "\u06bc\u06be\u0003\u0002\u0002\u0002\u06bd\u06b0\u0003\u0002\u0002\u0002",
    "\u06bd\u06b1\u0003\u0002\u0002\u0002\u06bei\u0003\u0002\u0002\u0002",
    "\u06bf\u06c0\u0007e\u0002\u0002\u06c0\u06c5\u0005z>\u0002\u06c1\u06c2",
    "\u0007\u0005\u0002\u0002\u06c2\u06c4\u0005z>\u0002\u06c3\u06c1\u0003",
    "\u0002\u0002\u0002\u06c4\u06c7\u0003\u0002\u0002\u0002\u06c5\u06c3\u0003",
    "\u0002\u0002\u0002\u06c5\u06c6\u0003\u0002\u0002\u0002\u06c6\u06cb\u0003",
    "\u0002\u0002\u0002\u06c7\u06c5\u0003\u0002\u0002\u0002\u06c8\u06ca\u0005",
    "v<\u0002\u06c9\u06c8\u0003\u0002\u0002\u0002\u06ca\u06cd\u0003\u0002",
    "\u0002\u0002\u06cb\u06c9\u0003\u0002\u0002\u0002\u06cb\u06cc\u0003\u0002",
    "\u0002\u0002\u06cc\u06cf\u0003\u0002\u0002\u0002\u06cd\u06cb\u0003\u0002",
    "\u0002\u0002\u06ce\u06d0\u0005p9\u0002\u06cf\u06ce\u0003\u0002\u0002",
    "\u0002\u06cf\u06d0\u0003\u0002\u0002\u0002\u06d0k\u0003\u0002\u0002",
    "\u0002\u06d1\u06d2\u0007k\u0002\u0002\u06d2\u06d3\u0007\u001f\u0002",
    "\u0002\u06d3\u06d8\u0005\u00acW\u0002\u06d4\u06d5\u0007\u0005\u0002",
    "\u0002\u06d5\u06d7\u0005\u00acW\u0002\u06d6\u06d4\u0003\u0002\u0002",
    "\u0002\u06d7\u06da\u0003\u0002\u0002\u0002\u06d8\u06d6\u0003\u0002\u0002",
    "\u0002\u06d8\u06d9\u0003\u0002\u0002\u0002\u06d9\u06ec\u0003\u0002\u0002",
    "\u0002\u06da\u06d8\u0003\u0002\u0002\u0002\u06db\u06dc\u0007\u010f\u0002",
    "\u0002\u06dc\u06ed\u0007\u00d0\u0002\u0002\u06dd\u06de\u0007\u010f\u0002",
    "\u0002\u06de\u06ed\u00078\u0002\u0002\u06df\u06e0\u0007l\u0002\u0002",
    "\u06e0\u06e1\u0007\u00de\u0002\u0002\u06e1\u06e2\u0007\u0003\u0002\u0002",
    "\u06e2\u06e7\u0005n8\u0002\u06e3\u06e4\u0007\u0005\u0002\u0002\u06e4",
    "\u06e6\u0005n8\u0002\u06e5\u06e3\u0003\u0002\u0002\u0002\u06e6\u06e9",
    "\u0003\u0002\u0002\u0002\u06e7\u06e5\u0003\u0002\u0002\u0002\u06e7\u06e8",
    "\u0003\u0002\u0002\u0002\u06e8\u06ea\u0003\u0002\u0002\u0002\u06e9\u06e7",
    "\u0003\u0002\u0002\u0002\u06ea\u06eb\u0007\u0004\u0002\u0002\u06eb\u06ed",
    "\u0003\u0002\u0002\u0002\u06ec\u06db\u0003\u0002\u0002\u0002\u06ec\u06dd",
    "\u0003\u0002\u0002\u0002\u06ec\u06df\u0003\u0002\u0002\u0002\u06ec\u06ed",
    "\u0003\u0002\u0002\u0002\u06ed\u06fe\u0003\u0002\u0002\u0002\u06ee\u06ef",
    "\u0007k\u0002\u0002\u06ef\u06f0\u0007\u001f\u0002\u0002\u06f0\u06f1",
    "\u0007l\u0002\u0002\u06f1\u06f2\u0007\u00de\u0002\u0002\u06f2\u06f3",
    "\u0007\u0003\u0002\u0002\u06f3\u06f8\u0005n8\u0002\u06f4\u06f5\u0007",
    "\u0005\u0002\u0002\u06f5\u06f7\u0005n8\u0002\u06f6\u06f4\u0003\u0002",
    "\u0002\u0002\u06f7\u06fa\u0003\u0002\u0002\u0002\u06f8\u06f6\u0003\u0002",
    "\u0002\u0002\u06f8\u06f9\u0003\u0002\u0002\u0002\u06f9\u06fb\u0003\u0002",
    "\u0002\u0002\u06fa\u06f8\u0003\u0002\u0002\u0002\u06fb\u06fc\u0007\u0004",
    "\u0002\u0002\u06fc\u06fe\u0003\u0002\u0002\u0002\u06fd\u06d1\u0003\u0002",
    "\u0002\u0002\u06fd\u06ee\u0003\u0002\u0002\u0002\u06fem\u0003\u0002",
    "\u0002\u0002\u06ff\u0708\u0007\u0003\u0002\u0002\u0700\u0705\u0005\u00ac",
    "W\u0002\u0701\u0702\u0007\u0005\u0002\u0002\u0702\u0704\u0005\u00ac",
    "W\u0002\u0703\u0701\u0003\u0002\u0002\u0002\u0704\u0707\u0003\u0002",
    "\u0002\u0002\u0705\u0703\u0003\u0002\u0002\u0002\u0705\u0706\u0003\u0002",
    "\u0002\u0002\u0706\u0709\u0003\u0002\u0002\u0002\u0707\u0705\u0003\u0002",
    "\u0002\u0002\u0708\u0700\u0003\u0002\u0002\u0002\u0708\u0709\u0003\u0002",
    "\u0002\u0002\u0709\u070a\u0003\u0002\u0002\u0002\u070a\u070d\u0007\u0004",
    "\u0002\u0002\u070b\u070d\u0005\u00acW\u0002\u070c\u06ff\u0003\u0002",
    "\u0002\u0002\u070c\u070b\u0003\u0002\u0002\u0002\u070do\u0003\u0002",
    "\u0002\u0002\u070e\u070f\u0007\u00b5\u0002\u0002\u070f\u0710\u0007\u0003",
    "\u0002\u0002\u0710\u0711\u0005\u00a4S\u0002\u0711\u0712\u0007a\u0002",
    "\u0002\u0712\u0713\u0005r:\u0002\u0713\u0714\u0007s\u0002\u0002\u0714",
    "\u0715\u0007\u0003\u0002\u0002\u0715\u071a\u0005t;\u0002\u0716\u0717",
    "\u0007\u0005\u0002\u0002\u0717\u0719\u0005t;\u0002\u0718\u0716\u0003",
    "\u0002\u0002\u0002\u0719\u071c\u0003\u0002\u0002\u0002\u071a\u0718\u0003",
    "\u0002\u0002\u0002\u071a\u071b\u0003\u0002\u0002\u0002\u071b\u071d\u0003",
    "\u0002\u0002\u0002\u071c\u071a\u0003\u0002\u0002\u0002\u071d\u071e\u0007",
    "\u0004\u0002\u0002\u071e\u071f\u0007\u0004\u0002\u0002\u071fq\u0003",
    "\u0002\u0002\u0002\u0720\u072d\u0005\u00ecw\u0002\u0721\u0722\u0007",
    "\u0003\u0002\u0002\u0722\u0727\u0005\u00ecw\u0002\u0723\u0724\u0007",
    "\u0005\u0002\u0002\u0724\u0726\u0005\u00ecw\u0002\u0725\u0723\u0003",
    "\u0002\u0002\u0002\u0726\u0729\u0003\u0002\u0002\u0002\u0727\u0725\u0003",
    "\u0002\u0002\u0002\u0727\u0728\u0003\u0002\u0002\u0002\u0728\u072a\u0003",
    "\u0002\u0002\u0002\u0729\u0727\u0003\u0002\u0002\u0002\u072a\u072b\u0007",
    "\u0004\u0002\u0002\u072b\u072d\u0003\u0002\u0002\u0002\u072c\u0720\u0003",
    "\u0002\u0002\u0002\u072c\u0721\u0003\u0002\u0002\u0002\u072ds\u0003",
    "\u0002\u0002\u0002\u072e\u0733\u0005\u00acW\u0002\u072f\u0731\u0007",
    "\u0017\u0002\u0002\u0730\u072f\u0003\u0002\u0002\u0002\u0730\u0731\u0003",
    "\u0002\u0002\u0002\u0731\u0732\u0003\u0002\u0002\u0002\u0732\u0734\u0005",
    "\u00ecw\u0002\u0733\u0730\u0003\u0002\u0002\u0002\u0733\u0734\u0003",
    "\u0002\u0002\u0002\u0734u\u0003\u0002\u0002\u0002\u0735\u0736\u0007",
    "\u0083\u0002\u0002\u0736\u0738\u0007\u0109\u0002\u0002\u0737\u0739\u0007",
    "\u00ab\u0002\u0002\u0738\u0737\u0003\u0002\u0002\u0002\u0738\u0739\u0003",
    "\u0002\u0002\u0002\u0739\u073a\u0003\u0002\u0002\u0002\u073a\u073b\u0005",
    "\u00e6t\u0002\u073b\u0744\u0007\u0003\u0002\u0002\u073c\u0741\u0005",
    "\u00acW\u0002\u073d\u073e\u0007\u0005\u0002\u0002\u073e\u0740\u0005",
    "\u00acW\u0002\u073f\u073d\u0003\u0002\u0002\u0002\u0740\u0743\u0003",
    "\u0002\u0002\u0002\u0741\u073f\u0003\u0002\u0002\u0002\u0741\u0742\u0003",
    "\u0002\u0002\u0002\u0742\u0745\u0003\u0002\u0002\u0002\u0743\u0741\u0003",
    "\u0002\u0002\u0002\u0744\u073c\u0003\u0002\u0002\u0002\u0744\u0745\u0003",
    "\u0002\u0002\u0002\u0745\u0746\u0003\u0002\u0002\u0002\u0746\u0747\u0007",
    "\u0004\u0002\u0002\u0747\u0753\u0005\u00ecw\u0002\u0748\u074a\u0007",
    "\u0017\u0002\u0002\u0749\u0748\u0003\u0002\u0002\u0002\u0749\u074a\u0003",
    "\u0002\u0002\u0002\u074a\u074b\u0003\u0002\u0002\u0002\u074b\u0750\u0005",
    "\u00ecw\u0002\u074c\u074d\u0007\u0005\u0002\u0002\u074d\u074f\u0005",
    "\u00ecw\u0002\u074e\u074c\u0003\u0002\u0002\u0002\u074f\u0752\u0003",
    "\u0002\u0002\u0002\u0750\u074e\u0003\u0002\u0002\u0002\u0750\u0751\u0003",
    "\u0002\u0002\u0002\u0751\u0754\u0003\u0002\u0002\u0002\u0752\u0750\u0003",
    "\u0002\u0002\u0002\u0753\u0749\u0003\u0002\u0002\u0002\u0753\u0754\u0003",
    "\u0002\u0002\u0002\u0754w\u0003\u0002\u0002\u0002\u0755\u0756\t\u0011",
    "\u0002\u0002\u0756y\u0003\u0002\u0002\u0002\u0757\u075b\u0005\u0092",
    "J\u0002\u0758\u075a\u0005|?\u0002\u0759\u0758\u0003\u0002\u0002\u0002",
    "\u075a\u075d\u0003\u0002\u0002\u0002\u075b\u0759\u0003\u0002\u0002\u0002",
    "\u075b\u075c\u0003\u0002\u0002\u0002\u075c{\u0003\u0002\u0002\u0002",
    "\u075d\u075b\u0003\u0002\u0002\u0002\u075e\u075f\u0005~@\u0002\u075f",
    "\u0760\u0007\u007f\u0002\u0002\u0760\u0762\u0005\u0092J\u0002\u0761",
    "\u0763\u0005\u0080A\u0002\u0762\u0761\u0003\u0002\u0002\u0002\u0762",
    "\u0763\u0003\u0002\u0002\u0002\u0763\u076a\u0003\u0002\u0002\u0002\u0764",
    "\u0765\u0007\u009e\u0002\u0002\u0765\u0766\u0005~@\u0002\u0766\u0767",
    "\u0007\u007f\u0002\u0002\u0767\u0768\u0005\u0092J\u0002\u0768\u076a",
    "\u0003\u0002\u0002\u0002\u0769\u075e\u0003\u0002\u0002\u0002\u0769\u0764",
    "\u0003\u0002\u0002\u0002\u076a}\u0003\u0002\u0002\u0002\u076b\u076d",
    "\u0007v\u0002\u0002\u076c\u076b\u0003\u0002\u0002\u0002\u076c\u076d",
    "\u0003\u0002\u0002\u0002\u076d\u0784\u0003\u0002\u0002\u0002\u076e\u0784",
    "\u00077\u0002\u0002\u076f\u0771\u0007\u0086\u0002\u0002\u0770\u0772",
    "\u0007\u00ab\u0002\u0002\u0771\u0770\u0003\u0002\u0002\u0002\u0771\u0772",
    "\u0003\u0002\u0002\u0002\u0772\u0784\u0003\u0002\u0002\u0002\u0773\u0775",
    "\u0007\u0086\u0002\u0002\u0774\u0773\u0003\u0002\u0002\u0002\u0774\u0775",
    "\u0003\u0002\u0002\u0002\u0775\u0776\u0003\u0002\u0002\u0002\u0776\u0784",
    "\u0007\u00d7\u0002\u0002\u0777\u0779\u0007\u00cb\u0002\u0002\u0778\u077a",
    "\u0007\u00ab\u0002\u0002\u0779\u0778\u0003\u0002\u0002\u0002\u0779\u077a",
    "\u0003\u0002\u0002\u0002\u077a\u0784\u0003\u0002\u0002\u0002\u077b\u077d",
    "\u0007f\u0002\u0002\u077c\u077e\u0007\u00ab\u0002\u0002\u077d\u077c",
    "\u0003\u0002\u0002\u0002\u077d\u077e\u0003\u0002\u0002\u0002\u077e\u0784",
    "\u0003\u0002\u0002\u0002\u077f\u0781\u0007\u0086\u0002\u0002\u0780\u077f",
    "\u0003\u0002\u0002\u0002\u0780\u0781\u0003\u0002\u0002\u0002\u0781\u0782",
    "\u0003\u0002\u0002\u0002\u0782\u0784\u0007\u0013\u0002\u0002\u0783\u076c",
    "\u0003\u0002\u0002\u0002\u0783\u076e\u0003\u0002\u0002\u0002\u0783\u076f",
    "\u0003\u0002\u0002\u0002\u0783\u0774\u0003\u0002\u0002\u0002\u0783\u0777",
    "\u0003\u0002\u0002\u0002\u0783\u077b\u0003\u0002\u0002\u0002\u0783\u0780",
    "\u0003\u0002\u0002\u0002\u0784\u007f\u0003\u0002\u0002\u0002\u0785\u0786",
    "\u0007\u00a4\u0002\u0002\u0786\u078a\u0005\u00aeX\u0002\u0787\u0788",
    "\u0007\u0107\u0002\u0002\u0788\u078a\u0005\u0086D\u0002\u0789\u0785",
    "\u0003\u0002\u0002\u0002\u0789\u0787\u0003\u0002\u0002\u0002\u078a\u0081",
    "\u0003\u0002\u0002\u0002\u078b\u078c\u0007\u00ed\u0002\u0002\u078c\u078e",
    "\u0007\u0003\u0002\u0002\u078d\u078f\u0005\u0084C\u0002\u078e\u078d",
    "\u0003\u0002\u0002\u0002\u078e\u078f\u0003\u0002\u0002\u0002\u078f\u0790",
    "\u0003\u0002\u0002\u0002\u0790\u0791\u0007\u0004\u0002\u0002\u0791\u0083",
    "\u0003\u0002\u0002\u0002\u0792\u0794\u0007\u011b\u0002\u0002\u0793\u0792",
    "\u0003\u0002\u0002\u0002\u0793\u0794\u0003\u0002\u0002\u0002\u0794\u0795",
    "\u0003\u0002\u0002\u0002\u0795\u0796\t\u0012\u0002\u0002\u0796\u07ab",
    "\u0007\u00b4\u0002\u0002\u0797\u0798\u0005\u00acW\u0002\u0798\u0799",
    "\u0007\u00d2\u0002\u0002\u0799\u07ab\u0003\u0002\u0002\u0002\u079a\u079b",
    "\u0007\u001d\u0002\u0002\u079b\u079c\u0007\u0129\u0002\u0002\u079c\u079d",
    "\u0007\u00aa\u0002\u0002\u079d\u079e\u0007\u00a3\u0002\u0002\u079e\u07a7",
    "\u0007\u0129\u0002\u0002\u079f\u07a5\u0007\u00a4\u0002\u0002\u07a0\u07a6",
    "\u0005\u00ecw\u0002\u07a1\u07a2\u0005\u00e6t\u0002\u07a2\u07a3\u0007",
    "\u0003\u0002\u0002\u07a3\u07a4\u0007\u0004\u0002\u0002\u07a4\u07a6\u0003",
    "\u0002\u0002\u0002\u07a5\u07a0\u0003\u0002\u0002\u0002\u07a5\u07a1\u0003",
    "\u0002\u0002\u0002\u07a6\u07a8\u0003\u0002\u0002\u0002\u07a7\u079f\u0003",
    "\u0002\u0002\u0002\u07a7\u07a8\u0003\u0002\u0002\u0002\u07a8\u07ab\u0003",
    "\u0002\u0002\u0002\u07a9\u07ab\u0005\u00acW\u0002\u07aa\u0793\u0003",
    "\u0002\u0002\u0002\u07aa\u0797\u0003\u0002\u0002\u0002\u07aa\u079a\u0003",
    "\u0002\u0002\u0002\u07aa\u07a9\u0003\u0002\u0002\u0002\u07ab\u0085\u0003",
    "\u0002\u0002\u0002\u07ac\u07ad\u0007\u0003\u0002\u0002\u07ad\u07ae\u0005",
    "\u0088E\u0002\u07ae\u07af\u0007\u0004\u0002\u0002\u07af\u0087\u0003",
    "\u0002\u0002\u0002\u07b0\u07b5\u0005\u00e8u\u0002\u07b1\u07b2\u0007",
    "\u0005\u0002\u0002\u07b2\u07b4\u0005\u00e8u\u0002\u07b3\u07b1\u0003",
    "\u0002\u0002\u0002\u07b4\u07b7\u0003\u0002\u0002\u0002\u07b5\u07b3\u0003",
    "\u0002\u0002\u0002\u07b5\u07b6\u0003\u0002\u0002\u0002\u07b6\u0089\u0003",
    "\u0002\u0002\u0002\u07b7\u07b5\u0003\u0002\u0002\u0002\u07b8\u07b9\u0007",
    "\u0003\u0002\u0002\u07b9\u07be\u0005\u008cG\u0002\u07ba\u07bb\u0007",
    "\u0005\u0002\u0002\u07bb\u07bd\u0005\u008cG\u0002\u07bc\u07ba\u0003",
    "\u0002\u0002\u0002\u07bd\u07c0\u0003\u0002\u0002\u0002\u07be\u07bc\u0003",
    "\u0002\u0002\u0002\u07be\u07bf\u0003\u0002\u0002\u0002\u07bf\u07c1\u0003",
    "\u0002\u0002\u0002\u07c0\u07be\u0003\u0002\u0002\u0002\u07c1\u07c2\u0007",
    "\u0004\u0002\u0002\u07c2\u008b\u0003\u0002\u0002\u0002\u07c3\u07c5\u0005",
    "\u00e8u\u0002\u07c4\u07c6\t\u000f\u0002\u0002\u07c5\u07c4\u0003\u0002",
    "\u0002\u0002\u07c5\u07c6\u0003\u0002\u0002\u0002\u07c6\u008d\u0003\u0002",
    "\u0002\u0002\u07c7\u07c8\u0007\u0003\u0002\u0002\u07c8\u07cd\u0005\u0090",
    "I\u0002\u07c9\u07ca\u0007\u0005\u0002\u0002\u07ca\u07cc\u0005\u0090",
    "I\u0002\u07cb\u07c9\u0003\u0002\u0002\u0002\u07cc\u07cf\u0003\u0002",
    "\u0002\u0002\u07cd\u07cb\u0003\u0002\u0002\u0002\u07cd\u07ce\u0003\u0002",
    "\u0002\u0002\u07ce\u07d0\u0003\u0002\u0002\u0002\u07cf\u07cd\u0003\u0002",
    "\u0002\u0002\u07d0\u07d1\u0007\u0004\u0002\u0002\u07d1\u008f\u0003\u0002",
    "\u0002\u0002\u07d2\u07d5\u0005\u00ecw\u0002\u07d3\u07d4\u0007.\u0002",
    "\u0002\u07d4\u07d6\u0007\u0125\u0002\u0002\u07d5\u07d3\u0003\u0002\u0002",
    "\u0002\u07d5\u07d6\u0003\u0002\u0002\u0002\u07d6\u0091\u0003\u0002\u0002",
    "\u0002\u07d7\u07d9\u0005\u009cO\u0002\u07d8\u07da\u0005\u0082B\u0002",
    "\u07d9\u07d8\u0003\u0002\u0002\u0002\u07d9\u07da\u0003\u0002\u0002\u0002",
    "\u07da\u07db\u0003\u0002\u0002\u0002\u07db\u07dc\u0005\u0098M\u0002",
    "\u07dc\u07f0\u0003\u0002\u0002\u0002\u07dd\u07de\u0007\u0003\u0002\u0002",
    "\u07de\u07df\u0005\u001e\u0010\u0002\u07df\u07e1\u0007\u0004\u0002\u0002",
    "\u07e0\u07e2\u0005\u0082B\u0002\u07e1\u07e0\u0003\u0002\u0002\u0002",
    "\u07e1\u07e2\u0003\u0002\u0002\u0002\u07e2\u07e3\u0003\u0002\u0002\u0002",
    "\u07e3\u07e4\u0005\u0098M\u0002\u07e4\u07f0\u0003\u0002\u0002\u0002",
    "\u07e5\u07e6\u0007\u0003\u0002\u0002\u07e6\u07e7\u0005z>\u0002\u07e7",
    "\u07e9\u0007\u0004\u0002\u0002\u07e8\u07ea\u0005\u0082B\u0002\u07e9",
    "\u07e8\u0003\u0002\u0002\u0002\u07e9\u07ea\u0003\u0002\u0002\u0002\u07ea",
    "\u07eb\u0003\u0002\u0002\u0002\u07eb\u07ec\u0005\u0098M\u0002\u07ec",
    "\u07f0\u0003\u0002\u0002\u0002\u07ed\u07f0\u0005\u0094K\u0002\u07ee",
    "\u07f0\u0005\u0096L\u0002\u07ef\u07d7\u0003\u0002\u0002\u0002\u07ef",
    "\u07dd\u0003\u0002\u0002\u0002\u07ef\u07e5\u0003\u0002\u0002\u0002\u07ef",
    "\u07ed\u0003\u0002\u0002\u0002\u07ef\u07ee\u0003\u0002\u0002\u0002\u07f0",
    "\u0093\u0003\u0002\u0002\u0002\u07f1\u07f2\u0007\u0108\u0002\u0002\u07f2",
    "\u07f7\u0005\u00acW\u0002\u07f3\u07f4\u0007\u0005\u0002\u0002\u07f4",
    "\u07f6\u0005\u00acW\u0002\u07f5\u07f3\u0003\u0002\u0002\u0002\u07f6",
    "\u07f9\u0003\u0002\u0002\u0002\u07f7\u07f5\u0003\u0002\u0002\u0002\u07f7",
    "\u07f8\u0003\u0002\u0002\u0002\u07f8\u07fa\u0003\u0002\u0002\u0002\u07f9",
    "\u07f7\u0003\u0002\u0002\u0002\u07fa\u07fb\u0005\u0098M\u0002\u07fb",
    "\u0095\u0003\u0002\u0002\u0002\u07fc\u07fd\u0005\u00e8u\u0002\u07fd",
    "\u0806\u0007\u0003\u0002\u0002\u07fe\u0803\u0005\u00acW\u0002\u07ff",
    "\u0800\u0007\u0005\u0002\u0002\u0800\u0802\u0005\u00acW\u0002\u0801",
    "\u07ff\u0003\u0002\u0002\u0002\u0802\u0805\u0003\u0002\u0002\u0002\u0803",
    "\u0801\u0003\u0002\u0002\u0002\u0803\u0804\u0003\u0002\u0002\u0002\u0804",
    "\u0807\u0003\u0002\u0002\u0002\u0805\u0803\u0003\u0002\u0002\u0002\u0806",
    "\u07fe\u0003\u0002\u0002\u0002\u0806\u0807\u0003\u0002\u0002\u0002\u0807",
    "\u0808\u0003\u0002\u0002\u0002\u0808\u0809\u0007\u0004\u0002\u0002\u0809",
    "\u080a\u0005\u0098M\u0002\u080a\u0097\u0003\u0002\u0002\u0002\u080b",
    "\u080d\u0007\u0017\u0002\u0002\u080c\u080b\u0003\u0002\u0002\u0002\u080c",
    "\u080d\u0003\u0002\u0002\u0002\u080d\u080e\u0003\u0002\u0002\u0002\u080e",
    "\u0810\u0005\u00eex\u0002\u080f\u0811\u0005\u0086D\u0002\u0810\u080f",
    "\u0003\u0002\u0002\u0002\u0810\u0811\u0003\u0002\u0002\u0002\u0811\u0813",
    "\u0003\u0002\u0002\u0002\u0812\u080c\u0003\u0002\u0002\u0002\u0812\u0813",
    "\u0003\u0002\u0002\u0002\u0813\u0099\u0003\u0002\u0002\u0002\u0814\u0815",
    "\u0007\u00d1\u0002\u0002\u0815\u0816\u0007c\u0002\u0002\u0816\u0817",
    "\u0007\u00d9\u0002\u0002\u0817\u081b\u0007\u0125\u0002\u0002\u0818\u0819",
    "\u0007\u010f\u0002\u0002\u0819\u081a\u0007\u00da\u0002\u0002\u081a\u081c",
    "\u00054\u001b\u0002\u081b\u0818\u0003\u0002\u0002\u0002\u081b\u081c",
    "\u0003\u0002\u0002\u0002\u081c\u0846\u0003\u0002\u0002\u0002\u081d\u081e",
    "\u0007\u00d1\u0002\u0002\u081e\u081f\u0007c\u0002\u0002\u081f\u0829",
    "\u0007F\u0002\u0002\u0820\u0821\u0007\\\u0002\u0002\u0821\u0822\u0007",
    "\u00f0\u0002\u0002\u0822\u0823\u0007\u001f\u0002\u0002\u0823\u0827\u0007",
    "\u0125\u0002\u0002\u0824\u0825\u0007Q\u0002\u0002\u0825\u0826\u0007",
    "\u001f\u0002\u0002\u0826\u0828\u0007\u0125\u0002\u0002\u0827\u0824\u0003",
    "\u0002\u0002\u0002\u0827\u0828\u0003\u0002\u0002\u0002\u0828\u082a\u0003",
    "\u0002\u0002\u0002\u0829\u0820\u0003\u0002\u0002\u0002\u0829\u082a\u0003",
    "\u0002\u0002\u0002\u082a\u0830\u0003\u0002\u0002\u0002\u082b\u082c\u0007",
    "+\u0002\u0002\u082c\u082d\u0007~\u0002\u0002\u082d\u082e\u0007\u00f0",
    "\u0002\u0002\u082e\u082f\u0007\u001f\u0002\u0002\u082f\u0831\u0007\u0125",
    "\u0002\u0002\u0830\u082b\u0003\u0002\u0002\u0002\u0830\u0831\u0003\u0002",
    "\u0002\u0002\u0831\u0837\u0003\u0002\u0002\u0002\u0832\u0833\u0007\u0092",
    "\u0002\u0002\u0833\u0834\u0007\u0080\u0002\u0002\u0834\u0835\u0007\u00f0",
    "\u0002\u0002\u0835\u0836\u0007\u001f\u0002\u0002\u0836\u0838\u0007\u0125",
    "\u0002\u0002\u0837\u0832\u0003\u0002\u0002\u0002\u0837\u0838\u0003\u0002",
    "\u0002\u0002\u0838\u083d\u0003\u0002\u0002\u0002\u0839\u083a\u0007\u0089",
    "\u0002\u0002\u083a\u083b\u0007\u00f0\u0002\u0002\u083b\u083c\u0007\u001f",
    "\u0002\u0002\u083c\u083e\u0007\u0125\u0002\u0002\u083d\u0839\u0003\u0002",
    "\u0002\u0002\u083d\u083e\u0003\u0002\u0002\u0002\u083e\u0843\u0003\u0002",
    "\u0002\u0002\u083f\u0840\u0007\u00a1\u0002\u0002\u0840\u0841\u0007D",
    "\u0002\u0002\u0841\u0842\u0007\u0017\u0002\u0002\u0842\u0844\u0007\u0125",
    "\u0002\u0002\u0843\u083f\u0003\u0002\u0002\u0002\u0843\u0844\u0003\u0002",
    "\u0002\u0002\u0844\u0846\u0003\u0002\u0002\u0002\u0845\u0814\u0003\u0002",
    "\u0002\u0002\u0845\u081d\u0003\u0002\u0002\u0002\u0846\u009b\u0003\u0002",
    "\u0002\u0002\u0847\u084c\u0005\u00e8u\u0002\u0848\u0849\u0007\u0006",
    "\u0002\u0002\u0849\u084b\u0005\u00e8u\u0002\u084a\u0848\u0003\u0002",
    "\u0002\u0002\u084b\u084e\u0003\u0002\u0002\u0002\u084c\u084a\u0003\u0002",
    "\u0002\u0002\u084c\u084d\u0003\u0002\u0002\u0002\u084d\u009d\u0003\u0002",
    "\u0002\u0002\u084e\u084c\u0003\u0002\u0002\u0002\u084f\u0850\u0005\u00e8",
    "u\u0002\u0850\u0851\u0007\u0006\u0002\u0002\u0851\u0853\u0003\u0002",
    "\u0002\u0002\u0852\u084f\u0003\u0002\u0002\u0002\u0852\u0853\u0003\u0002",
    "\u0002\u0002\u0853\u0854\u0003\u0002\u0002\u0002\u0854\u0855\u0005\u00e8",
    "u\u0002\u0855\u009f\u0003\u0002\u0002\u0002\u0856\u0857\u0005\u00e8",
    "u\u0002\u0857\u0858\u0007\u0006\u0002\u0002\u0858\u085a\u0003\u0002",
    "\u0002\u0002\u0859\u0856\u0003\u0002\u0002\u0002\u0859\u085a\u0003\u0002",
    "\u0002\u0002\u085a\u085b\u0003\u0002\u0002\u0002\u085b\u085c\u0005\u00e8",
    "u\u0002\u085c\u00a1\u0003\u0002\u0002\u0002\u085d\u0865\u0005\u00ac",
    "W\u0002\u085e\u0860\u0007\u0017\u0002\u0002\u085f\u085e\u0003\u0002",
    "\u0002\u0002\u085f\u0860\u0003\u0002\u0002\u0002\u0860\u0863\u0003\u0002",
    "\u0002\u0002\u0861\u0864\u0005\u00e8u\u0002\u0862\u0864\u0005\u0086",
    "D\u0002\u0863\u0861\u0003\u0002\u0002\u0002\u0863\u0862\u0003\u0002",
    "\u0002\u0002\u0864\u0866\u0003\u0002\u0002\u0002\u0865\u085f\u0003\u0002",
    "\u0002\u0002\u0865\u0866\u0003\u0002\u0002\u0002\u0866\u00a3\u0003\u0002",
    "\u0002\u0002\u0867\u086c\u0005\u00a2R\u0002\u0868\u0869\u0007\u0005",
    "\u0002\u0002\u0869\u086b\u0005\u00a2R\u0002\u086a\u0868\u0003\u0002",
    "\u0002\u0002\u086b\u086e\u0003\u0002\u0002\u0002\u086c\u086a\u0003\u0002",
    "\u0002\u0002\u086c\u086d\u0003\u0002\u0002\u0002\u086d\u00a5\u0003\u0002",
    "\u0002\u0002\u086e\u086c\u0003\u0002\u0002\u0002\u086f\u0870\u0007\u0003",
    "\u0002\u0002\u0870\u0875\u0005\u00a8U\u0002\u0871\u0872\u0007\u0005",
    "\u0002\u0002\u0872\u0874\u0005\u00a8U\u0002\u0873\u0871\u0003\u0002",
    "\u0002\u0002\u0874\u0877\u0003\u0002\u0002\u0002\u0875\u0873\u0003\u0002",
    "\u0002\u0002\u0875\u0876\u0003\u0002\u0002\u0002\u0876\u0878\u0003\u0002",
    "\u0002\u0002\u0877\u0875\u0003\u0002\u0002\u0002\u0878\u0879\u0007\u0004",
    "\u0002\u0002\u0879\u00a7\u0003\u0002\u0002\u0002\u087a\u0888\u0005\u00e6",
    "t\u0002\u087b\u087c\u0005\u00ecw\u0002\u087c\u087d\u0007\u0003\u0002",
    "\u0002\u087d\u0882\u0005\u00aaV\u0002\u087e\u087f\u0007\u0005\u0002",
    "\u0002\u087f\u0881\u0005\u00aaV\u0002\u0880\u087e\u0003\u0002\u0002",
    "\u0002\u0881\u0884\u0003\u0002\u0002\u0002\u0882\u0880\u0003\u0002\u0002",
    "\u0002\u0882\u0883\u0003\u0002\u0002\u0002\u0883\u0885\u0003\u0002\u0002",
    "\u0002\u0884\u0882\u0003\u0002\u0002\u0002\u0885\u0886\u0007\u0004\u0002",
    "\u0002\u0886\u0888\u0003\u0002\u0002\u0002\u0887\u087a\u0003\u0002\u0002",
    "\u0002\u0887\u087b\u0003\u0002\u0002\u0002\u0888\u00a9\u0003\u0002\u0002",
    "\u0002\u0889\u088c\u0005\u00e6t\u0002\u088a\u088c\u0005\u00b6\\\u0002",
    "\u088b\u0889\u0003\u0002\u0002\u0002\u088b\u088a\u0003\u0002\u0002\u0002",
    "\u088c\u00ab\u0003\u0002\u0002\u0002\u088d\u088e\u0005\u00aeX\u0002",
    "\u088e\u00ad\u0003\u0002\u0002\u0002\u088f\u0890\bX\u0001\u0002\u0890",
    "\u0891\u0007\u00a0\u0002\u0002\u0891\u089c\u0005\u00aeX\u0007\u0892",
    "\u0893\u0007T\u0002\u0002\u0893\u0894\u0007\u0003\u0002\u0002\u0894",
    "\u0895\u0005\u001e\u0010\u0002\u0895\u0896\u0007\u0004\u0002\u0002\u0896",
    "\u089c\u0003\u0002\u0002\u0002\u0897\u0899\u0005\u00b2Z\u0002\u0898",
    "\u089a\u0005\u00b0Y\u0002\u0899\u0898\u0003\u0002\u0002\u0002\u0899",
    "\u089a\u0003\u0002\u0002\u0002\u089a\u089c\u0003\u0002\u0002\u0002\u089b",
    "\u088f\u0003\u0002\u0002\u0002\u089b\u0892\u0003\u0002\u0002\u0002\u089b",
    "\u0897\u0003\u0002\u0002\u0002\u089c\u08a5\u0003\u0002\u0002\u0002\u089d",
    "\u089e\f\u0004\u0002\u0002\u089e\u089f\u0007\u0012\u0002\u0002\u089f",
    "\u08a4\u0005\u00aeX\u0005\u08a0\u08a1\f\u0003\u0002\u0002\u08a1\u08a2",
    "\u0007\u00a8\u0002\u0002\u08a2\u08a4\u0005\u00aeX\u0004\u08a3\u089d",
    "\u0003\u0002\u0002\u0002\u08a3\u08a0\u0003\u0002\u0002\u0002\u08a4\u08a7",
    "\u0003\u0002\u0002\u0002\u08a5\u08a3\u0003\u0002\u0002\u0002\u08a5\u08a6",
    "\u0003\u0002\u0002\u0002\u08a6\u00af\u0003\u0002\u0002\u0002\u08a7\u08a5",
    "\u0003\u0002\u0002\u0002\u08a8\u08aa\u0007\u00a0\u0002\u0002\u08a9\u08a8",
    "\u0003\u0002\u0002\u0002\u08a9\u08aa\u0003\u0002\u0002\u0002\u08aa\u08ab",
    "\u0003\u0002\u0002\u0002\u08ab\u08ac\u0007\u001b\u0002\u0002\u08ac\u08ad",
    "\u0005\u00b2Z\u0002\u08ad\u08ae\u0007\u0012\u0002\u0002\u08ae\u08af",
    "\u0005\u00b2Z\u0002\u08af\u08de\u0003\u0002\u0002\u0002\u08b0\u08b2",
    "\u0007\u00a0\u0002\u0002\u08b1\u08b0\u0003\u0002\u0002\u0002\u08b1\u08b2",
    "\u0003\u0002\u0002\u0002\u08b2\u08b3\u0003\u0002\u0002\u0002\u08b3\u08b4",
    "\u0007s\u0002\u0002\u08b4\u08b5\u0007\u0003\u0002\u0002\u08b5\u08ba",
    "\u0005\u00acW\u0002\u08b6\u08b7\u0007\u0005\u0002\u0002\u08b7\u08b9",
    "\u0005\u00acW\u0002\u08b8\u08b6\u0003\u0002\u0002\u0002\u08b9\u08bc",
    "\u0003\u0002\u0002\u0002\u08ba\u08b8\u0003\u0002\u0002\u0002\u08ba\u08bb",
    "\u0003\u0002\u0002\u0002\u08bb\u08bd\u0003\u0002\u0002\u0002\u08bc\u08ba",
    "\u0003\u0002\u0002\u0002\u08bd\u08be\u0007\u0004\u0002\u0002\u08be\u08de",
    "\u0003\u0002\u0002\u0002\u08bf\u08c1\u0007\u00a0\u0002\u0002\u08c0\u08bf",
    "\u0003\u0002\u0002\u0002\u08c0\u08c1\u0003\u0002\u0002\u0002\u08c1\u08c2",
    "\u0003\u0002\u0002\u0002\u08c2\u08c3\u0007s\u0002\u0002\u08c3\u08c4",
    "\u0007\u0003\u0002\u0002\u08c4\u08c5\u0005\u001e\u0010\u0002\u08c5\u08c6",
    "\u0007\u0004\u0002\u0002\u08c6\u08de\u0003\u0002\u0002\u0002\u08c7\u08c9",
    "\u0007\u00a0\u0002\u0002\u08c8\u08c7\u0003\u0002\u0002\u0002\u08c8\u08c9",
    "\u0003\u0002\u0002\u0002\u08c9\u08ca\u0003\u0002\u0002\u0002\u08ca\u08cb",
    "\t\u0013\u0002\u0002\u08cb\u08de\u0005\u00b2Z\u0002\u08cc\u08ce\u0007",
    "}\u0002\u0002\u08cd\u08cf\u0007\u00a0\u0002\u0002\u08ce\u08cd\u0003",
    "\u0002\u0002\u0002\u08ce\u08cf\u0003\u0002\u0002\u0002\u08cf\u08d0\u0003",
    "\u0002\u0002\u0002\u08d0\u08de\u0007\u00a1\u0002\u0002\u08d1\u08d3\u0007",
    "}\u0002\u0002\u08d2\u08d4\u0007\u00a0\u0002\u0002\u08d3\u08d2\u0003",
    "\u0002\u0002\u0002\u08d3\u08d4\u0003\u0002\u0002\u0002\u08d4\u08d5\u0003",
    "\u0002\u0002\u0002\u08d5\u08de\t\u0014\u0002\u0002\u08d6\u08d8\u0007",
    "}\u0002\u0002\u08d7\u08d9\u0007\u00a0\u0002\u0002\u08d8\u08d7\u0003",
    "\u0002\u0002\u0002\u08d8\u08d9\u0003\u0002\u0002\u0002\u08d9\u08da\u0003",
    "\u0002\u0002\u0002\u08da\u08db\u0007L\u0002\u0002\u08db\u08dc\u0007",
    "e\u0002\u0002\u08dc\u08de\u0005\u00b2Z\u0002\u08dd\u08a9\u0003\u0002",
    "\u0002\u0002\u08dd\u08b1\u0003\u0002\u0002\u0002\u08dd\u08c0\u0003\u0002",
    "\u0002\u0002\u08dd\u08c8\u0003\u0002\u0002\u0002\u08dd\u08cc\u0003\u0002",
    "\u0002\u0002\u08dd\u08d1\u0003\u0002\u0002\u0002\u08dd\u08d6\u0003\u0002",
    "\u0002\u0002\u08de\u00b1\u0003\u0002\u0002\u0002\u08df\u08e0\bZ\u0001",
    "\u0002\u08e0\u08e4\u0005\u00b4[\u0002\u08e1\u08e2\t\u0015\u0002\u0002",
    "\u08e2\u08e4\u0005\u00b2Z\t\u08e3\u08df\u0003\u0002\u0002\u0002\u08e3",
    "\u08e1\u0003\u0002\u0002\u0002\u08e4\u08fa\u0003\u0002\u0002\u0002\u08e5",
    "\u08e6\f\b\u0002\u0002\u08e6\u08e7\t\u0016\u0002\u0002\u08e7\u08f9\u0005",
    "\u00b2Z\t\u08e8\u08e9\f\u0007\u0002\u0002\u08e9\u08ea\t\u0017\u0002",
    "\u0002\u08ea\u08f9\u0005\u00b2Z\b\u08eb\u08ec\f\u0006\u0002\u0002\u08ec",
    "\u08ed\u0007\u0121\u0002\u0002\u08ed\u08f9\u0005\u00b2Z\u0007\u08ee",
    "\u08ef\f\u0005\u0002\u0002\u08ef\u08f0\u0007\u0124\u0002\u0002\u08f0",
    "\u08f9\u0005\u00b2Z\u0006\u08f1\u08f2\f\u0004\u0002\u0002\u08f2\u08f3",
    "\u0007\u0122\u0002\u0002\u08f3\u08f9\u0005\u00b2Z\u0005\u08f4\u08f5",
    "\f\u0003\u0002\u0002\u08f5\u08f6\u0005\u00b8]\u0002\u08f6\u08f7\u0005",
    "\u00b2Z\u0004\u08f7\u08f9\u0003\u0002\u0002\u0002\u08f8\u08e5\u0003",
    "\u0002\u0002\u0002\u08f8\u08e8\u0003\u0002\u0002\u0002\u08f8\u08eb\u0003",
    "\u0002\u0002\u0002\u08f8\u08ee\u0003\u0002\u0002\u0002\u08f8\u08f1\u0003",
    "\u0002\u0002\u0002\u08f8\u08f4\u0003\u0002\u0002\u0002\u08f9\u08fc\u0003",
    "\u0002\u0002\u0002\u08fa\u08f8\u0003\u0002\u0002\u0002\u08fa\u08fb\u0003",
    "\u0002\u0002\u0002\u08fb\u00b3\u0003\u0002\u0002\u0002\u08fc\u08fa\u0003",
    "\u0002\u0002\u0002\u08fd\u08fe\b[\u0001\u0002\u08fe\u09ac\t\u0018\u0002",
    "\u0002\u08ff\u0901\u0007\"\u0002\u0002\u0900\u0902\u0005\u00d8m\u0002",
    "\u0901\u0900\u0003\u0002\u0002\u0002\u0902\u0903\u0003\u0002\u0002\u0002",
    "\u0903\u0901\u0003\u0002\u0002\u0002\u0903\u0904\u0003\u0002\u0002\u0002",
    "\u0904\u0907\u0003\u0002\u0002\u0002\u0905\u0906\u0007O\u0002\u0002",
    "\u0906\u0908\u0005\u00acW\u0002\u0907\u0905\u0003\u0002\u0002\u0002",
    "\u0907\u0908\u0003\u0002\u0002\u0002\u0908\u0909\u0003\u0002\u0002\u0002",
    "\u0909\u090a\u0007P\u0002\u0002\u090a\u09ac\u0003\u0002\u0002\u0002",
    "\u090b\u090c\u0007\"\u0002\u0002\u090c\u090e\u0005\u00acW\u0002\u090d",
    "\u090f\u0005\u00d8m\u0002\u090e\u090d\u0003\u0002\u0002\u0002\u090f",
    "\u0910\u0003\u0002\u0002\u0002\u0910\u090e\u0003\u0002\u0002\u0002\u0910",
    "\u0911\u0003\u0002\u0002\u0002\u0911\u0914\u0003\u0002\u0002\u0002\u0912",
    "\u0913\u0007O\u0002\u0002\u0913\u0915\u0005\u00acW\u0002\u0914\u0912",
    "\u0003\u0002\u0002\u0002\u0914\u0915\u0003\u0002\u0002\u0002\u0915\u0916",
    "\u0003\u0002\u0002\u0002\u0916\u0917\u0007P\u0002\u0002\u0917\u09ac",
    "\u0003\u0002\u0002\u0002\u0918\u0919\u0007#\u0002\u0002\u0919\u091a",
    "\u0007\u0003\u0002\u0002\u091a\u091b\u0005\u00acW\u0002\u091b\u091c",
    "\u0007\u0017\u0002\u0002\u091c\u091d\u0005\u00caf\u0002\u091d\u091e",
    "\u0007\u0004\u0002\u0002\u091e\u09ac\u0003\u0002\u0002\u0002\u091f\u0920",
    "\u0007\u00e8\u0002\u0002\u0920\u0929\u0007\u0003\u0002\u0002\u0921\u0926",
    "\u0005\u00a2R\u0002\u0922\u0923\u0007\u0005\u0002\u0002\u0923\u0925",
    "\u0005\u00a2R\u0002\u0924\u0922\u0003\u0002\u0002\u0002\u0925\u0928",
    "\u0003\u0002\u0002\u0002\u0926\u0924\u0003\u0002\u0002\u0002\u0926\u0927",
    "\u0003\u0002\u0002\u0002\u0927\u092a\u0003\u0002\u0002\u0002\u0928\u0926",
    "\u0003\u0002\u0002\u0002\u0929\u0921\u0003\u0002\u0002\u0002\u0929\u092a",
    "\u0003\u0002\u0002\u0002\u092a\u092b\u0003\u0002\u0002\u0002\u092b\u09ac",
    "\u0007\u0004\u0002\u0002\u092c\u092d\t\u0019\u0002\u0002\u092d\u092e",
    "\u0007\u0003\u0002\u0002\u092e\u0931\u0005\u00acW\u0002\u092f\u0930",
    "\t\u001a\u0002\u0002\u0930\u0932\u0007\u00a2\u0002\u0002\u0931\u092f",
    "\u0003\u0002\u0002\u0002\u0931\u0932\u0003\u0002\u0002\u0002\u0932\u0933",
    "\u0003\u0002\u0002\u0002\u0933\u0934\u0007\u0004\u0002\u0002\u0934\u09ac",
    "\u0003\u0002\u0002\u0002\u0935\u0936\t\u001b\u0002\u0002\u0936\u0937",
    "\u0007\u0003\u0002\u0002\u0937\u093a\u0005\u00acW\u0002\u0938\u0939",
    "\t\u001a\u0002\u0002\u0939\u093b\u0007\u00a2\u0002\u0002\u093a\u0938",
    "\u0003\u0002\u0002\u0002\u093a\u093b\u0003\u0002\u0002\u0002\u093b\u093c",
    "\u0003\u0002\u0002\u0002\u093c\u093d\u0007\u0004\u0002\u0002\u093d\u09ac",
    "\u0003\u0002\u0002\u0002\u093e\u093f\u0007\u00b7\u0002\u0002\u093f\u0940",
    "\u0007\u0003\u0002\u0002\u0940\u0941\u0005\u00b2Z\u0002\u0941\u0942",
    "\u0007s\u0002\u0002\u0942\u0943\u0005\u00b2Z\u0002\u0943\u0944\u0007",
    "\u0004\u0002\u0002\u0944\u09ac\u0003\u0002\u0002\u0002\u0945\u09ac\u0005",
    "\u00b6\\\u0002\u0946\u09ac\u0007\u011c\u0002\u0002\u0947\u0948\u0005",
    "\u00e6t\u0002\u0948\u0949\u0007\u0006\u0002\u0002\u0949\u094a\u0007",
    "\u011c\u0002\u0002\u094a\u09ac\u0003\u0002\u0002\u0002\u094b\u094c\u0007",
    "\u0003\u0002\u0002\u094c\u094f\u0005\u00a2R\u0002\u094d\u094e\u0007",
    "\u0005\u0002\u0002\u094e\u0950\u0005\u00a2R\u0002\u094f\u094d\u0003",
    "\u0002\u0002\u0002\u0950\u0951\u0003\u0002\u0002\u0002\u0951\u094f\u0003",
    "\u0002\u0002\u0002\u0951\u0952\u0003\u0002\u0002\u0002\u0952\u0953\u0003",
    "\u0002\u0002\u0002\u0953\u0954\u0007\u0004\u0002\u0002\u0954\u09ac\u0003",
    "\u0002\u0002\u0002\u0955\u0956\u0007\u0003\u0002\u0002\u0956\u0957\u0005",
    "\u001e\u0010\u0002\u0957\u0958\u0007\u0004\u0002\u0002\u0958\u09ac\u0003",
    "\u0002\u0002\u0002\u0959\u095a\u0005\u00e6t\u0002\u095a\u0966\u0007",
    "\u0003\u0002\u0002\u095b\u095d\u0005x=\u0002\u095c\u095b\u0003\u0002",
    "\u0002\u0002\u095c\u095d\u0003\u0002\u0002\u0002\u095d\u095e\u0003\u0002",
    "\u0002\u0002\u095e\u0963\u0005\u00acW\u0002\u095f\u0960\u0007\u0005",
    "\u0002\u0002\u0960\u0962\u0005\u00acW\u0002\u0961\u095f\u0003\u0002",
    "\u0002\u0002\u0962\u0965\u0003\u0002\u0002\u0002\u0963\u0961\u0003\u0002",
    "\u0002\u0002\u0963\u0964\u0003\u0002\u0002\u0002\u0964\u0967\u0003\u0002",
    "\u0002\u0002\u0965\u0963\u0003\u0002\u0002\u0002\u0966\u095c\u0003\u0002",
    "\u0002\u0002\u0966\u0967\u0003\u0002\u0002\u0002\u0967\u0968\u0003\u0002",
    "\u0002\u0002\u0968\u096b\u0007\u0004\u0002\u0002\u0969\u096a\u0007\u00ad",
    "\u0002\u0002\u096a\u096c\u0005\u00dep\u0002\u096b\u0969\u0003\u0002",
    "\u0002\u0002\u096b\u096c\u0003\u0002\u0002\u0002\u096c\u09ac\u0003\u0002",
    "\u0002\u0002\u096d\u096e\u0007\u012d\u0002\u0002\u096e\u096f\u0007\t",
    "\u0002\u0002\u096f\u09ac\u0005\u00acW\u0002\u0970\u0971\u0007\u0003",
    "\u0002\u0002\u0971\u0974\u0007\u012d\u0002\u0002\u0972\u0973\u0007\u0005",
    "\u0002\u0002\u0973\u0975\u0007\u012d\u0002\u0002\u0974\u0972\u0003\u0002",
    "\u0002\u0002\u0975\u0976\u0003\u0002\u0002\u0002\u0976\u0974\u0003\u0002",
    "\u0002\u0002\u0976\u0977\u0003\u0002\u0002\u0002\u0977\u0978\u0003\u0002",
    "\u0002\u0002\u0978\u0979\u0007\u0004\u0002\u0002\u0979\u097a\u0007\t",
    "\u0002\u0002\u097a\u09ac\u0005\u00acW\u0002\u097b\u09ac\u0005\u00ec",
    "w\u0002\u097c\u097d\u0007\u0003\u0002\u0002\u097d\u097e\u0005\u00ac",
    "W\u0002\u097e\u097f\u0007\u0004\u0002\u0002\u097f\u09ac\u0003\u0002",
    "\u0002\u0002\u0980\u0981\u0007Y\u0002\u0002\u0981\u0982\u0007\u0003",
    "\u0002\u0002\u0982\u0983\u0005\u00ecw\u0002\u0983\u0984\u0007e\u0002",
    "\u0002\u0984\u0985\u0005\u00b2Z\u0002\u0985\u0986\u0007\u0004\u0002",
    "\u0002\u0986\u09ac\u0003\u0002\u0002\u0002\u0987\u0988\t\u001c\u0002",
    "\u0002\u0988\u0989\u0007\u0003\u0002\u0002\u0989\u098a\u0005\u00b2Z",
    "\u0002\u098a\u098b\t\u001d\u0002\u0002\u098b\u098e\u0005\u00b2Z\u0002",
    "\u098c\u098d\t\u001e\u0002\u0002\u098d\u098f\u0005\u00b2Z\u0002\u098e",
    "\u098c\u0003\u0002\u0002\u0002\u098e\u098f\u0003\u0002\u0002\u0002\u098f",
    "\u0990\u0003\u0002\u0002\u0002\u0990\u0991\u0007\u0004\u0002\u0002\u0991",
    "\u09ac\u0003\u0002\u0002\u0002\u0992\u0993\u0007\u00f8\u0002\u0002\u0993",
    "\u0995\u0007\u0003\u0002\u0002\u0994\u0996\t\u001f\u0002\u0002\u0995",
    "\u0994\u0003\u0002\u0002\u0002\u0995\u0996\u0003\u0002\u0002\u0002\u0996",
    "\u0998\u0003\u0002\u0002\u0002\u0997\u0999\u0005\u00b2Z\u0002\u0998",
    "\u0997\u0003\u0002\u0002\u0002\u0998\u0999\u0003\u0002\u0002\u0002\u0999",
    "\u099a\u0003\u0002\u0002\u0002\u099a\u099b\u0007e\u0002\u0002\u099b",
    "\u099c\u0005\u00b2Z\u0002\u099c\u099d\u0007\u0004\u0002\u0002\u099d",
    "\u09ac\u0003\u0002\u0002\u0002\u099e\u099f\u0007\u00af\u0002\u0002\u099f",
    "\u09a0\u0007\u0003\u0002\u0002\u09a0\u09a1\u0005\u00b2Z\u0002\u09a1",
    "\u09a2\u0007\u00b6\u0002\u0002\u09a2\u09a3\u0005\u00b2Z\u0002\u09a3",
    "\u09a4\u0007e\u0002\u0002\u09a4\u09a7\u0005\u00b2Z\u0002\u09a5\u09a6",
    "\u0007a\u0002\u0002\u09a6\u09a8\u0005\u00b2Z\u0002\u09a7\u09a5\u0003",
    "\u0002\u0002\u0002\u09a7\u09a8\u0003\u0002\u0002\u0002\u09a8\u09a9\u0003",
    "\u0002\u0002\u0002\u09a9\u09aa\u0007\u0004\u0002\u0002\u09aa\u09ac\u0003",
    "\u0002\u0002\u0002\u09ab\u08fd\u0003\u0002\u0002\u0002\u09ab\u08ff\u0003",
    "\u0002\u0002\u0002\u09ab\u090b\u0003\u0002\u0002\u0002\u09ab\u0918\u0003",
    "\u0002\u0002\u0002\u09ab\u091f\u0003\u0002\u0002\u0002\u09ab\u092c\u0003",
    "\u0002\u0002\u0002\u09ab\u0935\u0003\u0002\u0002\u0002\u09ab\u093e\u0003",
    "\u0002\u0002\u0002\u09ab\u0945\u0003\u0002\u0002\u0002\u09ab\u0946\u0003",
    "\u0002\u0002\u0002\u09ab\u0947\u0003\u0002\u0002\u0002\u09ab\u094b\u0003",
    "\u0002\u0002\u0002\u09ab\u0955\u0003\u0002\u0002\u0002\u09ab\u0959\u0003",
    "\u0002\u0002\u0002\u09ab\u096d\u0003\u0002\u0002\u0002\u09ab\u0970\u0003",
    "\u0002\u0002\u0002\u09ab\u097b\u0003\u0002\u0002\u0002\u09ab\u097c\u0003",
    "\u0002\u0002\u0002\u09ab\u0980\u0003\u0002\u0002\u0002\u09ab\u0987\u0003",
    "\u0002\u0002\u0002\u09ab\u0992\u0003\u0002\u0002\u0002\u09ab\u099e\u0003",
    "\u0002\u0002\u0002\u09ac\u09b7\u0003\u0002\u0002\u0002\u09ad\u09ae\f",
    "\n\u0002\u0002\u09ae\u09af\u0007\n\u0002\u0002\u09af\u09b0\u0005\u00b2",
    "Z\u0002\u09b0\u09b1\u0007\u000b\u0002\u0002\u09b1\u09b6\u0003\u0002",
    "\u0002\u0002\u09b2\u09b3\f\b\u0002\u0002\u09b3\u09b4\u0007\u0006\u0002",
    "\u0002\u09b4\u09b6\u0005\u00ecw\u0002\u09b5\u09ad\u0003\u0002\u0002",
    "\u0002\u09b5\u09b2\u0003\u0002\u0002\u0002\u09b6\u09b9\u0003\u0002\u0002",
    "\u0002\u09b7\u09b5\u0003\u0002\u0002\u0002\u09b7\u09b8\u0003\u0002\u0002",
    "\u0002\u09b8\u00b5\u0003\u0002\u0002\u0002\u09b9\u09b7\u0003\u0002\u0002",
    "\u0002\u09ba\u09c7\u0007\u00a1\u0002\u0002\u09bb\u09c7\u0005\u00c0a",
    "\u0002\u09bc\u09bd\u0005\u00ecw\u0002\u09bd\u09be\u0007\u0125\u0002",
    "\u0002\u09be\u09c7\u0003\u0002\u0002\u0002\u09bf\u09c7\u0005\u00f2z",
    "\u0002\u09c0\u09c7\u0005\u00be`\u0002\u09c1\u09c3\u0007\u0125\u0002",
    "\u0002\u09c2\u09c1\u0003\u0002\u0002\u0002\u09c3\u09c4\u0003\u0002\u0002",
    "\u0002\u09c4\u09c2\u0003\u0002\u0002\u0002\u09c4\u09c5\u0003\u0002\u0002",
    "\u0002\u09c5\u09c7\u0003\u0002\u0002\u0002\u09c6\u09ba\u0003\u0002\u0002",
    "\u0002\u09c6\u09bb\u0003\u0002\u0002\u0002\u09c6\u09bc\u0003\u0002\u0002",
    "\u0002\u09c6\u09bf\u0003\u0002\u0002\u0002\u09c6\u09c0\u0003\u0002\u0002",
    "\u0002\u09c6\u09c2\u0003\u0002\u0002\u0002\u09c7\u00b7\u0003\u0002\u0002",
    "\u0002\u09c8\u09c9\t \u0002\u0002\u09c9\u00b9\u0003\u0002\u0002\u0002",
    "\u09ca\u09cb\t!\u0002\u0002\u09cb\u00bb\u0003\u0002\u0002\u0002\u09cc",
    "\u09cd\t\"\u0002\u0002\u09cd\u00bd\u0003\u0002\u0002\u0002\u09ce\u09cf",
    "\t#\u0002\u0002\u09cf\u00bf\u0003\u0002\u0002\u0002\u09d0\u09d2\u0006",
    "a\u0012\u0002\u09d1\u09d3\u0007{\u0002\u0002\u09d2\u09d1\u0003\u0002",
    "\u0002\u0002\u09d2\u09d3\u0003\u0002\u0002\u0002\u09d3\u09d5\u0003\u0002",
    "\u0002\u0002\u09d4\u09d6\u0005\u00c2b\u0002\u09d5\u09d4\u0003\u0002",
    "\u0002\u0002\u09d6\u09d7\u0003\u0002\u0002\u0002\u09d7\u09d5\u0003\u0002",
    "\u0002\u0002\u09d7\u09d8\u0003\u0002\u0002\u0002\u09d8\u09e2\u0003\u0002",
    "\u0002\u0002\u09d9\u09da\u0006a\u0013\u0002\u09da\u09de\u0007{\u0002",
    "\u0002\u09db\u09dd\u0005\u00c2b\u0002\u09dc\u09db\u0003\u0002\u0002",
    "\u0002\u09dd\u09e0\u0003\u0002\u0002\u0002\u09de\u09dc\u0003\u0002\u0002",
    "\u0002\u09de\u09df\u0003\u0002\u0002\u0002\u09df\u09e2\u0003\u0002\u0002",
    "\u0002\u09e0\u09de\u0003\u0002\u0002\u0002\u09e1\u09d0\u0003\u0002\u0002",
    "\u0002\u09e1\u09d9\u0003\u0002\u0002\u0002\u09e2\u00c1\u0003\u0002\u0002",
    "\u0002\u09e3\u09e4\u0005\u00c4c\u0002\u09e4\u09e7\u0005\u00c6d\u0002",
    "\u09e5\u09e6\u0007\u00f2\u0002\u0002\u09e6\u09e8\u0005\u00c6d\u0002",
    "\u09e7\u09e5\u0003\u0002\u0002\u0002\u09e7\u09e8\u0003\u0002\u0002\u0002",
    "\u09e8\u00c3\u0003\u0002\u0002\u0002\u09e9\u09eb\t$\u0002\u0002\u09ea",
    "\u09e9\u0003\u0002\u0002\u0002\u09ea\u09eb\u0003\u0002\u0002\u0002\u09eb",
    "\u09ec\u0003\u0002\u0002\u0002\u09ec\u09ef\t\u0012\u0002\u0002\u09ed",
    "\u09ef\u0007\u0125\u0002\u0002\u09ee\u09ea\u0003\u0002\u0002\u0002\u09ee",
    "\u09ed\u0003\u0002\u0002\u0002\u09ef\u00c5\u0003\u0002\u0002\u0002\u09f0",
    "\u09f1\t%\u0002\u0002\u09f1\u00c7\u0003\u0002\u0002\u0002\u09f2\u09f6",
    "\u0007^\u0002\u0002\u09f3\u09f4\u0007\u000e\u0002\u0002\u09f4\u09f6",
    "\u0005\u00e6t\u0002\u09f5\u09f2\u0003\u0002\u0002\u0002\u09f5\u09f3",
    "\u0003\u0002\u0002\u0002\u09f6\u00c9\u0003\u0002\u0002\u0002\u09f7\u09f8",
    "\u0007\u0016\u0002\u0002\u09f8\u09f9\u0007\u0116\u0002\u0002\u09f9\u09fa",
    "\u0005\u00caf\u0002\u09fa\u09fb\u0007\u0118\u0002\u0002\u09fb\u0a1a",
    "\u0003\u0002\u0002\u0002\u09fc\u09fd\u0007\u0092\u0002\u0002\u09fd\u09fe",
    "\u0007\u0116\u0002\u0002\u09fe\u09ff\u0005\u00caf\u0002\u09ff\u0a00",
    "\u0007\u0005\u0002\u0002\u0a00\u0a01\u0005\u00caf\u0002\u0a01\u0a02",
    "\u0007\u0118\u0002\u0002\u0a02\u0a1a\u0003\u0002\u0002\u0002\u0a03\u0a0a",
    "\u0007\u00e8\u0002\u0002\u0a04\u0a06\u0007\u0116\u0002\u0002\u0a05\u0a07",
    "\u0005\u00d4k\u0002\u0a06\u0a05\u0003\u0002\u0002\u0002\u0a06\u0a07",
    "\u0003\u0002\u0002\u0002\u0a07\u0a08\u0003\u0002\u0002\u0002\u0a08\u0a0b",
    "\u0007\u0118\u0002\u0002\u0a09\u0a0b\u0007\u0114\u0002\u0002\u0a0a\u0a04",
    "\u0003\u0002\u0002\u0002\u0a0a\u0a09\u0003\u0002\u0002\u0002\u0a0b\u0a1a",
    "\u0003\u0002\u0002\u0002\u0a0c\u0a17\u0005\u00ecw\u0002\u0a0d\u0a0e",
    "\u0007\u0003\u0002\u0002\u0a0e\u0a13\u0007\u0129\u0002\u0002\u0a0f\u0a10",
    "\u0007\u0005\u0002\u0002\u0a10\u0a12\u0007\u0129\u0002\u0002\u0a11\u0a0f",
    "\u0003\u0002\u0002\u0002\u0a12\u0a15\u0003\u0002\u0002\u0002\u0a13\u0a11",
    "\u0003\u0002\u0002\u0002\u0a13\u0a14\u0003\u0002\u0002\u0002\u0a14\u0a16",
    "\u0003\u0002\u0002\u0002\u0a15\u0a13\u0003\u0002\u0002\u0002\u0a16\u0a18",
    "\u0007\u0004\u0002\u0002\u0a17\u0a0d\u0003\u0002\u0002\u0002\u0a17\u0a18",
    "\u0003\u0002\u0002\u0002\u0a18\u0a1a\u0003\u0002\u0002\u0002\u0a19\u09f7",
    "\u0003\u0002\u0002\u0002\u0a19\u09fc\u0003\u0002\u0002\u0002\u0a19\u0a03",
    "\u0003\u0002\u0002\u0002\u0a19\u0a0c\u0003\u0002\u0002\u0002\u0a1a\u00cb",
    "\u0003\u0002\u0002\u0002\u0a1b\u0a20\u0005\u00ceh\u0002\u0a1c\u0a1d",
    "\u0007\u0005\u0002\u0002\u0a1d\u0a1f\u0005\u00ceh\u0002\u0a1e\u0a1c",
    "\u0003\u0002\u0002\u0002\u0a1f\u0a22\u0003\u0002\u0002\u0002\u0a20\u0a1e",
    "\u0003\u0002\u0002\u0002\u0a20\u0a21\u0003\u0002\u0002\u0002\u0a21\u00cd",
    "\u0003\u0002\u0002\u0002\u0a22\u0a20\u0003\u0002\u0002\u0002\u0a23\u0a24",
    "\u0005\u00e6t\u0002\u0a24\u0a27\u0005\u00caf\u0002\u0a25\u0a26\u0007",
    ".\u0002\u0002\u0a26\u0a28\u0007\u0125\u0002\u0002\u0a27\u0a25\u0003",
    "\u0002\u0002\u0002\u0a27\u0a28\u0003\u0002\u0002\u0002\u0a28\u0a2a\u0003",
    "\u0002\u0002\u0002\u0a29\u0a2b\u0005\u00c8e\u0002\u0a2a\u0a29\u0003",
    "\u0002\u0002\u0002\u0a2a\u0a2b\u0003\u0002\u0002\u0002\u0a2b\u00cf\u0003",
    "\u0002\u0002\u0002\u0a2c\u0a31\u0005\u00d2j\u0002\u0a2d\u0a2e\u0007",
    "\u0005\u0002\u0002\u0a2e\u0a30\u0005\u00d2j\u0002\u0a2f\u0a2d\u0003",
    "\u0002\u0002\u0002\u0a30\u0a33\u0003\u0002\u0002\u0002\u0a31\u0a2f\u0003",
    "\u0002\u0002\u0002\u0a31\u0a32\u0003\u0002\u0002\u0002\u0a32\u00d1\u0003",
    "\u0002\u0002\u0002\u0a33\u0a31\u0003\u0002\u0002\u0002\u0a34\u0a35\u0005",
    "\u00e8u\u0002\u0a35\u0a38\u0005\u00caf\u0002\u0a36\u0a37\u0007.\u0002",
    "\u0002\u0a37\u0a39\u0007\u0125\u0002\u0002\u0a38\u0a36\u0003\u0002\u0002",
    "\u0002\u0a38\u0a39\u0003\u0002\u0002\u0002\u0a39\u00d3\u0003\u0002\u0002",
    "\u0002\u0a3a\u0a3f\u0005\u00d6l\u0002\u0a3b\u0a3c\u0007\u0005\u0002",
    "\u0002\u0a3c\u0a3e\u0005\u00d6l\u0002\u0a3d\u0a3b\u0003\u0002\u0002",
    "\u0002\u0a3e\u0a41\u0003\u0002\u0002\u0002\u0a3f\u0a3d\u0003\u0002\u0002",
    "\u0002\u0a3f\u0a40\u0003\u0002\u0002\u0002\u0a40\u00d5\u0003\u0002\u0002",
    "\u0002\u0a41\u0a3f\u0003\u0002\u0002\u0002\u0a42\u0a43\u0005\u00ecw",
    "\u0002\u0a43\u0a44\u0007\f\u0002\u0002\u0a44\u0a47\u0005\u00caf\u0002",
    "\u0a45\u0a46\u0007.\u0002\u0002\u0a46\u0a48\u0007\u0125\u0002\u0002",
    "\u0a47\u0a45\u0003\u0002\u0002\u0002\u0a47\u0a48\u0003\u0002\u0002\u0002",
    "\u0a48\u00d7\u0003\u0002\u0002\u0002\u0a49\u0a4a\u0007\u010c\u0002\u0002",
    "\u0a4a\u0a4b\u0005\u00acW\u0002\u0a4b\u0a4c\u0007\u00f1\u0002\u0002",
    "\u0a4c\u0a4d\u0005\u00acW\u0002\u0a4d\u00d9\u0003\u0002\u0002\u0002",
    "\u0a4e\u0a4f\u0007\u010e\u0002\u0002\u0a4f\u0a54\u0005\u00dco\u0002",
    "\u0a50\u0a51\u0007\u0005\u0002\u0002\u0a51\u0a53\u0005\u00dco\u0002",
    "\u0a52\u0a50\u0003\u0002\u0002\u0002\u0a53\u0a56\u0003\u0002\u0002\u0002",
    "\u0a54\u0a52\u0003\u0002\u0002\u0002\u0a54\u0a55\u0003\u0002\u0002\u0002",
    "\u0a55\u00db\u0003\u0002\u0002\u0002\u0a56\u0a54\u0003\u0002\u0002\u0002",
    "\u0a57\u0a58\u0005\u00e8u\u0002\u0a58\u0a59\u0007\u0017\u0002\u0002",
    "\u0a59\u0a5a\u0005\u00dep\u0002\u0a5a\u00dd\u0003\u0002\u0002\u0002",
    "\u0a5b\u0a8a\u0005\u00e8u\u0002\u0a5c\u0a5d\u0007\u0003\u0002\u0002",
    "\u0a5d\u0a5e\u0005\u00e8u\u0002\u0a5e\u0a5f\u0007\u0004\u0002\u0002",
    "\u0a5f\u0a8a\u0003\u0002\u0002\u0002\u0a60\u0a83\u0007\u0003\u0002\u0002",
    "\u0a61\u0a62\u0007\'\u0002\u0002\u0a62\u0a63\u0007\u001f\u0002\u0002",
    "\u0a63\u0a68\u0005\u00acW\u0002\u0a64\u0a65\u0007\u0005\u0002\u0002",
    "\u0a65\u0a67\u0005\u00acW\u0002\u0a66\u0a64\u0003\u0002\u0002\u0002",
    "\u0a67\u0a6a\u0003\u0002\u0002\u0002\u0a68\u0a66\u0003\u0002\u0002\u0002",
    "\u0a68\u0a69\u0003\u0002\u0002\u0002\u0a69\u0a84\u0003\u0002\u0002\u0002",
    "\u0a6a\u0a68\u0003\u0002\u0002\u0002\u0a6b\u0a6c\t&\u0002\u0002\u0a6c",
    "\u0a6d\u0007\u001f\u0002\u0002\u0a6d\u0a72\u0005\u00acW\u0002\u0a6e",
    "\u0a6f\u0007\u0005\u0002\u0002\u0a6f\u0a71\u0005\u00acW\u0002\u0a70",
    "\u0a6e\u0003\u0002\u0002\u0002\u0a71\u0a74\u0003\u0002\u0002\u0002\u0a72",
    "\u0a70\u0003\u0002\u0002\u0002\u0a72\u0a73\u0003\u0002\u0002\u0002\u0a73",
    "\u0a76\u0003\u0002\u0002\u0002\u0a74\u0a72\u0003\u0002\u0002\u0002\u0a75",
    "\u0a6b\u0003\u0002\u0002\u0002\u0a75\u0a76\u0003\u0002\u0002\u0002\u0a76",
    "\u0a81\u0003\u0002\u0002\u0002\u0a77\u0a78\t\'\u0002\u0002\u0a78\u0a79",
    "\u0007\u001f\u0002\u0002\u0a79\u0a7e\u0005R*\u0002\u0a7a\u0a7b\u0007",
    "\u0005\u0002\u0002\u0a7b\u0a7d\u0005R*\u0002\u0a7c\u0a7a\u0003\u0002",
    "\u0002\u0002\u0a7d\u0a80\u0003\u0002\u0002\u0002\u0a7e\u0a7c\u0003\u0002",
    "\u0002\u0002\u0a7e\u0a7f\u0003\u0002\u0002\u0002\u0a7f\u0a82\u0003\u0002",
    "\u0002\u0002\u0a80\u0a7e\u0003\u0002\u0002\u0002\u0a81\u0a77\u0003\u0002",
    "\u0002\u0002\u0a81\u0a82\u0003\u0002\u0002\u0002\u0a82\u0a84\u0003\u0002",
    "\u0002\u0002\u0a83\u0a61\u0003\u0002\u0002\u0002\u0a83\u0a75\u0003\u0002",
    "\u0002\u0002\u0a84\u0a86\u0003\u0002\u0002\u0002\u0a85\u0a87\u0005\u00e0",
    "q\u0002\u0a86\u0a85\u0003\u0002\u0002\u0002\u0a86\u0a87\u0003\u0002",
    "\u0002\u0002\u0a87\u0a88\u0003\u0002\u0002\u0002\u0a88\u0a8a\u0007\u0004",
    "\u0002\u0002\u0a89\u0a5b\u0003\u0002\u0002\u0002\u0a89\u0a5c\u0003\u0002",
    "\u0002\u0002\u0a89\u0a60\u0003\u0002\u0002\u0002\u0a8a\u00df\u0003\u0002",
    "\u0002\u0002\u0a8b\u0a8c\u0007\u00bd\u0002\u0002\u0a8c\u0a9c\u0005\u00e2",
    "r\u0002\u0a8d\u0a8e\u0007\u00d2\u0002\u0002\u0a8e\u0a9c\u0005\u00e2",
    "r\u0002\u0a8f\u0a90\u0007\u00bd\u0002\u0002\u0a90\u0a91\u0007\u001b",
    "\u0002\u0002\u0a91\u0a92\u0005\u00e2r\u0002\u0a92\u0a93\u0007\u0012",
    "\u0002\u0002\u0a93\u0a94\u0005\u00e2r\u0002\u0a94\u0a9c\u0003\u0002",
    "\u0002\u0002\u0a95\u0a96\u0007\u00d2\u0002\u0002\u0a96\u0a97\u0007\u001b",
    "\u0002\u0002\u0a97\u0a98\u0005\u00e2r\u0002\u0a98\u0a99\u0007\u0012",
    "\u0002\u0002\u0a99\u0a9a\u0005\u00e2r\u0002\u0a9a\u0a9c\u0003\u0002",
    "\u0002\u0002\u0a9b\u0a8b\u0003\u0002\u0002\u0002\u0a9b\u0a8d\u0003\u0002",
    "\u0002\u0002\u0a9b\u0a8f\u0003\u0002\u0002\u0002\u0a9b\u0a95\u0003\u0002",
    "\u0002\u0002\u0a9c\u00e1\u0003\u0002\u0002\u0002\u0a9d\u0a9e\u0007\u00fd",
    "\u0002\u0002\u0a9e\u0aa5\t(\u0002\u0002\u0a9f\u0aa0\u00079\u0002\u0002",
    "\u0aa0\u0aa5\u0007\u00d1\u0002\u0002\u0aa1\u0aa2\u0005\u00acW\u0002",
    "\u0aa2\u0aa3\t(\u0002\u0002\u0aa3\u0aa5\u0003\u0002\u0002\u0002\u0aa4",
    "\u0a9d\u0003\u0002\u0002\u0002\u0aa4\u0a9f\u0003\u0002\u0002\u0002\u0aa4",
    "\u0aa1\u0003\u0002\u0002\u0002\u0aa5\u00e3\u0003\u0002\u0002\u0002\u0aa6",
    "\u0aab\u0005\u00e6t\u0002\u0aa7\u0aa8\u0007\u0005\u0002\u0002\u0aa8",
    "\u0aaa\u0005\u00e6t\u0002\u0aa9\u0aa7\u0003\u0002\u0002\u0002\u0aaa",
    "\u0aad\u0003\u0002\u0002\u0002\u0aab\u0aa9\u0003\u0002\u0002\u0002\u0aab",
    "\u0aac\u0003\u0002\u0002\u0002\u0aac\u00e5\u0003\u0002\u0002\u0002\u0aad",
    "\u0aab\u0003\u0002\u0002\u0002\u0aae\u0ab3\u0005\u00ecw\u0002\u0aaf",
    "\u0ab0\u0007\u0006\u0002\u0002\u0ab0\u0ab2\u0005\u00ecw\u0002\u0ab1",
    "\u0aaf\u0003\u0002\u0002\u0002\u0ab2\u0ab5\u0003\u0002\u0002\u0002\u0ab3",
    "\u0ab1\u0003\u0002\u0002\u0002\u0ab3\u0ab4\u0003\u0002\u0002\u0002\u0ab4",
    "\u00e7\u0003\u0002\u0002\u0002\u0ab5\u0ab3\u0003\u0002\u0002\u0002\u0ab6",
    "\u0ab7\u0005\u00ecw\u0002\u0ab7\u0ab8\u0005\u00eav\u0002\u0ab8\u00e9",
    "\u0003\u0002\u0002\u0002\u0ab9\u0aba\u0007\u011b\u0002\u0002\u0aba\u0abc",
    "\u0005\u00ecw\u0002\u0abb\u0ab9\u0003\u0002\u0002\u0002\u0abc\u0abd",
    "\u0003\u0002\u0002\u0002\u0abd\u0abb\u0003\u0002\u0002\u0002\u0abd\u0abe",
    "\u0003\u0002\u0002\u0002\u0abe\u0ac1\u0003\u0002\u0002\u0002\u0abf\u0ac1",
    "\u0003\u0002\u0002\u0002\u0ac0\u0abb\u0003\u0002\u0002\u0002\u0ac0\u0abf",
    "\u0003\u0002\u0002\u0002\u0ac1\u00eb\u0003\u0002\u0002\u0002\u0ac2\u0ac6",
    "\u0005\u00eex\u0002\u0ac3\u0ac4\u0006w\u0014\u0002\u0ac4\u0ac6\u0005",
    "\u00f6|\u0002\u0ac5\u0ac2\u0003\u0002\u0002\u0002\u0ac5\u0ac3\u0003",
    "\u0002\u0002\u0002\u0ac6\u00ed\u0003\u0002\u0002\u0002\u0ac7\u0ace\u0007",
    "\u012d\u0002\u0002\u0ac8\u0ace\u0005\u00f0y\u0002\u0ac9\u0aca\u0006",
    "x\u0015\u0002\u0aca\u0ace\u0005\u00f4{\u0002\u0acb\u0acc\u0006x\u0016",
    "\u0002\u0acc\u0ace\u0005\u00f8}\u0002\u0acd\u0ac7\u0003\u0002\u0002",
    "\u0002\u0acd\u0ac8\u0003\u0002\u0002\u0002\u0acd\u0ac9\u0003\u0002\u0002",
    "\u0002\u0acd\u0acb\u0003\u0002\u0002\u0002\u0ace\u00ef\u0003\u0002\u0002",
    "\u0002\u0acf\u0ad0\u0007\u012e\u0002\u0002\u0ad0\u00f1\u0003\u0002\u0002",
    "\u0002\u0ad1\u0ad3\u0007\u011b\u0002\u0002\u0ad2\u0ad1\u0003\u0002\u0002",
    "\u0002\u0ad2\u0ad3\u0003\u0002\u0002\u0002\u0ad3\u0ad4\u0003\u0002\u0002",
    "\u0002\u0ad4\u0aee\u0007\u012a\u0002\u0002\u0ad5\u0ad7\u0007\u011b\u0002",
    "\u0002\u0ad6\u0ad5\u0003\u0002\u0002\u0002\u0ad6\u0ad7\u0003\u0002\u0002",
    "\u0002\u0ad7\u0ad8\u0003\u0002\u0002\u0002\u0ad8\u0aee\u0007\u0129\u0002",
    "\u0002\u0ad9\u0adb\u0007\u011b\u0002\u0002\u0ada\u0ad9\u0003\u0002\u0002",
    "\u0002\u0ada\u0adb\u0003\u0002\u0002\u0002\u0adb\u0adc\u0003\u0002\u0002",
    "\u0002\u0adc\u0aee\u0007\u0126\u0002\u0002\u0add\u0adf\u0007\u011b\u0002",
    "\u0002\u0ade\u0add\u0003\u0002\u0002\u0002\u0ade\u0adf\u0003\u0002\u0002",
    "\u0002\u0adf\u0ae0\u0003\u0002\u0002\u0002\u0ae0\u0aee\u0007\u0127\u0002",
    "\u0002\u0ae1\u0ae3\u0007\u011b\u0002\u0002\u0ae2\u0ae1\u0003\u0002\u0002",
    "\u0002\u0ae2\u0ae3\u0003\u0002\u0002\u0002\u0ae3\u0ae4\u0003\u0002\u0002",
    "\u0002\u0ae4\u0aee\u0007\u0128\u0002\u0002\u0ae5\u0ae7\u0007\u011b\u0002",
    "\u0002\u0ae6\u0ae5\u0003\u0002\u0002\u0002\u0ae6\u0ae7\u0003\u0002\u0002",
    "\u0002\u0ae7\u0ae8\u0003\u0002\u0002\u0002\u0ae8\u0aee\u0007\u012b\u0002",
    "\u0002\u0ae9\u0aeb\u0007\u011b\u0002\u0002\u0aea\u0ae9\u0003\u0002\u0002",
    "\u0002\u0aea\u0aeb\u0003\u0002\u0002\u0002\u0aeb\u0aec\u0003\u0002\u0002",
    "\u0002\u0aec\u0aee\u0007\u012c\u0002\u0002\u0aed\u0ad2\u0003\u0002\u0002",
    "\u0002\u0aed\u0ad6\u0003\u0002\u0002\u0002\u0aed\u0ada\u0003\u0002\u0002",
    "\u0002\u0aed\u0ade\u0003\u0002\u0002\u0002\u0aed\u0ae2\u0003\u0002\u0002",
    "\u0002\u0aed\u0ae6\u0003\u0002\u0002\u0002\u0aed\u0aea\u0003\u0002\u0002",
    "\u0002\u0aee\u00f3\u0003\u0002\u0002\u0002\u0aef\u0af0\t)\u0002\u0002",
    "\u0af0\u00f5\u0003\u0002\u0002\u0002\u0af1\u0af2\t*\u0002\u0002\u0af2",
    "\u00f7\u0003\u0002\u0002\u0002\u0af3\u0af4\t+\u0002\u0002\u0af4\u00f9",
    "\u0003\u0002\u0002\u0002\u0171\u0111\u0116\u011e\u0127\u0129\u013d\u0141",
    "\u0147\u014a\u014d\u0154\u0162\u0164\u0168\u016b\u0172\u017f\u0188\u018a",
    "\u018e\u0191\u0198\u019e\u01a5\u01b3\u01b5\u01b9\u01bc\u01c2\u01cd\u020d",
    "\u0216\u021b\u021f\u0222\u0228\u022c\u0231\u0237\u023f\u0245\u0252\u0257",
    "\u0260\u0265\u0275\u027c\u0280\u0288\u028f\u02a9\u02ad\u02b3\u02b9\u02bc",
    "\u02bf\u02c5\u02c9\u02d2\u02d4\u02dd\u02e0\u02e9\u02ee\u02f4\u02fb\u02fe",
    "\u0304\u030f\u0312\u0316\u031b\u0320\u0327\u032a\u032d\u0334\u0339\u0342",
    "\u034a\u0350\u0354\u0358\u035c\u035e\u0367\u036d\u0373\u0376\u037a\u037d",
    "\u0381\u038c\u038f\u0393\u0399\u039c\u039f\u03a5\u03ad\u03b2\u03b8\u03be",
    "\u03c9\u03d1\u03d8\u03e1\u03e8\u03ee\u03f1\u03f9\u03fd\u0404\u0478\u0480",
    "\u0488\u0491\u049d\u04a1\u04a4\u04aa\u04b0\u04bc\u04c8\u04cd\u04d3\u04db",
    "\u04e2\u04e4\u04e9\u04ed\u04f2\u04f7\u04fc\u04ff\u0504\u0508\u050d\u050f",
    "\u0513\u051c\u0524\u052d\u0534\u053d\u0542\u0545\u0554\u055b\u055e\u0565",
    "\u0569\u056f\u0577\u0582\u058d\u0594\u059a\u05a7\u05a9\u05b2\u05b5\u05be",
    "\u05c1\u05ca\u05cd\u05d6\u05d9\u05dc\u05e1\u05e3\u05ef\u05f6\u05fd\u0600",
    "\u0602\u060e\u0612\u0616\u061c\u0620\u0628\u062c\u062f\u0632\u0635\u0639",
    "\u063d\u0640\u0644\u0649\u064d\u0650\u0653\u0656\u0658\u0664\u0667\u066b",
    "\u0675\u0679\u067b\u067e\u0682\u0688\u068c\u0696\u06a6\u06ab\u06b8\u06bd",
    "\u06c5\u06cb\u06cf\u06d8\u06e7\u06ec\u06f8\u06fd\u0705\u0708\u070c\u071a",
    "\u0727\u072c\u0730\u0733\u0738\u0741\u0744\u0749\u0750\u0753\u075b\u0762",
    "\u0769\u076c\u0771\u0774\u0779\u077d\u0780\u0783\u0789\u078e\u0793\u07a5",
    "\u07a7\u07aa\u07b5\u07be\u07c5\u07cd\u07d5\u07d9\u07e1\u07e9\u07ef\u07f7",
    "\u0803\u0806\u080c\u0810\u0812\u081b\u0827\u0829\u0830\u0837\u083d\u0843",
    "\u0845\u084c\u0852\u0859\u085f\u0863\u0865\u086c\u0875\u0882\u0887\u088b",
    "\u0899\u089b\u08a3\u08a5\u08a9\u08b1\u08ba\u08c0\u08c8\u08ce\u08d3\u08d8",
    "\u08dd\u08e3\u08f8\u08fa\u0903\u0907\u0910\u0914\u0926\u0929\u0931\u093a",
    "\u0951\u095c\u0963\u0966\u096b\u0976\u098e\u0995\u0998\u09a7\u09ab\u09b5",
    "\u09b7\u09c4\u09c6\u09d2\u09d7\u09de\u09e1\u09e7\u09ea\u09ee\u09f5\u0a06",
    "\u0a0a\u0a13\u0a17\u0a19\u0a20\u0a27\u0a2a\u0a31\u0a38\u0a3f\u0a47\u0a54",
    "\u0a68\u0a72\u0a75\u0a7e\u0a81\u0a83\u0a86\u0a89\u0a9b\u0aa4\u0aab\u0ab3",
    "\u0abd\u0ac0\u0ac5\u0acd\u0ad2\u0ad6\u0ada\u0ade\u0ae2\u0ae6\u0aea\u0aed"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'('", "')'", "','", "'.'", "'/*+'", "'*/'",
                     "'->'", "'['", "']'", "':'", "'ADD'", "'AFTER'", "'ALL'",
                     "'ALTER'", "'ANALYZE'", "'AND'", "'ANTI'", "'ANY'",
                     "'ARCHIVE'", "'ARRAY'", "'AS'", "'ASC'", "'AT'", "'AUTHORIZATION'",
                     "'BETWEEN'", "'BOTH'", "'BUCKET'", "'BUCKETS'", "'BY'",
                     "'CACHE'", "'CASCADE'", "'CASE'", "'CAST'", "'CHANGE'",
                     "'CHECK'", "'CLEAR'", "'CLUSTER'", "'CLUSTERED'", "'CODEGEN'",
                     "'COLLATE'", "'COLLECTION'", "'COLUMN'", "'COLUMNS'",
                     "'COMMENT'", "'COMMIT'", "'COMPACT'", "'COMPACTIONS'",
                     "'COMPUTE'", "'CONCATENATE'", "'CONSTRAINT'", "'COST'",
                     "'CREATE'", "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_DATE'",
                     "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_USER'",
                     "'DATA'", "'DATABASE'", null, "'DAY'", "'DAYS'", "'DBPROPERTIES'",
                     "'DEFINED'", "'DELETE'", "'DELIMITED'", "'DESC'", "'DESCRIBE'",
                     "'DFS'", "'DIRECTORIES'", "'DIRECTORY'", "'DISTINCT'",
                     "'DISTRIBUTE'", "'DROP'", "'ELSE'", "'END'", "'ESCAPED'",
                     "'EXCEPT'", "'EXCHANGE'", "'EXISTS'", "'EXPLAIN'",
                     "'EXPORT'", "'EXTENDED'", "'EXTERNAL'", "'EXTRACT'",
                     "'FALSE'", "'FETCH'", "'FIELDS'", "'FILEFORMAT'", "'FIRST'",
                     "'FIRST_VALUE'", "'FOLLOWING'", "'FOR'", "'FOREIGN'",
                     "'FORMAT'", "'FORMATTED'", "'FROM'", "'FULL'", "'FUNCTION'",
                     "'FUNCTIONS'", "'GLOBAL'", "'GRANT'", "'GROUP'", "'GROUPING'",
                     "'HAVING'", "'HOUR'", "'HOURS'", "'IF'", "'IGNORE'",
                     "'IMPORT'", "'IN'", "'INDEX'", "'INDEXES'", "'INNER'",
                     "'INPATH'", "'INPUTFORMAT'", "'INSERT'", "'INTERSECT'",
                     "'INTERVAL'", "'INTO'", "'IS'", "'ITEMS'", "'JOIN'",
                     "'KEYS'", "'LAST'", "'LAST_VALUE'", "'LATERAL'", "'LAZY'",
                     "'LEADING'", "'LEFT'", "'LIKE'", "'LIMIT'", "'LINES'",
                     "'LIST'", "'LOAD'", "'LOCAL'", "'LOCATION'", "'LOCK'",
                     "'LOCKS'", "'LOGICAL'", "'MACRO'", "'MAP'", "'MICROSECOND'",
                     "'MICROSECONDS'", "'MILLISECOND'", "'MILLISECONDS'",
                     "'MINUTE'", "'MINUTES'", "'MONTH'", "'MONTHS'", "'MSCK'",
                     "'NAMESPACE'", "'NAMESPACES'", "'NATURAL'", "'NO'",
                     null, "'NULL'", "'NULLS'", "'OF'", "'ON'", "'ONLY'",
                     "'OPTION'", "'OPTIONS'", "'OR'", "'ORDER'", "'OUT'",
                     "'OUTER'", "'OUTPUTFORMAT'", "'OVER'", "'OVERLAPS'",
                     "'OVERLAY'", "'OVERWRITE'", "'PARTITION'", "'PARTITIONED'",
                     "'PARTITIONS'", "'PERCENT'", "'PIVOT'", "'PLACING'",
                     "'POSITION'", "'PRECEDING'", "'PRIMARY'", "'PRINCIPALS'",
                     "'PURGE'", "'QUERY'", "'RANGE'", "'RECORDREADER'",
                     "'RECORDWRITER'", "'RECOVER'", "'REDUCE'", "'REFERENCES'",
                     "'REFRESH'", "'RENAME'", "'REPAIR'", "'REPLACE'", "'RESET'",
                     "'RESPECT'", "'RESTRICT'", "'REVOKE'", "'RIGHT'", null,
                     "'ROLE'", "'ROLES'", "'ROLLBACK'", "'ROLLUP'", "'ROW'",
                     "'ROWS'", "'SCHEMA'", "'SECOND'", "'SECONDS'", "'SELECT'",
                     "'SEMI'", "'SEPARATED'", "'SERDE'", "'SERDEPROPERTIES'",
                     "'SESSION_USER'", "'SET'", "'MINUS'", "'SETS'", "'SHOW'",
                     "'SKEWED'", "'SOME'", "'SORT'", "'SORTED'", "'START'",
                     "'STATISTICS'", "'STORED'", "'STRATIFY'", "'STRUCT'",
                     "'SUBSTR'", "'SUBSTRING'", "'TABLE'", "'TABLES'", "'TABLESAMPLE'",
                     "'TBLPROPERTIES'", null, "'TERMINATED'", "'THEN'",
                     "'TO'", "'TOUCH'", "'TRAILING'", "'TRANSACTION'", "'TRANSACTIONS'",
                     "'TRANSFORM'", "'TRIM'", "'TRUE'", "'TRUNCATE'", "'TYPE'",
                     "'UNARCHIVE'", "'UNBOUNDED'", "'UNCACHE'", "'UNION'",
                     "'UNIQUE'", "'UNKNOWN'", "'UNLOCK'", "'UNSET'", "'UPDATE'",
                     "'USE'", "'USER'", "'USING'", "'VALUES'", "'VIEW'",
                     "'WEEK'", "'WEEKS'", "'WHEN'", "'WHERE'", "'WINDOW'",
                     "'WITH'", "'YEAR'", "'YEARS'", null, "'<=>'", "'<>'",
                     "'!='", "'<'", null, "'>'", null, "'+'", "'-'", "'*'",
                     "'/'", "'%'", "'DIV'", "'~'", "'&'", "'|'", "'||'",
                     "'^'", null, null, null, null, null, null, null, null,
                     null, null, null, "'/**/'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null,
                      null, null, "ADD", "AFTER", "ALL", "ALTER", "ANALYZE",
                      "AND", "ANTI", "ANY", "ARCHIVE", "ARRAY", "AS", "ASC",
                      "AT", "AUTHORIZATION", "BETWEEN", "BOTH", "BUCKET",
                      "BUCKETS", "BY", "CACHE", "CASCADE", "CASE", "CAST",
                      "CHANGE", "CHECK", "CLEAR", "CLUSTER", "CLUSTERED",
                      "CODEGEN", "COLLATE", "COLLECTION", "COLUMN", "COLUMNS",
                      "COMMENT", "COMMIT", "COMPACT", "COMPACTIONS", "COMPUTE",
                      "CONCATENATE", "CONSTRAINT", "COST", "CREATE", "CROSS",
                      "CUBE", "CURRENT", "CURRENT_DATE", "CURRENT_TIME",
                      "CURRENT_TIMESTAMP", "CURRENT_USER", "DATA", "DATABASE",
                      "DATABASES", "DAY", "DAYS", "DBPROPERTIES", "DEFINED",
                      "DELETE", "DELIMITED", "DESC", "DESCRIBE", "DFS",
                      "DIRECTORIES", "DIRECTORY", "DISTINCT", "DISTRIBUTE",
                      "DROP", "ELSE", "END", "ESCAPED", "EXCEPT", "EXCHANGE",
                      "EXISTS", "EXPLAIN", "EXPORT", "EXTENDED", "EXTERNAL",
                      "EXTRACT", "FALSE", "FETCH", "FIELDS", "FILEFORMAT",
                      "FIRST", "FIRST_VALUE", "FOLLOWING", "FOR", "FOREIGN",
                      "FORMAT", "FORMATTED", "FROM", "FULL", "FUNCTION",
                      "FUNCTIONS", "GLOBAL", "GRANT", "GROUP", "GROUPING",
                      "HAVING", "HOUR", "HOURS", "IF", "IGNORE", "IMPORT",
                      "IN", "INDEX", "INDEXES", "INNER", "INPATH", "INPUTFORMAT",
                      "INSERT", "INTERSECT", "INTERVAL", "INTO", "IS", "ITEMS",
                      "JOIN", "KEYS", "LAST", "LAST_VALUE", "LATERAL", "LAZY",
                      "LEADING", "LEFT", "LIKE", "LIMIT", "LINES", "LIST",
                      "LOAD", "LOCAL", "LOCATION", "LOCK", "LOCKS", "LOGICAL",
                      "MACRO", "MAP", "MICROSECOND", "MICROSECONDS", "MILLISECOND",
                      "MILLISECONDS", "MINUTE", "MINUTES", "MONTH", "MONTHS",
                      "MSCK", "NAMESPACE", "NAMESPACES", "NATURAL", "NO",
                      "NOT", "NULL", "NULLS", "OF", "ON", "ONLY", "OPTION",
                      "OPTIONS", "OR", "ORDER", "OUT", "OUTER", "OUTPUTFORMAT",
                      "OVER", "OVERLAPS", "OVERLAY", "OVERWRITE", "PARTITION",
                      "PARTITIONED", "PARTITIONS", "PERCENTLIT", "PIVOT",
                      "PLACING", "POSITION", "PRECEDING", "PRIMARY", "PRINCIPALS",
                      "PURGE", "QUERY", "RANGE", "RECORDREADER", "RECORDWRITER",
                      "RECOVER", "REDUCE", "REFERENCES", "REFRESH", "RENAME",
                      "REPAIR", "REPLACE", "RESET", "RESPECT", "RESTRICT",
                      "REVOKE", "RIGHT", "RLIKE", "ROLE", "ROLES", "ROLLBACK",
                      "ROLLUP", "ROW", "ROWS", "SCHEMA", "SECOND", "SECONDS",
                      "SELECT", "SEMI", "SEPARATED", "SERDE", "SERDEPROPERTIES",
                      "SESSION_USER", "SET", "SETMINUS", "SETS", "SHOW",
                      "SKEWED", "SOME", "SORT", "SORTED", "START", "STATISTICS",
                      "STORED", "STRATIFY", "STRUCT", "SUBSTR", "SUBSTRING",
                      "TABLE", "TABLES", "TABLESAMPLE", "TBLPROPERTIES",
                      "TEMPORARY", "TERMINATED", "THEN", "TO", "TOUCH",
                      "TRAILING", "TRANSACTION", "TRANSACTIONS", "TRANSFORM",
                      "TRIM", "TRUE", "TRUNCATE", "TYPE", "UNARCHIVE", "UNBOUNDED",
                      "UNCACHE", "UNION", "UNIQUE", "UNKNOWN", "UNLOCK",
                      "UNSET", "UPDATE", "USE", "USER", "USING", "VALUES",
                      "VIEW", "WEEK", "WEEKS", "WHEN", "WHERE", "WINDOW",
                      "WITH", "YEAR", "YEARS", "EQ", "NSEQ", "NEQ", "NEQJ",
                      "LT", "LTE", "GT", "GTE", "PLUS", "MINUS", "ASTERISK",
                      "SLASH", "PERCENT", "DIV", "TILDE", "AMPERSAND", "PIPE",
                      "CONCAT_PIPE", "HAT", "STRING", "BIGINT_LITERAL",
                      "SMALLINT_LITERAL", "TINYINT_LITERAL", "INTEGER_VALUE",
                      "DECIMAL_VALUE", "DOUBLE_LITERAL", "BIGDECIMAL_LITERAL",
                      "IDENTIFIER", "BACKQUOTED_IDENTIFIER", "SIMPLE_COMMENT",
                      "BRACKETED_EMPTY_COMMENT", "BRACKETED_COMMENT", "WS",
                      "UNRECOGNIZED" ];

var ruleNames =  [ "singleStatement", "singleExpression", "singleTableIdentifier",
                   "singleMultipartIdentifier", "singleFunctionIdentifier",
                   "singleDataType", "singleTableSchema", "statement", "unsupportedHiveNativeCommands",
                   "createTableHeader", "replaceTableHeader", "bucketSpec",
                   "skewSpec", "locationSpec", "query", "insertInto", "partitionSpecLocation",
                   "partitionSpec", "partitionVal", "database", "describeFuncName",
                   "describeColName", "ctes", "namedQuery", "tableProvider",
                   "tablePropertyList", "tableProperty", "tablePropertyKey",
                   "tablePropertyValue", "constantList", "nestedConstantList",
                   "createFileFormat", "fileFormat", "storageHandler", "resource",
                   "dmlStatementNoWith", "queryOrganization", "multiInsertQueryBody",
                   "queryTerm", "queryPrimary", "sortItem", "fromStatement",
                   "fromStatementBody", "querySpecification", "transformClause",
                   "selectClause", "setClause", "assign", "whereClause",
                   "havingClause", "hint", "hintStatement", "fromClause",
                   "aggregationClause", "groupingSet", "pivotClause", "pivotColumn",
                   "pivotValue", "lateralView", "setQuantifier", "relation",
                   "joinRelation", "joinType", "joinCriteria", "sample",
                   "sampleMethod", "identifierList", "identifierSeq", "orderedIdentifierList",
                   "orderedIdentifier", "identifierCommentList", "identifierComment",
                   "relationPrimary", "inlineTable", "functionTable", "tableAlias",
                   "rowFormat", "multipartIdentifier", "tableIdentifier",
                   "functionIdentifier", "namedExpression", "namedExpressionSeq",
                   "transformList", "transform", "transformArgument", "expression",
                   "booleanExpression", "predicate", "valueExpression",
                   "primaryExpression", "constant", "comparisonOperator",
                   "arithmeticOperator", "predicateOperator", "booleanValue",
                   "interval", "intervalField", "intervalValue", "intervalUnit",
                   "colPosition", "dataType", "qualifiedColTypeWithPositionList",
                   "qualifiedColTypeWithPosition", "colTypeList", "colType",
                   "complexColTypeList", "complexColType", "whenClause",
                   "windowClause", "namedWindow", "windowSpec", "windowFrame",
                   "frameBound", "qualifiedNameList", "qualifiedName", "errorCapturingIdentifier",
                   "errorCapturingIdentifierExtra", "identifier", "strictIdentifier",
                   "quotedIdentifier", "number", "ansiNonReserved", "strictNonReserved",
                   "nonReserved" ];

SqlBaseParser.prototype.legacy_setops_precedence_enbled = false;

/**
 * When true, ANSI SQL parsing mode is enabled.
 */
SqlBaseParser.prototype.ansi = false;

function SqlBaseParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;


    return this;
}

SqlBaseParser.prototype = Object.create(antlr4.Parser.prototype);
SqlBaseParser.prototype.constructor = SqlBaseParser;

Object.defineProperty(SqlBaseParser.prototype, "atn", {
	get: function() {
		return atn;
	}
});

SqlBaseParser.EOF = antlr4.Token.EOF;
SqlBaseParser.T__0 = 1;
SqlBaseParser.T__1 = 2;
SqlBaseParser.T__2 = 3;
SqlBaseParser.T__3 = 4;
SqlBaseParser.T__4 = 5;
SqlBaseParser.T__5 = 6;
SqlBaseParser.T__6 = 7;
SqlBaseParser.T__7 = 8;
SqlBaseParser.T__8 = 9;
SqlBaseParser.T__9 = 10;
SqlBaseParser.ADD = 11;
SqlBaseParser.AFTER = 12;
SqlBaseParser.ALL = 13;
SqlBaseParser.ALTER = 14;
SqlBaseParser.ANALYZE = 15;
SqlBaseParser.AND = 16;
SqlBaseParser.ANTI = 17;
SqlBaseParser.ANY = 18;
SqlBaseParser.ARCHIVE = 19;
SqlBaseParser.ARRAY = 20;
SqlBaseParser.AS = 21;
SqlBaseParser.ASC = 22;
SqlBaseParser.AT = 23;
SqlBaseParser.AUTHORIZATION = 24;
SqlBaseParser.BETWEEN = 25;
SqlBaseParser.BOTH = 26;
SqlBaseParser.BUCKET = 27;
SqlBaseParser.BUCKETS = 28;
SqlBaseParser.BY = 29;
SqlBaseParser.CACHE = 30;
SqlBaseParser.CASCADE = 31;
SqlBaseParser.CASE = 32;
SqlBaseParser.CAST = 33;
SqlBaseParser.CHANGE = 34;
SqlBaseParser.CHECK = 35;
SqlBaseParser.CLEAR = 36;
SqlBaseParser.CLUSTER = 37;
SqlBaseParser.CLUSTERED = 38;
SqlBaseParser.CODEGEN = 39;
SqlBaseParser.COLLATE = 40;
SqlBaseParser.COLLECTION = 41;
SqlBaseParser.COLUMN = 42;
SqlBaseParser.COLUMNS = 43;
SqlBaseParser.COMMENT = 44;
SqlBaseParser.COMMIT = 45;
SqlBaseParser.COMPACT = 46;
SqlBaseParser.COMPACTIONS = 47;
SqlBaseParser.COMPUTE = 48;
SqlBaseParser.CONCATENATE = 49;
SqlBaseParser.CONSTRAINT = 50;
SqlBaseParser.COST = 51;
SqlBaseParser.CREATE = 52;
SqlBaseParser.CROSS = 53;
SqlBaseParser.CUBE = 54;
SqlBaseParser.CURRENT = 55;
SqlBaseParser.CURRENT_DATE = 56;
SqlBaseParser.CURRENT_TIME = 57;
SqlBaseParser.CURRENT_TIMESTAMP = 58;
SqlBaseParser.CURRENT_USER = 59;
SqlBaseParser.DATA = 60;
SqlBaseParser.DATABASE = 61;
SqlBaseParser.DATABASES = 62;
SqlBaseParser.DAY = 63;
SqlBaseParser.DAYS = 64;
SqlBaseParser.DBPROPERTIES = 65;
SqlBaseParser.DEFINED = 66;
SqlBaseParser.DELETE = 67;
SqlBaseParser.DELIMITED = 68;
SqlBaseParser.DESC = 69;
SqlBaseParser.DESCRIBE = 70;
SqlBaseParser.DFS = 71;
SqlBaseParser.DIRECTORIES = 72;
SqlBaseParser.DIRECTORY = 73;
SqlBaseParser.DISTINCT = 74;
SqlBaseParser.DISTRIBUTE = 75;
SqlBaseParser.DROP = 76;
SqlBaseParser.ELSE = 77;
SqlBaseParser.END = 78;
SqlBaseParser.ESCAPED = 79;
SqlBaseParser.EXCEPT = 80;
SqlBaseParser.EXCHANGE = 81;
SqlBaseParser.EXISTS = 82;
SqlBaseParser.EXPLAIN = 83;
SqlBaseParser.EXPORT = 84;
SqlBaseParser.EXTENDED = 85;
SqlBaseParser.EXTERNAL = 86;
SqlBaseParser.EXTRACT = 87;
SqlBaseParser.FALSE = 88;
SqlBaseParser.FETCH = 89;
SqlBaseParser.FIELDS = 90;
SqlBaseParser.FILEFORMAT = 91;
SqlBaseParser.FIRST = 92;
SqlBaseParser.FIRST_VALUE = 93;
SqlBaseParser.FOLLOWING = 94;
SqlBaseParser.FOR = 95;
SqlBaseParser.FOREIGN = 96;
SqlBaseParser.FORMAT = 97;
SqlBaseParser.FORMATTED = 98;
SqlBaseParser.FROM = 99;
SqlBaseParser.FULL = 100;
SqlBaseParser.FUNCTION = 101;
SqlBaseParser.FUNCTIONS = 102;
SqlBaseParser.GLOBAL = 103;
SqlBaseParser.GRANT = 104;
SqlBaseParser.GROUP = 105;
SqlBaseParser.GROUPING = 106;
SqlBaseParser.HAVING = 107;
SqlBaseParser.HOUR = 108;
SqlBaseParser.HOURS = 109;
SqlBaseParser.IF = 110;
SqlBaseParser.IGNORE = 111;
SqlBaseParser.IMPORT = 112;
SqlBaseParser.IN = 113;
SqlBaseParser.INDEX = 114;
SqlBaseParser.INDEXES = 115;
SqlBaseParser.INNER = 116;
SqlBaseParser.INPATH = 117;
SqlBaseParser.INPUTFORMAT = 118;
SqlBaseParser.INSERT = 119;
SqlBaseParser.INTERSECT = 120;
SqlBaseParser.INTERVAL = 121;
SqlBaseParser.INTO = 122;
SqlBaseParser.IS = 123;
SqlBaseParser.ITEMS = 124;
SqlBaseParser.JOIN = 125;
SqlBaseParser.KEYS = 126;
SqlBaseParser.LAST = 127;
SqlBaseParser.LAST_VALUE = 128;
SqlBaseParser.LATERAL = 129;
SqlBaseParser.LAZY = 130;
SqlBaseParser.LEADING = 131;
SqlBaseParser.LEFT = 132;
SqlBaseParser.LIKE = 133;
SqlBaseParser.LIMIT = 134;
SqlBaseParser.LINES = 135;
SqlBaseParser.LIST = 136;
SqlBaseParser.LOAD = 137;
SqlBaseParser.LOCAL = 138;
SqlBaseParser.LOCATION = 139;
SqlBaseParser.LOCK = 140;
SqlBaseParser.LOCKS = 141;
SqlBaseParser.LOGICAL = 142;
SqlBaseParser.MACRO = 143;
SqlBaseParser.MAP = 144;
SqlBaseParser.MICROSECOND = 145;
SqlBaseParser.MICROSECONDS = 146;
SqlBaseParser.MILLISECOND = 147;
SqlBaseParser.MILLISECONDS = 148;
SqlBaseParser.MINUTE = 149;
SqlBaseParser.MINUTES = 150;
SqlBaseParser.MONTH = 151;
SqlBaseParser.MONTHS = 152;
SqlBaseParser.MSCK = 153;
SqlBaseParser.NAMESPACE = 154;
SqlBaseParser.NAMESPACES = 155;
SqlBaseParser.NATURAL = 156;
SqlBaseParser.NO = 157;
SqlBaseParser.NOT = 158;
SqlBaseParser.NULL = 159;
SqlBaseParser.NULLS = 160;
SqlBaseParser.OF = 161;
SqlBaseParser.ON = 162;
SqlBaseParser.ONLY = 163;
SqlBaseParser.OPTION = 164;
SqlBaseParser.OPTIONS = 165;
SqlBaseParser.OR = 166;
SqlBaseParser.ORDER = 167;
SqlBaseParser.OUT = 168;
SqlBaseParser.OUTER = 169;
SqlBaseParser.OUTPUTFORMAT = 170;
SqlBaseParser.OVER = 171;
SqlBaseParser.OVERLAPS = 172;
SqlBaseParser.OVERLAY = 173;
SqlBaseParser.OVERWRITE = 174;
SqlBaseParser.PARTITION = 175;
SqlBaseParser.PARTITIONED = 176;
SqlBaseParser.PARTITIONS = 177;
SqlBaseParser.PERCENTLIT = 178;
SqlBaseParser.PIVOT = 179;
SqlBaseParser.PLACING = 180;
SqlBaseParser.POSITION = 181;
SqlBaseParser.PRECEDING = 182;
SqlBaseParser.PRIMARY = 183;
SqlBaseParser.PRINCIPALS = 184;
SqlBaseParser.PURGE = 185;
SqlBaseParser.QUERY = 186;
SqlBaseParser.RANGE = 187;
SqlBaseParser.RECORDREADER = 188;
SqlBaseParser.RECORDWRITER = 189;
SqlBaseParser.RECOVER = 190;
SqlBaseParser.REDUCE = 191;
SqlBaseParser.REFERENCES = 192;
SqlBaseParser.REFRESH = 193;
SqlBaseParser.RENAME = 194;
SqlBaseParser.REPAIR = 195;
SqlBaseParser.REPLACE = 196;
SqlBaseParser.RESET = 197;
SqlBaseParser.RESPECT = 198;
SqlBaseParser.RESTRICT = 199;
SqlBaseParser.REVOKE = 200;
SqlBaseParser.RIGHT = 201;
SqlBaseParser.RLIKE = 202;
SqlBaseParser.ROLE = 203;
SqlBaseParser.ROLES = 204;
SqlBaseParser.ROLLBACK = 205;
SqlBaseParser.ROLLUP = 206;
SqlBaseParser.ROW = 207;
SqlBaseParser.ROWS = 208;
SqlBaseParser.SCHEMA = 209;
SqlBaseParser.SECOND = 210;
SqlBaseParser.SECONDS = 211;
SqlBaseParser.SELECT = 212;
SqlBaseParser.SEMI = 213;
SqlBaseParser.SEPARATED = 214;
SqlBaseParser.SERDE = 215;
SqlBaseParser.SERDEPROPERTIES = 216;
SqlBaseParser.SESSION_USER = 217;
SqlBaseParser.SET = 218;
SqlBaseParser.SETMINUS = 219;
SqlBaseParser.SETS = 220;
SqlBaseParser.SHOW = 221;
SqlBaseParser.SKEWED = 222;
SqlBaseParser.SOME = 223;
SqlBaseParser.SORT = 224;
SqlBaseParser.SORTED = 225;
SqlBaseParser.START = 226;
SqlBaseParser.STATISTICS = 227;
SqlBaseParser.STORED = 228;
SqlBaseParser.STRATIFY = 229;
SqlBaseParser.STRUCT = 230;
SqlBaseParser.SUBSTR = 231;
SqlBaseParser.SUBSTRING = 232;
SqlBaseParser.TABLE = 233;
SqlBaseParser.TABLES = 234;
SqlBaseParser.TABLESAMPLE = 235;
SqlBaseParser.TBLPROPERTIES = 236;
SqlBaseParser.TEMPORARY = 237;
SqlBaseParser.TERMINATED = 238;
SqlBaseParser.THEN = 239;
SqlBaseParser.TO = 240;
SqlBaseParser.TOUCH = 241;
SqlBaseParser.TRAILING = 242;
SqlBaseParser.TRANSACTION = 243;
SqlBaseParser.TRANSACTIONS = 244;
SqlBaseParser.TRANSFORM = 245;
SqlBaseParser.TRIM = 246;
SqlBaseParser.TRUE = 247;
SqlBaseParser.TRUNCATE = 248;
SqlBaseParser.TYPE = 249;
SqlBaseParser.UNARCHIVE = 250;
SqlBaseParser.UNBOUNDED = 251;
SqlBaseParser.UNCACHE = 252;
SqlBaseParser.UNION = 253;
SqlBaseParser.UNIQUE = 254;
SqlBaseParser.UNKNOWN = 255;
SqlBaseParser.UNLOCK = 256;
SqlBaseParser.UNSET = 257;
SqlBaseParser.UPDATE = 258;
SqlBaseParser.USE = 259;
SqlBaseParser.USER = 260;
SqlBaseParser.USING = 261;
SqlBaseParser.VALUES = 262;
SqlBaseParser.VIEW = 263;
SqlBaseParser.WEEK = 264;
SqlBaseParser.WEEKS = 265;
SqlBaseParser.WHEN = 266;
SqlBaseParser.WHERE = 267;
SqlBaseParser.WINDOW = 268;
SqlBaseParser.WITH = 269;
SqlBaseParser.YEAR = 270;
SqlBaseParser.YEARS = 271;
SqlBaseParser.EQ = 272;
SqlBaseParser.NSEQ = 273;
SqlBaseParser.NEQ = 274;
SqlBaseParser.NEQJ = 275;
SqlBaseParser.LT = 276;
SqlBaseParser.LTE = 277;
SqlBaseParser.GT = 278;
SqlBaseParser.GTE = 279;
SqlBaseParser.PLUS = 280;
SqlBaseParser.MINUS = 281;
SqlBaseParser.ASTERISK = 282;
SqlBaseParser.SLASH = 283;
SqlBaseParser.PERCENT = 284;
SqlBaseParser.DIV = 285;
SqlBaseParser.TILDE = 286;
SqlBaseParser.AMPERSAND = 287;
SqlBaseParser.PIPE = 288;
SqlBaseParser.CONCAT_PIPE = 289;
SqlBaseParser.HAT = 290;
SqlBaseParser.STRING = 291;
SqlBaseParser.BIGINT_LITERAL = 292;
SqlBaseParser.SMALLINT_LITERAL = 293;
SqlBaseParser.TINYINT_LITERAL = 294;
SqlBaseParser.INTEGER_VALUE = 295;
SqlBaseParser.DECIMAL_VALUE = 296;
SqlBaseParser.DOUBLE_LITERAL = 297;
SqlBaseParser.BIGDECIMAL_LITERAL = 298;
SqlBaseParser.IDENTIFIER = 299;
SqlBaseParser.BACKQUOTED_IDENTIFIER = 300;
SqlBaseParser.SIMPLE_COMMENT = 301;
SqlBaseParser.BRACKETED_EMPTY_COMMENT = 302;
SqlBaseParser.BRACKETED_COMMENT = 303;
SqlBaseParser.WS = 304;
SqlBaseParser.UNRECOGNIZED = 305;

SqlBaseParser.RULE_singleStatement = 0;
SqlBaseParser.RULE_singleExpression = 1;
SqlBaseParser.RULE_singleTableIdentifier = 2;
SqlBaseParser.RULE_singleMultipartIdentifier = 3;
SqlBaseParser.RULE_singleFunctionIdentifier = 4;
SqlBaseParser.RULE_singleDataType = 5;
SqlBaseParser.RULE_singleTableSchema = 6;
SqlBaseParser.RULE_statement = 7;
SqlBaseParser.RULE_unsupportedHiveNativeCommands = 8;
SqlBaseParser.RULE_createTableHeader = 9;
SqlBaseParser.RULE_replaceTableHeader = 10;
SqlBaseParser.RULE_bucketSpec = 11;
SqlBaseParser.RULE_skewSpec = 12;
SqlBaseParser.RULE_locationSpec = 13;
SqlBaseParser.RULE_query = 14;
SqlBaseParser.RULE_insertInto = 15;
SqlBaseParser.RULE_partitionSpecLocation = 16;
SqlBaseParser.RULE_partitionSpec = 17;
SqlBaseParser.RULE_partitionVal = 18;
SqlBaseParser.RULE_database = 19;
SqlBaseParser.RULE_describeFuncName = 20;
SqlBaseParser.RULE_describeColName = 21;
SqlBaseParser.RULE_ctes = 22;
SqlBaseParser.RULE_namedQuery = 23;
SqlBaseParser.RULE_tableProvider = 24;
SqlBaseParser.RULE_tablePropertyList = 25;
SqlBaseParser.RULE_tableProperty = 26;
SqlBaseParser.RULE_tablePropertyKey = 27;
SqlBaseParser.RULE_tablePropertyValue = 28;
SqlBaseParser.RULE_constantList = 29;
SqlBaseParser.RULE_nestedConstantList = 30;
SqlBaseParser.RULE_createFileFormat = 31;
SqlBaseParser.RULE_fileFormat = 32;
SqlBaseParser.RULE_storageHandler = 33;
SqlBaseParser.RULE_resource = 34;
SqlBaseParser.RULE_dmlStatementNoWith = 35;
SqlBaseParser.RULE_queryOrganization = 36;
SqlBaseParser.RULE_multiInsertQueryBody = 37;
SqlBaseParser.RULE_queryTerm = 38;
SqlBaseParser.RULE_queryPrimary = 39;
SqlBaseParser.RULE_sortItem = 40;
SqlBaseParser.RULE_fromStatement = 41;
SqlBaseParser.RULE_fromStatementBody = 42;
SqlBaseParser.RULE_querySpecification = 43;
SqlBaseParser.RULE_transformClause = 44;
SqlBaseParser.RULE_selectClause = 45;
SqlBaseParser.RULE_setClause = 46;
SqlBaseParser.RULE_assign = 47;
SqlBaseParser.RULE_whereClause = 48;
SqlBaseParser.RULE_havingClause = 49;
SqlBaseParser.RULE_hint = 50;
SqlBaseParser.RULE_hintStatement = 51;
SqlBaseParser.RULE_fromClause = 52;
SqlBaseParser.RULE_aggregationClause = 53;
SqlBaseParser.RULE_groupingSet = 54;
SqlBaseParser.RULE_pivotClause = 55;
SqlBaseParser.RULE_pivotColumn = 56;
SqlBaseParser.RULE_pivotValue = 57;
SqlBaseParser.RULE_lateralView = 58;
SqlBaseParser.RULE_setQuantifier = 59;
SqlBaseParser.RULE_relation = 60;
SqlBaseParser.RULE_joinRelation = 61;
SqlBaseParser.RULE_joinType = 62;
SqlBaseParser.RULE_joinCriteria = 63;
SqlBaseParser.RULE_sample = 64;
SqlBaseParser.RULE_sampleMethod = 65;
SqlBaseParser.RULE_identifierList = 66;
SqlBaseParser.RULE_identifierSeq = 67;
SqlBaseParser.RULE_orderedIdentifierList = 68;
SqlBaseParser.RULE_orderedIdentifier = 69;
SqlBaseParser.RULE_identifierCommentList = 70;
SqlBaseParser.RULE_identifierComment = 71;
SqlBaseParser.RULE_relationPrimary = 72;
SqlBaseParser.RULE_inlineTable = 73;
SqlBaseParser.RULE_functionTable = 74;
SqlBaseParser.RULE_tableAlias = 75;
SqlBaseParser.RULE_rowFormat = 76;
SqlBaseParser.RULE_multipartIdentifier = 77;
SqlBaseParser.RULE_tableIdentifier = 78;
SqlBaseParser.RULE_functionIdentifier = 79;
SqlBaseParser.RULE_namedExpression = 80;
SqlBaseParser.RULE_namedExpressionSeq = 81;
SqlBaseParser.RULE_transformList = 82;
SqlBaseParser.RULE_transform = 83;
SqlBaseParser.RULE_transformArgument = 84;
SqlBaseParser.RULE_expression = 85;
SqlBaseParser.RULE_booleanExpression = 86;
SqlBaseParser.RULE_predicate = 87;
SqlBaseParser.RULE_valueExpression = 88;
SqlBaseParser.RULE_primaryExpression = 89;
SqlBaseParser.RULE_constant = 90;
SqlBaseParser.RULE_comparisonOperator = 91;
SqlBaseParser.RULE_arithmeticOperator = 92;
SqlBaseParser.RULE_predicateOperator = 93;
SqlBaseParser.RULE_booleanValue = 94;
SqlBaseParser.RULE_interval = 95;
SqlBaseParser.RULE_intervalField = 96;
SqlBaseParser.RULE_intervalValue = 97;
SqlBaseParser.RULE_intervalUnit = 98;
SqlBaseParser.RULE_colPosition = 99;
SqlBaseParser.RULE_dataType = 100;
SqlBaseParser.RULE_qualifiedColTypeWithPositionList = 101;
SqlBaseParser.RULE_qualifiedColTypeWithPosition = 102;
SqlBaseParser.RULE_colTypeList = 103;
SqlBaseParser.RULE_colType = 104;
SqlBaseParser.RULE_complexColTypeList = 105;
SqlBaseParser.RULE_complexColType = 106;
SqlBaseParser.RULE_whenClause = 107;
SqlBaseParser.RULE_windowClause = 108;
SqlBaseParser.RULE_namedWindow = 109;
SqlBaseParser.RULE_windowSpec = 110;
SqlBaseParser.RULE_windowFrame = 111;
SqlBaseParser.RULE_frameBound = 112;
SqlBaseParser.RULE_qualifiedNameList = 113;
SqlBaseParser.RULE_qualifiedName = 114;
SqlBaseParser.RULE_errorCapturingIdentifier = 115;
SqlBaseParser.RULE_errorCapturingIdentifierExtra = 116;
SqlBaseParser.RULE_identifier = 117;
SqlBaseParser.RULE_strictIdentifier = 118;
SqlBaseParser.RULE_quotedIdentifier = 119;
SqlBaseParser.RULE_number = 120;
SqlBaseParser.RULE_ansiNonReserved = 121;
SqlBaseParser.RULE_strictNonReserved = 122;
SqlBaseParser.RULE_nonReserved = 123;

function SingleStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_singleStatement;
    return this;
}

SingleStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleStatementContext.prototype.constructor = SingleStatementContext;

SingleStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

SingleStatementContext.prototype.EOF = function() {
    return this.getToken(SqlBaseParser.EOF, 0);
};




SqlBaseParser.SingleStatementContext = SingleStatementContext;

SqlBaseParser.prototype.singleStatement = function() {

    var localctx = new SingleStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, SqlBaseParser.RULE_singleStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 248;
        this.statement();
        this.state = 249;
        this.match(SqlBaseParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SingleExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_singleExpression;
    return this;
}

SingleExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleExpressionContext.prototype.constructor = SingleExpressionContext;

SingleExpressionContext.prototype.namedExpression = function() {
    return this.getTypedRuleContext(NamedExpressionContext,0);
};

SingleExpressionContext.prototype.EOF = function() {
    return this.getToken(SqlBaseParser.EOF, 0);
};




SqlBaseParser.SingleExpressionContext = SingleExpressionContext;

SqlBaseParser.prototype.singleExpression = function() {

    var localctx = new SingleExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, SqlBaseParser.RULE_singleExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 251;
        this.namedExpression();
        this.state = 252;
        this.match(SqlBaseParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SingleTableIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_singleTableIdentifier;
    return this;
}

SingleTableIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleTableIdentifierContext.prototype.constructor = SingleTableIdentifierContext;

SingleTableIdentifierContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

SingleTableIdentifierContext.prototype.EOF = function() {
    return this.getToken(SqlBaseParser.EOF, 0);
};




SqlBaseParser.SingleTableIdentifierContext = SingleTableIdentifierContext;

SqlBaseParser.prototype.singleTableIdentifier = function() {

    var localctx = new SingleTableIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, SqlBaseParser.RULE_singleTableIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 254;
        this.tableIdentifier();
        this.state = 255;
        this.match(SqlBaseParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SingleMultipartIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_singleMultipartIdentifier;
    return this;
}

SingleMultipartIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleMultipartIdentifierContext.prototype.constructor = SingleMultipartIdentifierContext;

SingleMultipartIdentifierContext.prototype.multipartIdentifier = function() {
    return this.getTypedRuleContext(MultipartIdentifierContext,0);
};

SingleMultipartIdentifierContext.prototype.EOF = function() {
    return this.getToken(SqlBaseParser.EOF, 0);
};




SqlBaseParser.SingleMultipartIdentifierContext = SingleMultipartIdentifierContext;

SqlBaseParser.prototype.singleMultipartIdentifier = function() {

    var localctx = new SingleMultipartIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, SqlBaseParser.RULE_singleMultipartIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 257;
        this.multipartIdentifier();
        this.state = 258;
        this.match(SqlBaseParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SingleFunctionIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_singleFunctionIdentifier;
    return this;
}

SingleFunctionIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleFunctionIdentifierContext.prototype.constructor = SingleFunctionIdentifierContext;

SingleFunctionIdentifierContext.prototype.functionIdentifier = function() {
    return this.getTypedRuleContext(FunctionIdentifierContext,0);
};

SingleFunctionIdentifierContext.prototype.EOF = function() {
    return this.getToken(SqlBaseParser.EOF, 0);
};




SqlBaseParser.SingleFunctionIdentifierContext = SingleFunctionIdentifierContext;

SqlBaseParser.prototype.singleFunctionIdentifier = function() {

    var localctx = new SingleFunctionIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, SqlBaseParser.RULE_singleFunctionIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 260;
        this.functionIdentifier();
        this.state = 261;
        this.match(SqlBaseParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SingleDataTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_singleDataType;
    return this;
}

SingleDataTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleDataTypeContext.prototype.constructor = SingleDataTypeContext;

SingleDataTypeContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

SingleDataTypeContext.prototype.EOF = function() {
    return this.getToken(SqlBaseParser.EOF, 0);
};




SqlBaseParser.SingleDataTypeContext = SingleDataTypeContext;

SqlBaseParser.prototype.singleDataType = function() {

    var localctx = new SingleDataTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, SqlBaseParser.RULE_singleDataType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 263;
        this.dataType();
        this.state = 264;
        this.match(SqlBaseParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SingleTableSchemaContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_singleTableSchema;
    return this;
}

SingleTableSchemaContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleTableSchemaContext.prototype.constructor = SingleTableSchemaContext;

SingleTableSchemaContext.prototype.colTypeList = function() {
    return this.getTypedRuleContext(ColTypeListContext,0);
};

SingleTableSchemaContext.prototype.EOF = function() {
    return this.getToken(SqlBaseParser.EOF, 0);
};




SqlBaseParser.SingleTableSchemaContext = SingleTableSchemaContext;

SqlBaseParser.prototype.singleTableSchema = function() {

    var localctx = new SingleTableSchemaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, SqlBaseParser.RULE_singleTableSchema);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 266;
        this.colTypeList();
        this.state = 267;
        this.match(SqlBaseParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;



StatementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ExplainContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExplainContext.prototype = Object.create(StatementContext.prototype);
ExplainContext.prototype.constructor = ExplainContext;

SqlBaseParser.ExplainContext = ExplainContext;

ExplainContext.prototype.EXPLAIN = function() {
    return this.getToken(SqlBaseParser.EXPLAIN, 0);
};

ExplainContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ExplainContext.prototype.LOGICAL = function() {
    return this.getToken(SqlBaseParser.LOGICAL, 0);
};

ExplainContext.prototype.FORMATTED = function() {
    return this.getToken(SqlBaseParser.FORMATTED, 0);
};

ExplainContext.prototype.EXTENDED = function() {
    return this.getToken(SqlBaseParser.EXTENDED, 0);
};

ExplainContext.prototype.CODEGEN = function() {
    return this.getToken(SqlBaseParser.CODEGEN, 0);
};

ExplainContext.prototype.COST = function() {
    return this.getToken(SqlBaseParser.COST, 0);
};

function DropDatabaseContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.db = null; // ErrorCapturingIdentifierContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DropDatabaseContext.prototype = Object.create(StatementContext.prototype);
DropDatabaseContext.prototype.constructor = DropDatabaseContext;

SqlBaseParser.DropDatabaseContext = DropDatabaseContext;

DropDatabaseContext.prototype.DROP = function() {
    return this.getToken(SqlBaseParser.DROP, 0);
};

DropDatabaseContext.prototype.database = function() {
    return this.getTypedRuleContext(DatabaseContext,0);
};

DropDatabaseContext.prototype.errorCapturingIdentifier = function() {
    return this.getTypedRuleContext(ErrorCapturingIdentifierContext,0);
};

DropDatabaseContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

DropDatabaseContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

DropDatabaseContext.prototype.RESTRICT = function() {
    return this.getToken(SqlBaseParser.RESTRICT, 0);
};

DropDatabaseContext.prototype.CASCADE = function() {
    return this.getToken(SqlBaseParser.CASCADE, 0);
};

function ResetConfigurationContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ResetConfigurationContext.prototype = Object.create(StatementContext.prototype);
ResetConfigurationContext.prototype.constructor = ResetConfigurationContext;

SqlBaseParser.ResetConfigurationContext = ResetConfigurationContext;

ResetConfigurationContext.prototype.RESET = function() {
    return this.getToken(SqlBaseParser.RESET, 0);
};

function DescribeDatabaseContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.db = null; // ErrorCapturingIdentifierContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DescribeDatabaseContext.prototype = Object.create(StatementContext.prototype);
DescribeDatabaseContext.prototype.constructor = DescribeDatabaseContext;

SqlBaseParser.DescribeDatabaseContext = DescribeDatabaseContext;

DescribeDatabaseContext.prototype.database = function() {
    return this.getTypedRuleContext(DatabaseContext,0);
};

DescribeDatabaseContext.prototype.DESC = function() {
    return this.getToken(SqlBaseParser.DESC, 0);
};

DescribeDatabaseContext.prototype.DESCRIBE = function() {
    return this.getToken(SqlBaseParser.DESCRIBE, 0);
};

DescribeDatabaseContext.prototype.errorCapturingIdentifier = function() {
    return this.getTypedRuleContext(ErrorCapturingIdentifierContext,0);
};

DescribeDatabaseContext.prototype.EXTENDED = function() {
    return this.getToken(SqlBaseParser.EXTENDED, 0);
};

function AlterViewQueryContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterViewQueryContext.prototype = Object.create(StatementContext.prototype);
AlterViewQueryContext.prototype.constructor = AlterViewQueryContext;

SqlBaseParser.AlterViewQueryContext = AlterViewQueryContext;

AlterViewQueryContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

AlterViewQueryContext.prototype.VIEW = function() {
    return this.getToken(SqlBaseParser.VIEW, 0);
};

AlterViewQueryContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

AlterViewQueryContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

AlterViewQueryContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

function UseContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UseContext.prototype = Object.create(StatementContext.prototype);
UseContext.prototype.constructor = UseContext;

SqlBaseParser.UseContext = UseContext;

UseContext.prototype.USE = function() {
    return this.getToken(SqlBaseParser.USE, 0);
};

UseContext.prototype.multipartIdentifier = function() {
    return this.getTypedRuleContext(MultipartIdentifierContext,0);
};

UseContext.prototype.NAMESPACE = function() {
    return this.getToken(SqlBaseParser.NAMESPACE, 0);
};

function CreateTempViewUsingContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateTempViewUsingContext.prototype = Object.create(StatementContext.prototype);
CreateTempViewUsingContext.prototype.constructor = CreateTempViewUsingContext;

SqlBaseParser.CreateTempViewUsingContext = CreateTempViewUsingContext;

CreateTempViewUsingContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

CreateTempViewUsingContext.prototype.TEMPORARY = function() {
    return this.getToken(SqlBaseParser.TEMPORARY, 0);
};

CreateTempViewUsingContext.prototype.VIEW = function() {
    return this.getToken(SqlBaseParser.VIEW, 0);
};

CreateTempViewUsingContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

CreateTempViewUsingContext.prototype.tableProvider = function() {
    return this.getTypedRuleContext(TableProviderContext,0);
};

CreateTempViewUsingContext.prototype.OR = function() {
    return this.getToken(SqlBaseParser.OR, 0);
};

CreateTempViewUsingContext.prototype.REPLACE = function() {
    return this.getToken(SqlBaseParser.REPLACE, 0);
};

CreateTempViewUsingContext.prototype.GLOBAL = function() {
    return this.getToken(SqlBaseParser.GLOBAL, 0);
};

CreateTempViewUsingContext.prototype.colTypeList = function() {
    return this.getTypedRuleContext(ColTypeListContext,0);
};

CreateTempViewUsingContext.prototype.OPTIONS = function() {
    return this.getToken(SqlBaseParser.OPTIONS, 0);
};

CreateTempViewUsingContext.prototype.tablePropertyList = function() {
    return this.getTypedRuleContext(TablePropertyListContext,0);
};

function RenameTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.from = null; // TableIdentifierContext;
    this.to = null; // TableIdentifierContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RenameTableContext.prototype = Object.create(StatementContext.prototype);
RenameTableContext.prototype.constructor = RenameTableContext;

SqlBaseParser.RenameTableContext = RenameTableContext;

RenameTableContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

RenameTableContext.prototype.RENAME = function() {
    return this.getToken(SqlBaseParser.RENAME, 0);
};

RenameTableContext.prototype.TO = function() {
    return this.getToken(SqlBaseParser.TO, 0);
};

RenameTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

RenameTableContext.prototype.VIEW = function() {
    return this.getToken(SqlBaseParser.VIEW, 0);
};

RenameTableContext.prototype.tableIdentifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableIdentifierContext);
    } else {
        return this.getTypedRuleContext(TableIdentifierContext,i);
    }
};

function FailNativeCommandContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FailNativeCommandContext.prototype = Object.create(StatementContext.prototype);
FailNativeCommandContext.prototype.constructor = FailNativeCommandContext;

SqlBaseParser.FailNativeCommandContext = FailNativeCommandContext;

FailNativeCommandContext.prototype.SET = function() {
    return this.getToken(SqlBaseParser.SET, 0);
};

FailNativeCommandContext.prototype.ROLE = function() {
    return this.getToken(SqlBaseParser.ROLE, 0);
};

FailNativeCommandContext.prototype.unsupportedHiveNativeCommands = function() {
    return this.getTypedRuleContext(UnsupportedHiveNativeCommandsContext,0);
};

function ClearCacheContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ClearCacheContext.prototype = Object.create(StatementContext.prototype);
ClearCacheContext.prototype.constructor = ClearCacheContext;

SqlBaseParser.ClearCacheContext = ClearCacheContext;

ClearCacheContext.prototype.CLEAR = function() {
    return this.getToken(SqlBaseParser.CLEAR, 0);
};

ClearCacheContext.prototype.CACHE = function() {
    return this.getToken(SqlBaseParser.CACHE, 0);
};

function DropViewContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DropViewContext.prototype = Object.create(StatementContext.prototype);
DropViewContext.prototype.constructor = DropViewContext;

SqlBaseParser.DropViewContext = DropViewContext;

DropViewContext.prototype.DROP = function() {
    return this.getToken(SqlBaseParser.DROP, 0);
};

DropViewContext.prototype.VIEW = function() {
    return this.getToken(SqlBaseParser.VIEW, 0);
};

DropViewContext.prototype.multipartIdentifier = function() {
    return this.getTypedRuleContext(MultipartIdentifierContext,0);
};

DropViewContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

DropViewContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

function ShowTablesContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.pattern = null; // Token;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowTablesContext.prototype = Object.create(StatementContext.prototype);
ShowTablesContext.prototype.constructor = ShowTablesContext;

SqlBaseParser.ShowTablesContext = ShowTablesContext;

ShowTablesContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowTablesContext.prototype.TABLES = function() {
    return this.getToken(SqlBaseParser.TABLES, 0);
};

ShowTablesContext.prototype.multipartIdentifier = function() {
    return this.getTypedRuleContext(MultipartIdentifierContext,0);
};

ShowTablesContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

ShowTablesContext.prototype.IN = function() {
    return this.getToken(SqlBaseParser.IN, 0);
};

ShowTablesContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

ShowTablesContext.prototype.LIKE = function() {
    return this.getToken(SqlBaseParser.LIKE, 0);
};

function RecoverPartitionsContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RecoverPartitionsContext.prototype = Object.create(StatementContext.prototype);
RecoverPartitionsContext.prototype.constructor = RecoverPartitionsContext;

SqlBaseParser.RecoverPartitionsContext = RecoverPartitionsContext;

RecoverPartitionsContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

RecoverPartitionsContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

RecoverPartitionsContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

RecoverPartitionsContext.prototype.RECOVER = function() {
    return this.getToken(SqlBaseParser.RECOVER, 0);
};

RecoverPartitionsContext.prototype.PARTITIONS = function() {
    return this.getToken(SqlBaseParser.PARTITIONS, 0);
};

function DeleteFromTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DeleteFromTableContext.prototype = Object.create(StatementContext.prototype);
DeleteFromTableContext.prototype.constructor = DeleteFromTableContext;

SqlBaseParser.DeleteFromTableContext = DeleteFromTableContext;

DeleteFromTableContext.prototype.DELETE = function() {
    return this.getToken(SqlBaseParser.DELETE, 0);
};

DeleteFromTableContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

DeleteFromTableContext.prototype.multipartIdentifier = function() {
    return this.getTypedRuleContext(MultipartIdentifierContext,0);
};

DeleteFromTableContext.prototype.tableAlias = function() {
    return this.getTypedRuleContext(TableAliasContext,0);
};

DeleteFromTableContext.prototype.whereClause = function() {
    return this.getTypedRuleContext(WhereClauseContext,0);
};

function RenameTablePartitionContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.from = null; // PartitionSpecContext;
    this.to = null; // PartitionSpecContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RenameTablePartitionContext.prototype = Object.create(StatementContext.prototype);
RenameTablePartitionContext.prototype.constructor = RenameTablePartitionContext;

SqlBaseParser.RenameTablePartitionContext = RenameTablePartitionContext;

RenameTablePartitionContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

RenameTablePartitionContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

RenameTablePartitionContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

RenameTablePartitionContext.prototype.RENAME = function() {
    return this.getToken(SqlBaseParser.RENAME, 0);
};

RenameTablePartitionContext.prototype.TO = function() {
    return this.getToken(SqlBaseParser.TO, 0);
};

RenameTablePartitionContext.prototype.partitionSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartitionSpecContext);
    } else {
        return this.getTypedRuleContext(PartitionSpecContext,i);
    }
};

function RepairTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RepairTableContext.prototype = Object.create(StatementContext.prototype);
RepairTableContext.prototype.constructor = RepairTableContext;

SqlBaseParser.RepairTableContext = RepairTableContext;

RepairTableContext.prototype.MSCK = function() {
    return this.getToken(SqlBaseParser.MSCK, 0);
};

RepairTableContext.prototype.REPAIR = function() {
    return this.getToken(SqlBaseParser.REPAIR, 0);
};

RepairTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

RepairTableContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

function RefreshResourceContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RefreshResourceContext.prototype = Object.create(StatementContext.prototype);
RefreshResourceContext.prototype.constructor = RefreshResourceContext;

SqlBaseParser.RefreshResourceContext = RefreshResourceContext;

RefreshResourceContext.prototype.REFRESH = function() {
    return this.getToken(SqlBaseParser.REFRESH, 0);
};

RefreshResourceContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

function ShowCreateTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowCreateTableContext.prototype = Object.create(StatementContext.prototype);
ShowCreateTableContext.prototype.constructor = ShowCreateTableContext;

SqlBaseParser.ShowCreateTableContext = ShowCreateTableContext;

ShowCreateTableContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowCreateTableContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

ShowCreateTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

ShowCreateTableContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

function ShowNamespacesContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.pattern = null; // Token;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowNamespacesContext.prototype = Object.create(StatementContext.prototype);
ShowNamespacesContext.prototype.constructor = ShowNamespacesContext;

SqlBaseParser.ShowNamespacesContext = ShowNamespacesContext;

ShowNamespacesContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowNamespacesContext.prototype.DATABASES = function() {
    return this.getToken(SqlBaseParser.DATABASES, 0);
};

ShowNamespacesContext.prototype.NAMESPACES = function() {
    return this.getToken(SqlBaseParser.NAMESPACES, 0);
};

ShowNamespacesContext.prototype.multipartIdentifier = function() {
    return this.getTypedRuleContext(MultipartIdentifierContext,0);
};

ShowNamespacesContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

ShowNamespacesContext.prototype.IN = function() {
    return this.getToken(SqlBaseParser.IN, 0);
};

ShowNamespacesContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

ShowNamespacesContext.prototype.LIKE = function() {
    return this.getToken(SqlBaseParser.LIKE, 0);
};

function ShowColumnsContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.db = null; // ErrorCapturingIdentifierContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowColumnsContext.prototype = Object.create(StatementContext.prototype);
ShowColumnsContext.prototype.constructor = ShowColumnsContext;

SqlBaseParser.ShowColumnsContext = ShowColumnsContext;

ShowColumnsContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowColumnsContext.prototype.COLUMNS = function() {
    return this.getToken(SqlBaseParser.COLUMNS, 0);
};

ShowColumnsContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

ShowColumnsContext.prototype.FROM = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.FROM);
    } else {
        return this.getToken(SqlBaseParser.FROM, i);
    }
};


ShowColumnsContext.prototype.IN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.IN);
    } else {
        return this.getToken(SqlBaseParser.IN, i);
    }
};


ShowColumnsContext.prototype.errorCapturingIdentifier = function() {
    return this.getTypedRuleContext(ErrorCapturingIdentifierContext,0);
};

function ReplaceTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.options = null; // TablePropertyListContext;
    this.partitioning = null; // TransformListContext;
    this.comment = null; // Token;
    this.tableProps = null; // TablePropertyListContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ReplaceTableContext.prototype = Object.create(StatementContext.prototype);
ReplaceTableContext.prototype.constructor = ReplaceTableContext;

SqlBaseParser.ReplaceTableContext = ReplaceTableContext;

ReplaceTableContext.prototype.replaceTableHeader = function() {
    return this.getTypedRuleContext(ReplaceTableHeaderContext,0);
};

ReplaceTableContext.prototype.tableProvider = function() {
    return this.getTypedRuleContext(TableProviderContext,0);
};

ReplaceTableContext.prototype.colTypeList = function() {
    return this.getTypedRuleContext(ColTypeListContext,0);
};

ReplaceTableContext.prototype.bucketSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BucketSpecContext);
    } else {
        return this.getTypedRuleContext(BucketSpecContext,i);
    }
};

ReplaceTableContext.prototype.locationSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LocationSpecContext);
    } else {
        return this.getTypedRuleContext(LocationSpecContext,i);
    }
};

ReplaceTableContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

ReplaceTableContext.prototype.OPTIONS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.OPTIONS);
    } else {
        return this.getToken(SqlBaseParser.OPTIONS, i);
    }
};


ReplaceTableContext.prototype.PARTITIONED = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.PARTITIONED);
    } else {
        return this.getToken(SqlBaseParser.PARTITIONED, i);
    }
};


ReplaceTableContext.prototype.BY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.BY);
    } else {
        return this.getToken(SqlBaseParser.BY, i);
    }
};


ReplaceTableContext.prototype.COMMENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.COMMENT);
    } else {
        return this.getToken(SqlBaseParser.COMMENT, i);
    }
};


ReplaceTableContext.prototype.TBLPROPERTIES = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.TBLPROPERTIES);
    } else {
        return this.getToken(SqlBaseParser.TBLPROPERTIES, i);
    }
};


ReplaceTableContext.prototype.tablePropertyList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TablePropertyListContext);
    } else {
        return this.getTypedRuleContext(TablePropertyListContext,i);
    }
};

ReplaceTableContext.prototype.transformList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TransformListContext);
    } else {
        return this.getTypedRuleContext(TransformListContext,i);
    }
};

ReplaceTableContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.STRING);
    } else {
        return this.getToken(SqlBaseParser.STRING, i);
    }
};


ReplaceTableContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

function AddTablePartitionContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AddTablePartitionContext.prototype = Object.create(StatementContext.prototype);
AddTablePartitionContext.prototype.constructor = AddTablePartitionContext;

SqlBaseParser.AddTablePartitionContext = AddTablePartitionContext;

AddTablePartitionContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

AddTablePartitionContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

AddTablePartitionContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

AddTablePartitionContext.prototype.ADD = function() {
    return this.getToken(SqlBaseParser.ADD, 0);
};

AddTablePartitionContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

AddTablePartitionContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

AddTablePartitionContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

AddTablePartitionContext.prototype.partitionSpecLocation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartitionSpecLocationContext);
    } else {
        return this.getTypedRuleContext(PartitionSpecLocationContext,i);
    }
};

AddTablePartitionContext.prototype.VIEW = function() {
    return this.getToken(SqlBaseParser.VIEW, 0);
};

AddTablePartitionContext.prototype.partitionSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartitionSpecContext);
    } else {
        return this.getTypedRuleContext(PartitionSpecContext,i);
    }
};

function RefreshTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RefreshTableContext.prototype = Object.create(StatementContext.prototype);
RefreshTableContext.prototype.constructor = RefreshTableContext;

SqlBaseParser.RefreshTableContext = RefreshTableContext;

RefreshTableContext.prototype.REFRESH = function() {
    return this.getToken(SqlBaseParser.REFRESH, 0);
};

RefreshTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

RefreshTableContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

function UpdateTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UpdateTableContext.prototype = Object.create(StatementContext.prototype);
UpdateTableContext.prototype.constructor = UpdateTableContext;

SqlBaseParser.UpdateTableContext = UpdateTableContext;

UpdateTableContext.prototype.UPDATE = function() {
    return this.getToken(SqlBaseParser.UPDATE, 0);
};

UpdateTableContext.prototype.multipartIdentifier = function() {
    return this.getTypedRuleContext(MultipartIdentifierContext,0);
};

UpdateTableContext.prototype.tableAlias = function() {
    return this.getTypedRuleContext(TableAliasContext,0);
};

UpdateTableContext.prototype.setClause = function() {
    return this.getTypedRuleContext(SetClauseContext,0);
};

UpdateTableContext.prototype.whereClause = function() {
    return this.getTypedRuleContext(WhereClauseContext,0);
};

function ManageResourceContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.op = null; // Token;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ManageResourceContext.prototype = Object.create(StatementContext.prototype);
ManageResourceContext.prototype.constructor = ManageResourceContext;

SqlBaseParser.ManageResourceContext = ManageResourceContext;

ManageResourceContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ManageResourceContext.prototype.ADD = function() {
    return this.getToken(SqlBaseParser.ADD, 0);
};

ManageResourceContext.prototype.LIST = function() {
    return this.getToken(SqlBaseParser.LIST, 0);
};

function CreateDatabaseContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.db = null; // ErrorCapturingIdentifierContext;
    this.comment = null; // Token;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateDatabaseContext.prototype = Object.create(StatementContext.prototype);
CreateDatabaseContext.prototype.constructor = CreateDatabaseContext;

SqlBaseParser.CreateDatabaseContext = CreateDatabaseContext;

CreateDatabaseContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

CreateDatabaseContext.prototype.database = function() {
    return this.getTypedRuleContext(DatabaseContext,0);
};

CreateDatabaseContext.prototype.errorCapturingIdentifier = function() {
    return this.getTypedRuleContext(ErrorCapturingIdentifierContext,0);
};

CreateDatabaseContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

CreateDatabaseContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

CreateDatabaseContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

CreateDatabaseContext.prototype.locationSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LocationSpecContext);
    } else {
        return this.getTypedRuleContext(LocationSpecContext,i);
    }
};

CreateDatabaseContext.prototype.COMMENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.COMMENT);
    } else {
        return this.getToken(SqlBaseParser.COMMENT, i);
    }
};


CreateDatabaseContext.prototype.WITH = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.WITH);
    } else {
        return this.getToken(SqlBaseParser.WITH, i);
    }
};


CreateDatabaseContext.prototype.DBPROPERTIES = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.DBPROPERTIES);
    } else {
        return this.getToken(SqlBaseParser.DBPROPERTIES, i);
    }
};


CreateDatabaseContext.prototype.tablePropertyList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TablePropertyListContext);
    } else {
        return this.getTypedRuleContext(TablePropertyListContext,i);
    }
};

CreateDatabaseContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.STRING);
    } else {
        return this.getToken(SqlBaseParser.STRING, i);
    }
};


function AnalyzeContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AnalyzeContext.prototype = Object.create(StatementContext.prototype);
AnalyzeContext.prototype.constructor = AnalyzeContext;

SqlBaseParser.AnalyzeContext = AnalyzeContext;

AnalyzeContext.prototype.ANALYZE = function() {
    return this.getToken(SqlBaseParser.ANALYZE, 0);
};

AnalyzeContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

AnalyzeContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

AnalyzeContext.prototype.COMPUTE = function() {
    return this.getToken(SqlBaseParser.COMPUTE, 0);
};

AnalyzeContext.prototype.STATISTICS = function() {
    return this.getToken(SqlBaseParser.STATISTICS, 0);
};

AnalyzeContext.prototype.partitionSpec = function() {
    return this.getTypedRuleContext(PartitionSpecContext,0);
};

AnalyzeContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

AnalyzeContext.prototype.FOR = function() {
    return this.getToken(SqlBaseParser.FOR, 0);
};

AnalyzeContext.prototype.COLUMNS = function() {
    return this.getToken(SqlBaseParser.COLUMNS, 0);
};

AnalyzeContext.prototype.identifierSeq = function() {
    return this.getTypedRuleContext(IdentifierSeqContext,0);
};

AnalyzeContext.prototype.ALL = function() {
    return this.getToken(SqlBaseParser.ALL, 0);
};

function CreateHiveTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.columns = null; // ColTypeListContext;
    this.comment = null; // Token;
    this.partitionColumns = null; // ColTypeListContext;
    this.partitionColumnNames = null; // IdentifierListContext;
    this.tableProps = null; // TablePropertyListContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateHiveTableContext.prototype = Object.create(StatementContext.prototype);
CreateHiveTableContext.prototype.constructor = CreateHiveTableContext;

SqlBaseParser.CreateHiveTableContext = CreateHiveTableContext;

CreateHiveTableContext.prototype.createTableHeader = function() {
    return this.getTypedRuleContext(CreateTableHeaderContext,0);
};

CreateHiveTableContext.prototype.bucketSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BucketSpecContext);
    } else {
        return this.getTypedRuleContext(BucketSpecContext,i);
    }
};

CreateHiveTableContext.prototype.skewSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SkewSpecContext);
    } else {
        return this.getTypedRuleContext(SkewSpecContext,i);
    }
};

CreateHiveTableContext.prototype.rowFormat = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RowFormatContext);
    } else {
        return this.getTypedRuleContext(RowFormatContext,i);
    }
};

CreateHiveTableContext.prototype.createFileFormat = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CreateFileFormatContext);
    } else {
        return this.getTypedRuleContext(CreateFileFormatContext,i);
    }
};

CreateHiveTableContext.prototype.locationSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LocationSpecContext);
    } else {
        return this.getTypedRuleContext(LocationSpecContext,i);
    }
};

CreateHiveTableContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

CreateHiveTableContext.prototype.colTypeList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColTypeListContext);
    } else {
        return this.getTypedRuleContext(ColTypeListContext,i);
    }
};

CreateHiveTableContext.prototype.COMMENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.COMMENT);
    } else {
        return this.getToken(SqlBaseParser.COMMENT, i);
    }
};


CreateHiveTableContext.prototype.PARTITIONED = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.PARTITIONED);
    } else {
        return this.getToken(SqlBaseParser.PARTITIONED, i);
    }
};


CreateHiveTableContext.prototype.BY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.BY);
    } else {
        return this.getToken(SqlBaseParser.BY, i);
    }
};


CreateHiveTableContext.prototype.TBLPROPERTIES = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.TBLPROPERTIES);
    } else {
        return this.getToken(SqlBaseParser.TBLPROPERTIES, i);
    }
};


CreateHiveTableContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.STRING);
    } else {
        return this.getToken(SqlBaseParser.STRING, i);
    }
};


CreateHiveTableContext.prototype.identifierList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierListContext);
    } else {
        return this.getTypedRuleContext(IdentifierListContext,i);
    }
};

CreateHiveTableContext.prototype.tablePropertyList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TablePropertyListContext);
    } else {
        return this.getTypedRuleContext(TablePropertyListContext,i);
    }
};

CreateHiveTableContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

function CreateFunctionContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.className = null; // Token;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateFunctionContext.prototype = Object.create(StatementContext.prototype);
CreateFunctionContext.prototype.constructor = CreateFunctionContext;

SqlBaseParser.CreateFunctionContext = CreateFunctionContext;

CreateFunctionContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

CreateFunctionContext.prototype.FUNCTION = function() {
    return this.getToken(SqlBaseParser.FUNCTION, 0);
};

CreateFunctionContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

CreateFunctionContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

CreateFunctionContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

CreateFunctionContext.prototype.OR = function() {
    return this.getToken(SqlBaseParser.OR, 0);
};

CreateFunctionContext.prototype.REPLACE = function() {
    return this.getToken(SqlBaseParser.REPLACE, 0);
};

CreateFunctionContext.prototype.TEMPORARY = function() {
    return this.getToken(SqlBaseParser.TEMPORARY, 0);
};

CreateFunctionContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

CreateFunctionContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

CreateFunctionContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

CreateFunctionContext.prototype.USING = function() {
    return this.getToken(SqlBaseParser.USING, 0);
};

CreateFunctionContext.prototype.resource = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ResourceContext);
    } else {
        return this.getTypedRuleContext(ResourceContext,i);
    }
};

function ShowTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.db = null; // ErrorCapturingIdentifierContext;
    this.pattern = null; // Token;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowTableContext.prototype = Object.create(StatementContext.prototype);
ShowTableContext.prototype.constructor = ShowTableContext;

SqlBaseParser.ShowTableContext = ShowTableContext;

ShowTableContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

ShowTableContext.prototype.EXTENDED = function() {
    return this.getToken(SqlBaseParser.EXTENDED, 0);
};

ShowTableContext.prototype.LIKE = function() {
    return this.getToken(SqlBaseParser.LIKE, 0);
};

ShowTableContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

ShowTableContext.prototype.partitionSpec = function() {
    return this.getTypedRuleContext(PartitionSpecContext,0);
};

ShowTableContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

ShowTableContext.prototype.IN = function() {
    return this.getToken(SqlBaseParser.IN, 0);
};

ShowTableContext.prototype.errorCapturingIdentifier = function() {
    return this.getTypedRuleContext(ErrorCapturingIdentifierContext,0);
};

function SetDatabaseLocationContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.db = null; // ErrorCapturingIdentifierContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetDatabaseLocationContext.prototype = Object.create(StatementContext.prototype);
SetDatabaseLocationContext.prototype.constructor = SetDatabaseLocationContext;

SqlBaseParser.SetDatabaseLocationContext = SetDatabaseLocationContext;

SetDatabaseLocationContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

SetDatabaseLocationContext.prototype.database = function() {
    return this.getTypedRuleContext(DatabaseContext,0);
};

SetDatabaseLocationContext.prototype.SET = function() {
    return this.getToken(SqlBaseParser.SET, 0);
};

SetDatabaseLocationContext.prototype.locationSpec = function() {
    return this.getTypedRuleContext(LocationSpecContext,0);
};

SetDatabaseLocationContext.prototype.errorCapturingIdentifier = function() {
    return this.getTypedRuleContext(ErrorCapturingIdentifierContext,0);
};

function SetDatabasePropertiesContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.db = null; // ErrorCapturingIdentifierContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetDatabasePropertiesContext.prototype = Object.create(StatementContext.prototype);
SetDatabasePropertiesContext.prototype.constructor = SetDatabasePropertiesContext;

SqlBaseParser.SetDatabasePropertiesContext = SetDatabasePropertiesContext;

SetDatabasePropertiesContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

SetDatabasePropertiesContext.prototype.database = function() {
    return this.getTypedRuleContext(DatabaseContext,0);
};

SetDatabasePropertiesContext.prototype.SET = function() {
    return this.getToken(SqlBaseParser.SET, 0);
};

SetDatabasePropertiesContext.prototype.DBPROPERTIES = function() {
    return this.getToken(SqlBaseParser.DBPROPERTIES, 0);
};

SetDatabasePropertiesContext.prototype.tablePropertyList = function() {
    return this.getTypedRuleContext(TablePropertyListContext,0);
};

SetDatabasePropertiesContext.prototype.errorCapturingIdentifier = function() {
    return this.getTypedRuleContext(ErrorCapturingIdentifierContext,0);
};

function CreateTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.options = null; // TablePropertyListContext;
    this.partitioning = null; // TransformListContext;
    this.comment = null; // Token;
    this.tableProps = null; // TablePropertyListContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateTableContext.prototype = Object.create(StatementContext.prototype);
CreateTableContext.prototype.constructor = CreateTableContext;

SqlBaseParser.CreateTableContext = CreateTableContext;

CreateTableContext.prototype.createTableHeader = function() {
    return this.getTypedRuleContext(CreateTableHeaderContext,0);
};

CreateTableContext.prototype.tableProvider = function() {
    return this.getTypedRuleContext(TableProviderContext,0);
};

CreateTableContext.prototype.colTypeList = function() {
    return this.getTypedRuleContext(ColTypeListContext,0);
};

CreateTableContext.prototype.bucketSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BucketSpecContext);
    } else {
        return this.getTypedRuleContext(BucketSpecContext,i);
    }
};

CreateTableContext.prototype.locationSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LocationSpecContext);
    } else {
        return this.getTypedRuleContext(LocationSpecContext,i);
    }
};

CreateTableContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

CreateTableContext.prototype.OPTIONS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.OPTIONS);
    } else {
        return this.getToken(SqlBaseParser.OPTIONS, i);
    }
};


CreateTableContext.prototype.PARTITIONED = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.PARTITIONED);
    } else {
        return this.getToken(SqlBaseParser.PARTITIONED, i);
    }
};


CreateTableContext.prototype.BY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.BY);
    } else {
        return this.getToken(SqlBaseParser.BY, i);
    }
};


CreateTableContext.prototype.COMMENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.COMMENT);
    } else {
        return this.getToken(SqlBaseParser.COMMENT, i);
    }
};


CreateTableContext.prototype.TBLPROPERTIES = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.TBLPROPERTIES);
    } else {
        return this.getToken(SqlBaseParser.TBLPROPERTIES, i);
    }
};


CreateTableContext.prototype.tablePropertyList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TablePropertyListContext);
    } else {
        return this.getTypedRuleContext(TablePropertyListContext,i);
    }
};

CreateTableContext.prototype.transformList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TransformListContext);
    } else {
        return this.getTypedRuleContext(TransformListContext,i);
    }
};

CreateTableContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.STRING);
    } else {
        return this.getToken(SqlBaseParser.STRING, i);
    }
};


CreateTableContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

function DmlStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DmlStatementContext.prototype = Object.create(StatementContext.prototype);
DmlStatementContext.prototype.constructor = DmlStatementContext;

SqlBaseParser.DmlStatementContext = DmlStatementContext;

DmlStatementContext.prototype.dmlStatementNoWith = function() {
    return this.getTypedRuleContext(DmlStatementNoWithContext,0);
};

DmlStatementContext.prototype.ctes = function() {
    return this.getTypedRuleContext(CtesContext,0);
};

function DescribeTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.option = null; // Token;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DescribeTableContext.prototype = Object.create(StatementContext.prototype);
DescribeTableContext.prototype.constructor = DescribeTableContext;

SqlBaseParser.DescribeTableContext = DescribeTableContext;

DescribeTableContext.prototype.multipartIdentifier = function() {
    return this.getTypedRuleContext(MultipartIdentifierContext,0);
};

DescribeTableContext.prototype.DESC = function() {
    return this.getToken(SqlBaseParser.DESC, 0);
};

DescribeTableContext.prototype.DESCRIBE = function() {
    return this.getToken(SqlBaseParser.DESCRIBE, 0);
};

DescribeTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

DescribeTableContext.prototype.partitionSpec = function() {
    return this.getTypedRuleContext(PartitionSpecContext,0);
};

DescribeTableContext.prototype.describeColName = function() {
    return this.getTypedRuleContext(DescribeColNameContext,0);
};

DescribeTableContext.prototype.EXTENDED = function() {
    return this.getToken(SqlBaseParser.EXTENDED, 0);
};

DescribeTableContext.prototype.FORMATTED = function() {
    return this.getToken(SqlBaseParser.FORMATTED, 0);
};

function CreateTableLikeContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.target = null; // TableIdentifierContext;
    this.source = null; // TableIdentifierContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateTableLikeContext.prototype = Object.create(StatementContext.prototype);
CreateTableLikeContext.prototype.constructor = CreateTableLikeContext;

SqlBaseParser.CreateTableLikeContext = CreateTableLikeContext;

CreateTableLikeContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

CreateTableLikeContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

CreateTableLikeContext.prototype.LIKE = function() {
    return this.getToken(SqlBaseParser.LIKE, 0);
};

CreateTableLikeContext.prototype.tableIdentifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableIdentifierContext);
    } else {
        return this.getTypedRuleContext(TableIdentifierContext,i);
    }
};

CreateTableLikeContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

CreateTableLikeContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

CreateTableLikeContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

CreateTableLikeContext.prototype.locationSpec = function() {
    return this.getTypedRuleContext(LocationSpecContext,0);
};

function UncacheTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UncacheTableContext.prototype = Object.create(StatementContext.prototype);
UncacheTableContext.prototype.constructor = UncacheTableContext;

SqlBaseParser.UncacheTableContext = UncacheTableContext;

UncacheTableContext.prototype.UNCACHE = function() {
    return this.getToken(SqlBaseParser.UNCACHE, 0);
};

UncacheTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

UncacheTableContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

UncacheTableContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

UncacheTableContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

function DropFunctionContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DropFunctionContext.prototype = Object.create(StatementContext.prototype);
DropFunctionContext.prototype.constructor = DropFunctionContext;

SqlBaseParser.DropFunctionContext = DropFunctionContext;

DropFunctionContext.prototype.DROP = function() {
    return this.getToken(SqlBaseParser.DROP, 0);
};

DropFunctionContext.prototype.FUNCTION = function() {
    return this.getToken(SqlBaseParser.FUNCTION, 0);
};

DropFunctionContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

DropFunctionContext.prototype.TEMPORARY = function() {
    return this.getToken(SqlBaseParser.TEMPORARY, 0);
};

DropFunctionContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

DropFunctionContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

function LoadDataContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.path = null; // Token;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LoadDataContext.prototype = Object.create(StatementContext.prototype);
LoadDataContext.prototype.constructor = LoadDataContext;

SqlBaseParser.LoadDataContext = LoadDataContext;

LoadDataContext.prototype.LOAD = function() {
    return this.getToken(SqlBaseParser.LOAD, 0);
};

LoadDataContext.prototype.DATA = function() {
    return this.getToken(SqlBaseParser.DATA, 0);
};

LoadDataContext.prototype.INPATH = function() {
    return this.getToken(SqlBaseParser.INPATH, 0);
};

LoadDataContext.prototype.INTO = function() {
    return this.getToken(SqlBaseParser.INTO, 0);
};

LoadDataContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

LoadDataContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

LoadDataContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

LoadDataContext.prototype.LOCAL = function() {
    return this.getToken(SqlBaseParser.LOCAL, 0);
};

LoadDataContext.prototype.OVERWRITE = function() {
    return this.getToken(SqlBaseParser.OVERWRITE, 0);
};

LoadDataContext.prototype.partitionSpec = function() {
    return this.getTypedRuleContext(PartitionSpecContext,0);
};

function ShowPartitionsContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowPartitionsContext.prototype = Object.create(StatementContext.prototype);
ShowPartitionsContext.prototype.constructor = ShowPartitionsContext;

SqlBaseParser.ShowPartitionsContext = ShowPartitionsContext;

ShowPartitionsContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowPartitionsContext.prototype.PARTITIONS = function() {
    return this.getToken(SqlBaseParser.PARTITIONS, 0);
};

ShowPartitionsContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

ShowPartitionsContext.prototype.partitionSpec = function() {
    return this.getTypedRuleContext(PartitionSpecContext,0);
};

function DescribeFunctionContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DescribeFunctionContext.prototype = Object.create(StatementContext.prototype);
DescribeFunctionContext.prototype.constructor = DescribeFunctionContext;

SqlBaseParser.DescribeFunctionContext = DescribeFunctionContext;

DescribeFunctionContext.prototype.FUNCTION = function() {
    return this.getToken(SqlBaseParser.FUNCTION, 0);
};

DescribeFunctionContext.prototype.describeFuncName = function() {
    return this.getTypedRuleContext(DescribeFuncNameContext,0);
};

DescribeFunctionContext.prototype.DESC = function() {
    return this.getToken(SqlBaseParser.DESC, 0);
};

DescribeFunctionContext.prototype.DESCRIBE = function() {
    return this.getToken(SqlBaseParser.DESCRIBE, 0);
};

DescribeFunctionContext.prototype.EXTENDED = function() {
    return this.getToken(SqlBaseParser.EXTENDED, 0);
};

function RenameTableColumnContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.from = null; // QualifiedNameContext;
    this.to = null; // IdentifierContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RenameTableColumnContext.prototype = Object.create(StatementContext.prototype);
RenameTableColumnContext.prototype.constructor = RenameTableColumnContext;

SqlBaseParser.RenameTableColumnContext = RenameTableColumnContext;

RenameTableColumnContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

RenameTableColumnContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

RenameTableColumnContext.prototype.multipartIdentifier = function() {
    return this.getTypedRuleContext(MultipartIdentifierContext,0);
};

RenameTableColumnContext.prototype.RENAME = function() {
    return this.getToken(SqlBaseParser.RENAME, 0);
};

RenameTableColumnContext.prototype.COLUMN = function() {
    return this.getToken(SqlBaseParser.COLUMN, 0);
};

RenameTableColumnContext.prototype.TO = function() {
    return this.getToken(SqlBaseParser.TO, 0);
};

RenameTableColumnContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

RenameTableColumnContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

function ChangeColumnContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.colName = null; // ErrorCapturingIdentifierContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ChangeColumnContext.prototype = Object.create(StatementContext.prototype);
ChangeColumnContext.prototype.constructor = ChangeColumnContext;

SqlBaseParser.ChangeColumnContext = ChangeColumnContext;

ChangeColumnContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

ChangeColumnContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

ChangeColumnContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

ChangeColumnContext.prototype.CHANGE = function() {
    return this.getToken(SqlBaseParser.CHANGE, 0);
};

ChangeColumnContext.prototype.colType = function() {
    return this.getTypedRuleContext(ColTypeContext,0);
};

ChangeColumnContext.prototype.errorCapturingIdentifier = function() {
    return this.getTypedRuleContext(ErrorCapturingIdentifierContext,0);
};

ChangeColumnContext.prototype.partitionSpec = function() {
    return this.getTypedRuleContext(PartitionSpecContext,0);
};

ChangeColumnContext.prototype.COLUMN = function() {
    return this.getToken(SqlBaseParser.COLUMN, 0);
};

ChangeColumnContext.prototype.colPosition = function() {
    return this.getTypedRuleContext(ColPositionContext,0);
};

function StatementDefaultContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StatementDefaultContext.prototype = Object.create(StatementContext.prototype);
StatementDefaultContext.prototype.constructor = StatementDefaultContext;

SqlBaseParser.StatementDefaultContext = StatementDefaultContext;

StatementDefaultContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

function DescribeQueryContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DescribeQueryContext.prototype = Object.create(StatementContext.prototype);
DescribeQueryContext.prototype.constructor = DescribeQueryContext;

SqlBaseParser.DescribeQueryContext = DescribeQueryContext;

DescribeQueryContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

DescribeQueryContext.prototype.DESC = function() {
    return this.getToken(SqlBaseParser.DESC, 0);
};

DescribeQueryContext.prototype.DESCRIBE = function() {
    return this.getToken(SqlBaseParser.DESCRIBE, 0);
};

DescribeQueryContext.prototype.QUERY = function() {
    return this.getToken(SqlBaseParser.QUERY, 0);
};

function TruncateTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TruncateTableContext.prototype = Object.create(StatementContext.prototype);
TruncateTableContext.prototype.constructor = TruncateTableContext;

SqlBaseParser.TruncateTableContext = TruncateTableContext;

TruncateTableContext.prototype.TRUNCATE = function() {
    return this.getToken(SqlBaseParser.TRUNCATE, 0);
};

TruncateTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

TruncateTableContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

TruncateTableContext.prototype.partitionSpec = function() {
    return this.getTypedRuleContext(PartitionSpecContext,0);
};

function SetTableSerDeContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetTableSerDeContext.prototype = Object.create(StatementContext.prototype);
SetTableSerDeContext.prototype.constructor = SetTableSerDeContext;

SqlBaseParser.SetTableSerDeContext = SetTableSerDeContext;

SetTableSerDeContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

SetTableSerDeContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

SetTableSerDeContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

SetTableSerDeContext.prototype.SET = function() {
    return this.getToken(SqlBaseParser.SET, 0);
};

SetTableSerDeContext.prototype.SERDE = function() {
    return this.getToken(SqlBaseParser.SERDE, 0);
};

SetTableSerDeContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

SetTableSerDeContext.prototype.partitionSpec = function() {
    return this.getTypedRuleContext(PartitionSpecContext,0);
};

SetTableSerDeContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

SetTableSerDeContext.prototype.SERDEPROPERTIES = function() {
    return this.getToken(SqlBaseParser.SERDEPROPERTIES, 0);
};

SetTableSerDeContext.prototype.tablePropertyList = function() {
    return this.getTypedRuleContext(TablePropertyListContext,0);
};

function CreateViewContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateViewContext.prototype = Object.create(StatementContext.prototype);
CreateViewContext.prototype.constructor = CreateViewContext;

SqlBaseParser.CreateViewContext = CreateViewContext;

CreateViewContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

CreateViewContext.prototype.VIEW = function() {
    return this.getToken(SqlBaseParser.VIEW, 0);
};

CreateViewContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

CreateViewContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

CreateViewContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

CreateViewContext.prototype.OR = function() {
    return this.getToken(SqlBaseParser.OR, 0);
};

CreateViewContext.prototype.REPLACE = function() {
    return this.getToken(SqlBaseParser.REPLACE, 0);
};

CreateViewContext.prototype.TEMPORARY = function() {
    return this.getToken(SqlBaseParser.TEMPORARY, 0);
};

CreateViewContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

CreateViewContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

CreateViewContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

CreateViewContext.prototype.identifierCommentList = function() {
    return this.getTypedRuleContext(IdentifierCommentListContext,0);
};

CreateViewContext.prototype.COMMENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.COMMENT);
    } else {
        return this.getToken(SqlBaseParser.COMMENT, i);
    }
};


CreateViewContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.STRING);
    } else {
        return this.getToken(SqlBaseParser.STRING, i);
    }
};


CreateViewContext.prototype.PARTITIONED = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.PARTITIONED);
    } else {
        return this.getToken(SqlBaseParser.PARTITIONED, i);
    }
};


CreateViewContext.prototype.ON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.ON);
    } else {
        return this.getToken(SqlBaseParser.ON, i);
    }
};


CreateViewContext.prototype.identifierList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierListContext);
    } else {
        return this.getTypedRuleContext(IdentifierListContext,i);
    }
};

CreateViewContext.prototype.TBLPROPERTIES = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.TBLPROPERTIES);
    } else {
        return this.getToken(SqlBaseParser.TBLPROPERTIES, i);
    }
};


CreateViewContext.prototype.tablePropertyList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TablePropertyListContext);
    } else {
        return this.getTypedRuleContext(TablePropertyListContext,i);
    }
};

CreateViewContext.prototype.GLOBAL = function() {
    return this.getToken(SqlBaseParser.GLOBAL, 0);
};

function DropTablePartitionsContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DropTablePartitionsContext.prototype = Object.create(StatementContext.prototype);
DropTablePartitionsContext.prototype.constructor = DropTablePartitionsContext;

SqlBaseParser.DropTablePartitionsContext = DropTablePartitionsContext;

DropTablePartitionsContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

DropTablePartitionsContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

DropTablePartitionsContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

DropTablePartitionsContext.prototype.DROP = function() {
    return this.getToken(SqlBaseParser.DROP, 0);
};

DropTablePartitionsContext.prototype.partitionSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartitionSpecContext);
    } else {
        return this.getTypedRuleContext(PartitionSpecContext,i);
    }
};

DropTablePartitionsContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

DropTablePartitionsContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

DropTablePartitionsContext.prototype.PURGE = function() {
    return this.getToken(SqlBaseParser.PURGE, 0);
};

DropTablePartitionsContext.prototype.VIEW = function() {
    return this.getToken(SqlBaseParser.VIEW, 0);
};

function SetConfigurationContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetConfigurationContext.prototype = Object.create(StatementContext.prototype);
SetConfigurationContext.prototype.constructor = SetConfigurationContext;

SqlBaseParser.SetConfigurationContext = SetConfigurationContext;

SetConfigurationContext.prototype.SET = function() {
    return this.getToken(SqlBaseParser.SET, 0);
};

function DropTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DropTableContext.prototype = Object.create(StatementContext.prototype);
DropTableContext.prototype.constructor = DropTableContext;

SqlBaseParser.DropTableContext = DropTableContext;

DropTableContext.prototype.DROP = function() {
    return this.getToken(SqlBaseParser.DROP, 0);
};

DropTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

DropTableContext.prototype.multipartIdentifier = function() {
    return this.getTypedRuleContext(MultipartIdentifierContext,0);
};

DropTableContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

DropTableContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

DropTableContext.prototype.PURGE = function() {
    return this.getToken(SqlBaseParser.PURGE, 0);
};

function AlterTableColumnContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.comment = null; // Token;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterTableColumnContext.prototype = Object.create(StatementContext.prototype);
AlterTableColumnContext.prototype.constructor = AlterTableColumnContext;

SqlBaseParser.AlterTableColumnContext = AlterTableColumnContext;

AlterTableColumnContext.prototype.ALTER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.ALTER);
    } else {
        return this.getToken(SqlBaseParser.ALTER, i);
    }
};


AlterTableColumnContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

AlterTableColumnContext.prototype.multipartIdentifier = function() {
    return this.getTypedRuleContext(MultipartIdentifierContext,0);
};

AlterTableColumnContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

AlterTableColumnContext.prototype.CHANGE = function() {
    return this.getToken(SqlBaseParser.CHANGE, 0);
};

AlterTableColumnContext.prototype.COLUMN = function() {
    return this.getToken(SqlBaseParser.COLUMN, 0);
};

AlterTableColumnContext.prototype.TYPE = function() {
    return this.getToken(SqlBaseParser.TYPE, 0);
};

AlterTableColumnContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

AlterTableColumnContext.prototype.COMMENT = function() {
    return this.getToken(SqlBaseParser.COMMENT, 0);
};

AlterTableColumnContext.prototype.colPosition = function() {
    return this.getTypedRuleContext(ColPositionContext,0);
};

AlterTableColumnContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

function ShowTblPropertiesContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.table = null; // TableIdentifierContext;
    this.key = null; // TablePropertyKeyContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowTblPropertiesContext.prototype = Object.create(StatementContext.prototype);
ShowTblPropertiesContext.prototype.constructor = ShowTblPropertiesContext;

SqlBaseParser.ShowTblPropertiesContext = ShowTblPropertiesContext;

ShowTblPropertiesContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowTblPropertiesContext.prototype.TBLPROPERTIES = function() {
    return this.getToken(SqlBaseParser.TBLPROPERTIES, 0);
};

ShowTblPropertiesContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

ShowTblPropertiesContext.prototype.tablePropertyKey = function() {
    return this.getTypedRuleContext(TablePropertyKeyContext,0);
};

function SetPartitionLocationContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetPartitionLocationContext.prototype = Object.create(StatementContext.prototype);
SetPartitionLocationContext.prototype.constructor = SetPartitionLocationContext;

SqlBaseParser.SetPartitionLocationContext = SetPartitionLocationContext;

SetPartitionLocationContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

SetPartitionLocationContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

SetPartitionLocationContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

SetPartitionLocationContext.prototype.partitionSpec = function() {
    return this.getTypedRuleContext(PartitionSpecContext,0);
};

SetPartitionLocationContext.prototype.SET = function() {
    return this.getToken(SqlBaseParser.SET, 0);
};

SetPartitionLocationContext.prototype.locationSpec = function() {
    return this.getTypedRuleContext(LocationSpecContext,0);
};

function UnsetTablePropertiesContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnsetTablePropertiesContext.prototype = Object.create(StatementContext.prototype);
UnsetTablePropertiesContext.prototype.constructor = UnsetTablePropertiesContext;

SqlBaseParser.UnsetTablePropertiesContext = UnsetTablePropertiesContext;

UnsetTablePropertiesContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

UnsetTablePropertiesContext.prototype.multipartIdentifier = function() {
    return this.getTypedRuleContext(MultipartIdentifierContext,0);
};

UnsetTablePropertiesContext.prototype.UNSET = function() {
    return this.getToken(SqlBaseParser.UNSET, 0);
};

UnsetTablePropertiesContext.prototype.TBLPROPERTIES = function() {
    return this.getToken(SqlBaseParser.TBLPROPERTIES, 0);
};

UnsetTablePropertiesContext.prototype.tablePropertyList = function() {
    return this.getTypedRuleContext(TablePropertyListContext,0);
};

UnsetTablePropertiesContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

UnsetTablePropertiesContext.prototype.VIEW = function() {
    return this.getToken(SqlBaseParser.VIEW, 0);
};

UnsetTablePropertiesContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

UnsetTablePropertiesContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

function SetTableLocationContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetTableLocationContext.prototype = Object.create(StatementContext.prototype);
SetTableLocationContext.prototype.constructor = SetTableLocationContext;

SqlBaseParser.SetTableLocationContext = SetTableLocationContext;

SetTableLocationContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

SetTableLocationContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

SetTableLocationContext.prototype.multipartIdentifier = function() {
    return this.getTypedRuleContext(MultipartIdentifierContext,0);
};

SetTableLocationContext.prototype.SET = function() {
    return this.getToken(SqlBaseParser.SET, 0);
};

SetTableLocationContext.prototype.locationSpec = function() {
    return this.getTypedRuleContext(LocationSpecContext,0);
};

function DropTableColumnsContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.columns = null; // QualifiedNameListContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DropTableColumnsContext.prototype = Object.create(StatementContext.prototype);
DropTableColumnsContext.prototype.constructor = DropTableColumnsContext;

SqlBaseParser.DropTableColumnsContext = DropTableColumnsContext;

DropTableColumnsContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

DropTableColumnsContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

DropTableColumnsContext.prototype.multipartIdentifier = function() {
    return this.getTypedRuleContext(MultipartIdentifierContext,0);
};

DropTableColumnsContext.prototype.DROP = function() {
    return this.getToken(SqlBaseParser.DROP, 0);
};

DropTableColumnsContext.prototype.COLUMN = function() {
    return this.getToken(SqlBaseParser.COLUMN, 0);
};

DropTableColumnsContext.prototype.COLUMNS = function() {
    return this.getToken(SqlBaseParser.COLUMNS, 0);
};

DropTableColumnsContext.prototype.qualifiedNameList = function() {
    return this.getTypedRuleContext(QualifiedNameListContext,0);
};

function ShowFunctionsContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.pattern = null; // Token;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowFunctionsContext.prototype = Object.create(StatementContext.prototype);
ShowFunctionsContext.prototype.constructor = ShowFunctionsContext;

SqlBaseParser.ShowFunctionsContext = ShowFunctionsContext;

ShowFunctionsContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowFunctionsContext.prototype.FUNCTIONS = function() {
    return this.getToken(SqlBaseParser.FUNCTIONS, 0);
};

ShowFunctionsContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ShowFunctionsContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

ShowFunctionsContext.prototype.LIKE = function() {
    return this.getToken(SqlBaseParser.LIKE, 0);
};

ShowFunctionsContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

function CacheTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.options = null; // TablePropertyListContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CacheTableContext.prototype = Object.create(StatementContext.prototype);
CacheTableContext.prototype.constructor = CacheTableContext;

SqlBaseParser.CacheTableContext = CacheTableContext;

CacheTableContext.prototype.CACHE = function() {
    return this.getToken(SqlBaseParser.CACHE, 0);
};

CacheTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

CacheTableContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

CacheTableContext.prototype.LAZY = function() {
    return this.getToken(SqlBaseParser.LAZY, 0);
};

CacheTableContext.prototype.OPTIONS = function() {
    return this.getToken(SqlBaseParser.OPTIONS, 0);
};

CacheTableContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

CacheTableContext.prototype.tablePropertyList = function() {
    return this.getTypedRuleContext(TablePropertyListContext,0);
};

CacheTableContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

function AddTableColumnsContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.columns = null; // QualifiedColTypeWithPositionListContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AddTableColumnsContext.prototype = Object.create(StatementContext.prototype);
AddTableColumnsContext.prototype.constructor = AddTableColumnsContext;

SqlBaseParser.AddTableColumnsContext = AddTableColumnsContext;

AddTableColumnsContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

AddTableColumnsContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

AddTableColumnsContext.prototype.multipartIdentifier = function() {
    return this.getTypedRuleContext(MultipartIdentifierContext,0);
};

AddTableColumnsContext.prototype.ADD = function() {
    return this.getToken(SqlBaseParser.ADD, 0);
};

AddTableColumnsContext.prototype.COLUMN = function() {
    return this.getToken(SqlBaseParser.COLUMN, 0);
};

AddTableColumnsContext.prototype.COLUMNS = function() {
    return this.getToken(SqlBaseParser.COLUMNS, 0);
};

AddTableColumnsContext.prototype.qualifiedColTypeWithPositionList = function() {
    return this.getTypedRuleContext(QualifiedColTypeWithPositionListContext,0);
};

function SetTablePropertiesContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetTablePropertiesContext.prototype = Object.create(StatementContext.prototype);
SetTablePropertiesContext.prototype.constructor = SetTablePropertiesContext;

SqlBaseParser.SetTablePropertiesContext = SetTablePropertiesContext;

SetTablePropertiesContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

SetTablePropertiesContext.prototype.multipartIdentifier = function() {
    return this.getTypedRuleContext(MultipartIdentifierContext,0);
};

SetTablePropertiesContext.prototype.SET = function() {
    return this.getToken(SqlBaseParser.SET, 0);
};

SetTablePropertiesContext.prototype.TBLPROPERTIES = function() {
    return this.getToken(SqlBaseParser.TBLPROPERTIES, 0);
};

SetTablePropertiesContext.prototype.tablePropertyList = function() {
    return this.getTypedRuleContext(TablePropertyListContext,0);
};

SetTablePropertiesContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

SetTablePropertiesContext.prototype.VIEW = function() {
    return this.getToken(SqlBaseParser.VIEW, 0);
};


SqlBaseParser.StatementContext = StatementContext;

SqlBaseParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, SqlBaseParser.RULE_statement);
    var _la = 0; // Token type
    try {
        this.state = 1007;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
        switch(la_) {
        case 1:
            localctx = new StatementDefaultContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 269;
            this.query();
            break;

        case 2:
            localctx = new DmlStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 271;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.WITH) {
                this.state = 270;
                this.ctes();
            }

            this.state = 273;
            this.dmlStatementNoWith();
            break;

        case 3:
            localctx = new UseContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 274;
            this.match(SqlBaseParser.USE);
            this.state = 276;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
            if(la_===1) {
                this.state = 275;
                this.match(SqlBaseParser.NAMESPACE);

            }
            this.state = 278;
            this.multipartIdentifier();
            break;

        case 4:
            localctx = new CreateDatabaseContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 279;
            this.match(SqlBaseParser.CREATE);
            this.state = 280;
            this.database();
            this.state = 284;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
            if(la_===1) {
                this.state = 281;
                this.match(SqlBaseParser.IF);
                this.state = 282;
                this.match(SqlBaseParser.NOT);
                this.state = 283;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 286;
            localctx.db = this.errorCapturingIdentifier();
            this.state = 295;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.COMMENT || _la===SqlBaseParser.LOCATION || _la===SqlBaseParser.WITH) {
                this.state = 293;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case SqlBaseParser.COMMENT:
                    this.state = 287;
                    this.match(SqlBaseParser.COMMENT);
                    this.state = 288;
                    localctx.comment = this.match(SqlBaseParser.STRING);
                    break;
                case SqlBaseParser.LOCATION:
                    this.state = 289;
                    this.locationSpec();
                    break;
                case SqlBaseParser.WITH:
                    this.state = 290;
                    this.match(SqlBaseParser.WITH);
                    this.state = 291;
                    this.match(SqlBaseParser.DBPROPERTIES);
                    this.state = 292;
                    this.tablePropertyList();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 297;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 5:
            localctx = new SetDatabasePropertiesContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 298;
            this.match(SqlBaseParser.ALTER);
            this.state = 299;
            this.database();
            this.state = 300;
            localctx.db = this.errorCapturingIdentifier();
            this.state = 301;
            this.match(SqlBaseParser.SET);
            this.state = 302;
            this.match(SqlBaseParser.DBPROPERTIES);
            this.state = 303;
            this.tablePropertyList();
            break;

        case 6:
            localctx = new SetDatabaseLocationContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 305;
            this.match(SqlBaseParser.ALTER);
            this.state = 306;
            this.database();
            this.state = 307;
            localctx.db = this.errorCapturingIdentifier();
            this.state = 308;
            this.match(SqlBaseParser.SET);
            this.state = 309;
            this.locationSpec();
            break;

        case 7:
            localctx = new DropDatabaseContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 311;
            this.match(SqlBaseParser.DROP);
            this.state = 312;
            this.database();
            this.state = 315;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
            if(la_===1) {
                this.state = 313;
                this.match(SqlBaseParser.IF);
                this.state = 314;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 317;
            localctx.db = this.errorCapturingIdentifier();
            this.state = 319;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.CASCADE || _la===SqlBaseParser.RESTRICT) {
                this.state = 318;
                _la = this._input.LA(1);
                if(!(_la===SqlBaseParser.CASCADE || _la===SqlBaseParser.RESTRICT)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            break;

        case 8:
            localctx = new ShowNamespacesContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 321;
            this.match(SqlBaseParser.SHOW);
            this.state = 322;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.DATABASES || _la===SqlBaseParser.NAMESPACES)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 325;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN) {
                this.state = 323;
                _la = this._input.LA(1);
                if(!(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 324;
                this.multipartIdentifier();
            }

            this.state = 331;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.LIKE || _la===SqlBaseParser.STRING) {
                this.state = 328;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlBaseParser.LIKE) {
                    this.state = 327;
                    this.match(SqlBaseParser.LIKE);
                }

                this.state = 330;
                localctx.pattern = this.match(SqlBaseParser.STRING);
            }

            break;

        case 9:
            localctx = new CreateTableContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 333;
            this.createTableHeader();
            this.state = 338;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.T__0) {
                this.state = 334;
                this.match(SqlBaseParser.T__0);
                this.state = 335;
                this.colTypeList();
                this.state = 336;
                this.match(SqlBaseParser.T__1);
            }

            this.state = 340;
            this.tableProvider();
            this.state = 354;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.CLUSTERED || _la===SqlBaseParser.COMMENT || _la===SqlBaseParser.LOCATION || _la===SqlBaseParser.OPTIONS || _la===SqlBaseParser.PARTITIONED || _la===SqlBaseParser.TBLPROPERTIES) {
                this.state = 352;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case SqlBaseParser.OPTIONS:
                    this.state = 341;
                    this.match(SqlBaseParser.OPTIONS);
                    this.state = 342;
                    localctx.options = this.tablePropertyList();
                    break;
                case SqlBaseParser.PARTITIONED:
                    this.state = 343;
                    this.match(SqlBaseParser.PARTITIONED);
                    this.state = 344;
                    this.match(SqlBaseParser.BY);
                    this.state = 345;
                    localctx.partitioning = this.transformList();
                    break;
                case SqlBaseParser.CLUSTERED:
                    this.state = 346;
                    this.bucketSpec();
                    break;
                case SqlBaseParser.LOCATION:
                    this.state = 347;
                    this.locationSpec();
                    break;
                case SqlBaseParser.COMMENT:
                    this.state = 348;
                    this.match(SqlBaseParser.COMMENT);
                    this.state = 349;
                    localctx.comment = this.match(SqlBaseParser.STRING);
                    break;
                case SqlBaseParser.TBLPROPERTIES:
                    this.state = 350;
                    this.match(SqlBaseParser.TBLPROPERTIES);
                    this.state = 351;
                    localctx.tableProps = this.tablePropertyList();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 356;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 361;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.T__0 || _la===SqlBaseParser.AS || _la===SqlBaseParser.FROM || _la===SqlBaseParser.MAP || _la===SqlBaseParser.REDUCE || _la===SqlBaseParser.SELECT || _la===SqlBaseParser.TABLE || _la===SqlBaseParser.VALUES || _la===SqlBaseParser.WITH) {
                this.state = 358;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlBaseParser.AS) {
                    this.state = 357;
                    this.match(SqlBaseParser.AS);
                }

                this.state = 360;
                this.query();
            }

            break;

        case 10:
            localctx = new CreateHiveTableContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 363;
            this.createTableHeader();
            this.state = 368;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
            if(la_===1) {
                this.state = 364;
                this.match(SqlBaseParser.T__0);
                this.state = 365;
                localctx.columns = this.colTypeList();
                this.state = 366;
                this.match(SqlBaseParser.T__1);

            }
            this.state = 392;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.CLUSTERED || _la===SqlBaseParser.COMMENT || _la===SqlBaseParser.LOCATION || _la===SqlBaseParser.PARTITIONED || _la===SqlBaseParser.ROW || ((((_la - 222)) & ~0x1f) == 0 && ((1 << (_la - 222)) & ((1 << (SqlBaseParser.SKEWED - 222)) | (1 << (SqlBaseParser.STORED - 222)) | (1 << (SqlBaseParser.TBLPROPERTIES - 222)))) !== 0)) {
                this.state = 390;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case SqlBaseParser.COMMENT:
                    this.state = 370;
                    this.match(SqlBaseParser.COMMENT);
                    this.state = 371;
                    localctx.comment = this.match(SqlBaseParser.STRING);
                    break;
                case SqlBaseParser.PARTITIONED:
                    this.state = 381;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 372;
                        this.match(SqlBaseParser.PARTITIONED);
                        this.state = 373;
                        this.match(SqlBaseParser.BY);
                        this.state = 374;
                        this.match(SqlBaseParser.T__0);
                        this.state = 375;
                        localctx.partitionColumns = this.colTypeList();
                        this.state = 376;
                        this.match(SqlBaseParser.T__1);
                        break;

                    case 2:
                        this.state = 378;
                        this.match(SqlBaseParser.PARTITIONED);
                        this.state = 379;
                        this.match(SqlBaseParser.BY);
                        this.state = 380;
                        localctx.partitionColumnNames = this.identifierList();
                        break;

                    }
                    break;
                case SqlBaseParser.CLUSTERED:
                    this.state = 383;
                    this.bucketSpec();
                    break;
                case SqlBaseParser.SKEWED:
                    this.state = 384;
                    this.skewSpec();
                    break;
                case SqlBaseParser.ROW:
                    this.state = 385;
                    this.rowFormat();
                    break;
                case SqlBaseParser.STORED:
                    this.state = 386;
                    this.createFileFormat();
                    break;
                case SqlBaseParser.LOCATION:
                    this.state = 387;
                    this.locationSpec();
                    break;
                case SqlBaseParser.TBLPROPERTIES:
                    this.state = 388;
                    this.match(SqlBaseParser.TBLPROPERTIES);
                    this.state = 389;
                    localctx.tableProps = this.tablePropertyList();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 394;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 399;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.T__0 || _la===SqlBaseParser.AS || _la===SqlBaseParser.FROM || _la===SqlBaseParser.MAP || _la===SqlBaseParser.REDUCE || _la===SqlBaseParser.SELECT || _la===SqlBaseParser.TABLE || _la===SqlBaseParser.VALUES || _la===SqlBaseParser.WITH) {
                this.state = 396;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlBaseParser.AS) {
                    this.state = 395;
                    this.match(SqlBaseParser.AS);
                }

                this.state = 398;
                this.query();
            }

            break;

        case 11:
            localctx = new CreateTableLikeContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 401;
            this.match(SqlBaseParser.CREATE);
            this.state = 402;
            this.match(SqlBaseParser.TABLE);
            this.state = 406;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
            if(la_===1) {
                this.state = 403;
                this.match(SqlBaseParser.IF);
                this.state = 404;
                this.match(SqlBaseParser.NOT);
                this.state = 405;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 408;
            localctx.target = this.tableIdentifier();
            this.state = 409;
            this.match(SqlBaseParser.LIKE);
            this.state = 410;
            localctx.source = this.tableIdentifier();
            this.state = 412;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.LOCATION) {
                this.state = 411;
                this.locationSpec();
            }

            break;

        case 12:
            localctx = new ReplaceTableContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 414;
            this.replaceTableHeader();
            this.state = 419;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.T__0) {
                this.state = 415;
                this.match(SqlBaseParser.T__0);
                this.state = 416;
                this.colTypeList();
                this.state = 417;
                this.match(SqlBaseParser.T__1);
            }

            this.state = 421;
            this.tableProvider();
            this.state = 435;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.CLUSTERED || _la===SqlBaseParser.COMMENT || _la===SqlBaseParser.LOCATION || _la===SqlBaseParser.OPTIONS || _la===SqlBaseParser.PARTITIONED || _la===SqlBaseParser.TBLPROPERTIES) {
                this.state = 433;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case SqlBaseParser.OPTIONS:
                    this.state = 422;
                    this.match(SqlBaseParser.OPTIONS);
                    this.state = 423;
                    localctx.options = this.tablePropertyList();
                    break;
                case SqlBaseParser.PARTITIONED:
                    this.state = 424;
                    this.match(SqlBaseParser.PARTITIONED);
                    this.state = 425;
                    this.match(SqlBaseParser.BY);
                    this.state = 426;
                    localctx.partitioning = this.transformList();
                    break;
                case SqlBaseParser.CLUSTERED:
                    this.state = 427;
                    this.bucketSpec();
                    break;
                case SqlBaseParser.LOCATION:
                    this.state = 428;
                    this.locationSpec();
                    break;
                case SqlBaseParser.COMMENT:
                    this.state = 429;
                    this.match(SqlBaseParser.COMMENT);
                    this.state = 430;
                    localctx.comment = this.match(SqlBaseParser.STRING);
                    break;
                case SqlBaseParser.TBLPROPERTIES:
                    this.state = 431;
                    this.match(SqlBaseParser.TBLPROPERTIES);
                    this.state = 432;
                    localctx.tableProps = this.tablePropertyList();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 437;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 442;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.T__0 || _la===SqlBaseParser.AS || _la===SqlBaseParser.FROM || _la===SqlBaseParser.MAP || _la===SqlBaseParser.REDUCE || _la===SqlBaseParser.SELECT || _la===SqlBaseParser.TABLE || _la===SqlBaseParser.VALUES || _la===SqlBaseParser.WITH) {
                this.state = 439;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlBaseParser.AS) {
                    this.state = 438;
                    this.match(SqlBaseParser.AS);
                }

                this.state = 441;
                this.query();
            }

            break;

        case 13:
            localctx = new AnalyzeContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 444;
            this.match(SqlBaseParser.ANALYZE);
            this.state = 445;
            this.match(SqlBaseParser.TABLE);
            this.state = 446;
            this.tableIdentifier();
            this.state = 448;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PARTITION) {
                this.state = 447;
                this.partitionSpec();
            }

            this.state = 450;
            this.match(SqlBaseParser.COMPUTE);
            this.state = 451;
            this.match(SqlBaseParser.STATISTICS);
            this.state = 459;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
            if(la_===1) {
                this.state = 452;
                this.identifier();

            } else if(la_===2) {
                this.state = 453;
                this.match(SqlBaseParser.FOR);
                this.state = 454;
                this.match(SqlBaseParser.COLUMNS);
                this.state = 455;
                this.identifierSeq();

            } else if(la_===3) {
                this.state = 456;
                this.match(SqlBaseParser.FOR);
                this.state = 457;
                this.match(SqlBaseParser.ALL);
                this.state = 458;
                this.match(SqlBaseParser.COLUMNS);

            }
            break;

        case 14:
            localctx = new AddTableColumnsContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 461;
            this.match(SqlBaseParser.ALTER);
            this.state = 462;
            this.match(SqlBaseParser.TABLE);
            this.state = 463;
            this.multipartIdentifier();
            this.state = 464;
            this.match(SqlBaseParser.ADD);
            this.state = 465;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.COLUMN || _la===SqlBaseParser.COLUMNS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 466;
            localctx.columns = this.qualifiedColTypeWithPositionList();
            break;

        case 15:
            localctx = new AddTableColumnsContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            this.state = 468;
            this.match(SqlBaseParser.ALTER);
            this.state = 469;
            this.match(SqlBaseParser.TABLE);
            this.state = 470;
            this.multipartIdentifier();
            this.state = 471;
            this.match(SqlBaseParser.ADD);
            this.state = 472;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.COLUMN || _la===SqlBaseParser.COLUMNS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 473;
            this.match(SqlBaseParser.T__0);
            this.state = 474;
            localctx.columns = this.qualifiedColTypeWithPositionList();
            this.state = 475;
            this.match(SqlBaseParser.T__1);
            break;

        case 16:
            localctx = new RenameTableColumnContext(this, localctx);
            this.enterOuterAlt(localctx, 16);
            this.state = 477;
            this.match(SqlBaseParser.ALTER);
            this.state = 478;
            this.match(SqlBaseParser.TABLE);
            this.state = 479;
            this.multipartIdentifier();
            this.state = 480;
            this.match(SqlBaseParser.RENAME);
            this.state = 481;
            this.match(SqlBaseParser.COLUMN);
            this.state = 482;
            localctx.from = this.qualifiedName();
            this.state = 483;
            this.match(SqlBaseParser.TO);
            this.state = 484;
            localctx.to = this.identifier();
            break;

        case 17:
            localctx = new DropTableColumnsContext(this, localctx);
            this.enterOuterAlt(localctx, 17);
            this.state = 486;
            this.match(SqlBaseParser.ALTER);
            this.state = 487;
            this.match(SqlBaseParser.TABLE);
            this.state = 488;
            this.multipartIdentifier();
            this.state = 489;
            this.match(SqlBaseParser.DROP);
            this.state = 490;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.COLUMN || _la===SqlBaseParser.COLUMNS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 491;
            this.match(SqlBaseParser.T__0);
            this.state = 492;
            localctx.columns = this.qualifiedNameList();
            this.state = 493;
            this.match(SqlBaseParser.T__1);
            break;

        case 18:
            localctx = new DropTableColumnsContext(this, localctx);
            this.enterOuterAlt(localctx, 18);
            this.state = 495;
            this.match(SqlBaseParser.ALTER);
            this.state = 496;
            this.match(SqlBaseParser.TABLE);
            this.state = 497;
            this.multipartIdentifier();
            this.state = 498;
            this.match(SqlBaseParser.DROP);
            this.state = 499;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.COLUMN || _la===SqlBaseParser.COLUMNS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 500;
            localctx.columns = this.qualifiedNameList();
            break;

        case 19:
            localctx = new RenameTableContext(this, localctx);
            this.enterOuterAlt(localctx, 19);
            this.state = 502;
            this.match(SqlBaseParser.ALTER);
            this.state = 503;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.TABLE || _la===SqlBaseParser.VIEW)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 504;
            localctx.from = this.tableIdentifier();
            this.state = 505;
            this.match(SqlBaseParser.RENAME);
            this.state = 506;
            this.match(SqlBaseParser.TO);
            this.state = 507;
            localctx.to = this.tableIdentifier();
            break;

        case 20:
            localctx = new SetTablePropertiesContext(this, localctx);
            this.enterOuterAlt(localctx, 20);
            this.state = 509;
            this.match(SqlBaseParser.ALTER);
            this.state = 510;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.TABLE || _la===SqlBaseParser.VIEW)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 511;
            this.multipartIdentifier();
            this.state = 512;
            this.match(SqlBaseParser.SET);
            this.state = 513;
            this.match(SqlBaseParser.TBLPROPERTIES);
            this.state = 514;
            this.tablePropertyList();
            break;

        case 21:
            localctx = new UnsetTablePropertiesContext(this, localctx);
            this.enterOuterAlt(localctx, 21);
            this.state = 516;
            this.match(SqlBaseParser.ALTER);
            this.state = 517;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.TABLE || _la===SqlBaseParser.VIEW)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 518;
            this.multipartIdentifier();
            this.state = 519;
            this.match(SqlBaseParser.UNSET);
            this.state = 520;
            this.match(SqlBaseParser.TBLPROPERTIES);
            this.state = 523;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.IF) {
                this.state = 521;
                this.match(SqlBaseParser.IF);
                this.state = 522;
                this.match(SqlBaseParser.EXISTS);
            }

            this.state = 525;
            this.tablePropertyList();
            break;

        case 22:
            localctx = new AlterTableColumnContext(this, localctx);
            this.enterOuterAlt(localctx, 22);
            this.state = 527;
            this.match(SqlBaseParser.ALTER);
            this.state = 528;
            this.match(SqlBaseParser.TABLE);
            this.state = 529;
            this.multipartIdentifier();
            this.state = 530;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.ALTER || _la===SqlBaseParser.CHANGE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 532;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
            if(la_===1) {
                this.state = 531;
                this.match(SqlBaseParser.COLUMN);

            }
            this.state = 534;
            this.qualifiedName();
            this.state = 537;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.TYPE) {
                this.state = 535;
                this.match(SqlBaseParser.TYPE);
                this.state = 536;
                this.dataType();
            }

            this.state = 541;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.COMMENT) {
                this.state = 539;
                this.match(SqlBaseParser.COMMENT);
                this.state = 540;
                localctx.comment = this.match(SqlBaseParser.STRING);
            }

            this.state = 544;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.AFTER || _la===SqlBaseParser.FIRST) {
                this.state = 543;
                this.colPosition();
            }

            break;

        case 23:
            localctx = new ChangeColumnContext(this, localctx);
            this.enterOuterAlt(localctx, 23);
            this.state = 546;
            this.match(SqlBaseParser.ALTER);
            this.state = 547;
            this.match(SqlBaseParser.TABLE);
            this.state = 548;
            this.tableIdentifier();
            this.state = 550;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PARTITION) {
                this.state = 549;
                this.partitionSpec();
            }

            this.state = 552;
            this.match(SqlBaseParser.CHANGE);
            this.state = 554;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
            if(la_===1) {
                this.state = 553;
                this.match(SqlBaseParser.COLUMN);

            }
            this.state = 556;
            localctx.colName = this.errorCapturingIdentifier();
            this.state = 557;
            this.colType();
            this.state = 559;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.AFTER || _la===SqlBaseParser.FIRST) {
                this.state = 558;
                this.colPosition();
            }

            break;

        case 24:
            localctx = new SetTableSerDeContext(this, localctx);
            this.enterOuterAlt(localctx, 24);
            this.state = 561;
            this.match(SqlBaseParser.ALTER);
            this.state = 562;
            this.match(SqlBaseParser.TABLE);
            this.state = 563;
            this.tableIdentifier();
            this.state = 565;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PARTITION) {
                this.state = 564;
                this.partitionSpec();
            }

            this.state = 567;
            this.match(SqlBaseParser.SET);
            this.state = 568;
            this.match(SqlBaseParser.SERDE);
            this.state = 569;
            this.match(SqlBaseParser.STRING);
            this.state = 573;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.WITH) {
                this.state = 570;
                this.match(SqlBaseParser.WITH);
                this.state = 571;
                this.match(SqlBaseParser.SERDEPROPERTIES);
                this.state = 572;
                this.tablePropertyList();
            }

            break;

        case 25:
            localctx = new SetTableSerDeContext(this, localctx);
            this.enterOuterAlt(localctx, 25);
            this.state = 575;
            this.match(SqlBaseParser.ALTER);
            this.state = 576;
            this.match(SqlBaseParser.TABLE);
            this.state = 577;
            this.tableIdentifier();
            this.state = 579;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PARTITION) {
                this.state = 578;
                this.partitionSpec();
            }

            this.state = 581;
            this.match(SqlBaseParser.SET);
            this.state = 582;
            this.match(SqlBaseParser.SERDEPROPERTIES);
            this.state = 583;
            this.tablePropertyList();
            break;

        case 26:
            localctx = new AddTablePartitionContext(this, localctx);
            this.enterOuterAlt(localctx, 26);
            this.state = 585;
            this.match(SqlBaseParser.ALTER);
            this.state = 586;
            this.match(SqlBaseParser.TABLE);
            this.state = 587;
            this.tableIdentifier();
            this.state = 588;
            this.match(SqlBaseParser.ADD);
            this.state = 592;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.IF) {
                this.state = 589;
                this.match(SqlBaseParser.IF);
                this.state = 590;
                this.match(SqlBaseParser.NOT);
                this.state = 591;
                this.match(SqlBaseParser.EXISTS);
            }

            this.state = 595;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 594;
                this.partitionSpecLocation();
                this.state = 597;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===SqlBaseParser.PARTITION);
            break;

        case 27:
            localctx = new AddTablePartitionContext(this, localctx);
            this.enterOuterAlt(localctx, 27);
            this.state = 599;
            this.match(SqlBaseParser.ALTER);
            this.state = 600;
            this.match(SqlBaseParser.VIEW);
            this.state = 601;
            this.tableIdentifier();
            this.state = 602;
            this.match(SqlBaseParser.ADD);
            this.state = 606;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.IF) {
                this.state = 603;
                this.match(SqlBaseParser.IF);
                this.state = 604;
                this.match(SqlBaseParser.NOT);
                this.state = 605;
                this.match(SqlBaseParser.EXISTS);
            }

            this.state = 609;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 608;
                this.partitionSpec();
                this.state = 611;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===SqlBaseParser.PARTITION);
            break;

        case 28:
            localctx = new RenameTablePartitionContext(this, localctx);
            this.enterOuterAlt(localctx, 28);
            this.state = 613;
            this.match(SqlBaseParser.ALTER);
            this.state = 614;
            this.match(SqlBaseParser.TABLE);
            this.state = 615;
            this.tableIdentifier();
            this.state = 616;
            localctx.from = this.partitionSpec();
            this.state = 617;
            this.match(SqlBaseParser.RENAME);
            this.state = 618;
            this.match(SqlBaseParser.TO);
            this.state = 619;
            localctx.to = this.partitionSpec();
            break;

        case 29:
            localctx = new DropTablePartitionsContext(this, localctx);
            this.enterOuterAlt(localctx, 29);
            this.state = 621;
            this.match(SqlBaseParser.ALTER);
            this.state = 622;
            this.match(SqlBaseParser.TABLE);
            this.state = 623;
            this.tableIdentifier();
            this.state = 624;
            this.match(SqlBaseParser.DROP);
            this.state = 627;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.IF) {
                this.state = 625;
                this.match(SqlBaseParser.IF);
                this.state = 626;
                this.match(SqlBaseParser.EXISTS);
            }

            this.state = 629;
            this.partitionSpec();
            this.state = 634;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__2) {
                this.state = 630;
                this.match(SqlBaseParser.T__2);
                this.state = 631;
                this.partitionSpec();
                this.state = 636;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 638;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PURGE) {
                this.state = 637;
                this.match(SqlBaseParser.PURGE);
            }

            break;

        case 30:
            localctx = new DropTablePartitionsContext(this, localctx);
            this.enterOuterAlt(localctx, 30);
            this.state = 640;
            this.match(SqlBaseParser.ALTER);
            this.state = 641;
            this.match(SqlBaseParser.VIEW);
            this.state = 642;
            this.tableIdentifier();
            this.state = 643;
            this.match(SqlBaseParser.DROP);
            this.state = 646;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.IF) {
                this.state = 644;
                this.match(SqlBaseParser.IF);
                this.state = 645;
                this.match(SqlBaseParser.EXISTS);
            }

            this.state = 648;
            this.partitionSpec();
            this.state = 653;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__2) {
                this.state = 649;
                this.match(SqlBaseParser.T__2);
                this.state = 650;
                this.partitionSpec();
                this.state = 655;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 31:
            localctx = new SetTableLocationContext(this, localctx);
            this.enterOuterAlt(localctx, 31);
            this.state = 656;
            this.match(SqlBaseParser.ALTER);
            this.state = 657;
            this.match(SqlBaseParser.TABLE);
            this.state = 658;
            this.multipartIdentifier();
            this.state = 659;
            this.match(SqlBaseParser.SET);
            this.state = 660;
            this.locationSpec();
            break;

        case 32:
            localctx = new SetPartitionLocationContext(this, localctx);
            this.enterOuterAlt(localctx, 32);
            this.state = 662;
            this.match(SqlBaseParser.ALTER);
            this.state = 663;
            this.match(SqlBaseParser.TABLE);
            this.state = 664;
            this.tableIdentifier();
            this.state = 665;
            this.partitionSpec();
            this.state = 666;
            this.match(SqlBaseParser.SET);
            this.state = 667;
            this.locationSpec();
            break;

        case 33:
            localctx = new RecoverPartitionsContext(this, localctx);
            this.enterOuterAlt(localctx, 33);
            this.state = 669;
            this.match(SqlBaseParser.ALTER);
            this.state = 670;
            this.match(SqlBaseParser.TABLE);
            this.state = 671;
            this.tableIdentifier();
            this.state = 672;
            this.match(SqlBaseParser.RECOVER);
            this.state = 673;
            this.match(SqlBaseParser.PARTITIONS);
            break;

        case 34:
            localctx = new DropTableContext(this, localctx);
            this.enterOuterAlt(localctx, 34);
            this.state = 675;
            this.match(SqlBaseParser.DROP);
            this.state = 676;
            this.match(SqlBaseParser.TABLE);
            this.state = 679;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
            if(la_===1) {
                this.state = 677;
                this.match(SqlBaseParser.IF);
                this.state = 678;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 681;
            this.multipartIdentifier();
            this.state = 683;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PURGE) {
                this.state = 682;
                this.match(SqlBaseParser.PURGE);
            }

            break;

        case 35:
            localctx = new DropViewContext(this, localctx);
            this.enterOuterAlt(localctx, 35);
            this.state = 685;
            this.match(SqlBaseParser.DROP);
            this.state = 686;
            this.match(SqlBaseParser.VIEW);
            this.state = 689;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
            if(la_===1) {
                this.state = 687;
                this.match(SqlBaseParser.IF);
                this.state = 688;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 691;
            this.multipartIdentifier();
            break;

        case 36:
            localctx = new CreateViewContext(this, localctx);
            this.enterOuterAlt(localctx, 36);
            this.state = 692;
            this.match(SqlBaseParser.CREATE);
            this.state = 695;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.OR) {
                this.state = 693;
                this.match(SqlBaseParser.OR);
                this.state = 694;
                this.match(SqlBaseParser.REPLACE);
            }

            this.state = 701;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.GLOBAL || _la===SqlBaseParser.TEMPORARY) {
                this.state = 698;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlBaseParser.GLOBAL) {
                    this.state = 697;
                    this.match(SqlBaseParser.GLOBAL);
                }

                this.state = 700;
                this.match(SqlBaseParser.TEMPORARY);
            }

            this.state = 703;
            this.match(SqlBaseParser.VIEW);
            this.state = 707;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
            if(la_===1) {
                this.state = 704;
                this.match(SqlBaseParser.IF);
                this.state = 705;
                this.match(SqlBaseParser.NOT);
                this.state = 706;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 709;
            this.tableIdentifier();
            this.state = 711;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.T__0) {
                this.state = 710;
                this.identifierCommentList();
            }

            this.state = 722;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.COMMENT || _la===SqlBaseParser.PARTITIONED || _la===SqlBaseParser.TBLPROPERTIES) {
                this.state = 720;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case SqlBaseParser.COMMENT:
                    this.state = 713;
                    this.match(SqlBaseParser.COMMENT);
                    this.state = 714;
                    this.match(SqlBaseParser.STRING);
                    break;
                case SqlBaseParser.PARTITIONED:
                    this.state = 715;
                    this.match(SqlBaseParser.PARTITIONED);
                    this.state = 716;
                    this.match(SqlBaseParser.ON);
                    this.state = 717;
                    this.identifierList();
                    break;
                case SqlBaseParser.TBLPROPERTIES:
                    this.state = 718;
                    this.match(SqlBaseParser.TBLPROPERTIES);
                    this.state = 719;
                    this.tablePropertyList();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 724;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 725;
            this.match(SqlBaseParser.AS);
            this.state = 726;
            this.query();
            break;

        case 37:
            localctx = new CreateTempViewUsingContext(this, localctx);
            this.enterOuterAlt(localctx, 37);
            this.state = 728;
            this.match(SqlBaseParser.CREATE);
            this.state = 731;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.OR) {
                this.state = 729;
                this.match(SqlBaseParser.OR);
                this.state = 730;
                this.match(SqlBaseParser.REPLACE);
            }

            this.state = 734;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.GLOBAL) {
                this.state = 733;
                this.match(SqlBaseParser.GLOBAL);
            }

            this.state = 736;
            this.match(SqlBaseParser.TEMPORARY);
            this.state = 737;
            this.match(SqlBaseParser.VIEW);
            this.state = 738;
            this.tableIdentifier();
            this.state = 743;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.T__0) {
                this.state = 739;
                this.match(SqlBaseParser.T__0);
                this.state = 740;
                this.colTypeList();
                this.state = 741;
                this.match(SqlBaseParser.T__1);
            }

            this.state = 745;
            this.tableProvider();
            this.state = 748;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.OPTIONS) {
                this.state = 746;
                this.match(SqlBaseParser.OPTIONS);
                this.state = 747;
                this.tablePropertyList();
            }

            break;

        case 38:
            localctx = new AlterViewQueryContext(this, localctx);
            this.enterOuterAlt(localctx, 38);
            this.state = 750;
            this.match(SqlBaseParser.ALTER);
            this.state = 751;
            this.match(SqlBaseParser.VIEW);
            this.state = 752;
            this.tableIdentifier();
            this.state = 754;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.AS) {
                this.state = 753;
                this.match(SqlBaseParser.AS);
            }

            this.state = 756;
            this.query();
            break;

        case 39:
            localctx = new CreateFunctionContext(this, localctx);
            this.enterOuterAlt(localctx, 39);
            this.state = 758;
            this.match(SqlBaseParser.CREATE);
            this.state = 761;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.OR) {
                this.state = 759;
                this.match(SqlBaseParser.OR);
                this.state = 760;
                this.match(SqlBaseParser.REPLACE);
            }

            this.state = 764;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.TEMPORARY) {
                this.state = 763;
                this.match(SqlBaseParser.TEMPORARY);
            }

            this.state = 766;
            this.match(SqlBaseParser.FUNCTION);
            this.state = 770;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
            if(la_===1) {
                this.state = 767;
                this.match(SqlBaseParser.IF);
                this.state = 768;
                this.match(SqlBaseParser.NOT);
                this.state = 769;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 772;
            this.qualifiedName();
            this.state = 773;
            this.match(SqlBaseParser.AS);
            this.state = 774;
            localctx.className = this.match(SqlBaseParser.STRING);
            this.state = 784;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.USING) {
                this.state = 775;
                this.match(SqlBaseParser.USING);
                this.state = 776;
                this.resource();
                this.state = 781;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__2) {
                    this.state = 777;
                    this.match(SqlBaseParser.T__2);
                    this.state = 778;
                    this.resource();
                    this.state = 783;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            break;

        case 40:
            localctx = new DropFunctionContext(this, localctx);
            this.enterOuterAlt(localctx, 40);
            this.state = 786;
            this.match(SqlBaseParser.DROP);
            this.state = 788;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.TEMPORARY) {
                this.state = 787;
                this.match(SqlBaseParser.TEMPORARY);
            }

            this.state = 790;
            this.match(SqlBaseParser.FUNCTION);
            this.state = 793;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
            if(la_===1) {
                this.state = 791;
                this.match(SqlBaseParser.IF);
                this.state = 792;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 795;
            this.qualifiedName();
            break;

        case 41:
            localctx = new ExplainContext(this, localctx);
            this.enterOuterAlt(localctx, 41);
            this.state = 796;
            this.match(SqlBaseParser.EXPLAIN);
            this.state = 798;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.CODEGEN || _la===SqlBaseParser.COST || _la===SqlBaseParser.EXTENDED || _la===SqlBaseParser.FORMATTED || _la===SqlBaseParser.LOGICAL) {
                this.state = 797;
                _la = this._input.LA(1);
                if(!(_la===SqlBaseParser.CODEGEN || _la===SqlBaseParser.COST || _la===SqlBaseParser.EXTENDED || _la===SqlBaseParser.FORMATTED || _la===SqlBaseParser.LOGICAL)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 800;
            this.statement();
            break;

        case 42:
            localctx = new ShowTablesContext(this, localctx);
            this.enterOuterAlt(localctx, 42);
            this.state = 801;
            this.match(SqlBaseParser.SHOW);
            this.state = 802;
            this.match(SqlBaseParser.TABLES);
            this.state = 805;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN) {
                this.state = 803;
                _la = this._input.LA(1);
                if(!(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 804;
                this.multipartIdentifier();
            }

            this.state = 811;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.LIKE || _la===SqlBaseParser.STRING) {
                this.state = 808;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlBaseParser.LIKE) {
                    this.state = 807;
                    this.match(SqlBaseParser.LIKE);
                }

                this.state = 810;
                localctx.pattern = this.match(SqlBaseParser.STRING);
            }

            break;

        case 43:
            localctx = new ShowTableContext(this, localctx);
            this.enterOuterAlt(localctx, 43);
            this.state = 813;
            this.match(SqlBaseParser.SHOW);
            this.state = 814;
            this.match(SqlBaseParser.TABLE);
            this.state = 815;
            this.match(SqlBaseParser.EXTENDED);
            this.state = 818;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN) {
                this.state = 816;
                _la = this._input.LA(1);
                if(!(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 817;
                localctx.db = this.errorCapturingIdentifier();
            }

            this.state = 820;
            this.match(SqlBaseParser.LIKE);
            this.state = 821;
            localctx.pattern = this.match(SqlBaseParser.STRING);
            this.state = 823;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PARTITION) {
                this.state = 822;
                this.partitionSpec();
            }

            break;

        case 44:
            localctx = new ShowTblPropertiesContext(this, localctx);
            this.enterOuterAlt(localctx, 44);
            this.state = 825;
            this.match(SqlBaseParser.SHOW);
            this.state = 826;
            this.match(SqlBaseParser.TBLPROPERTIES);
            this.state = 827;
            localctx.table = this.tableIdentifier();
            this.state = 832;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.T__0) {
                this.state = 828;
                this.match(SqlBaseParser.T__0);
                this.state = 829;
                localctx.key = this.tablePropertyKey();
                this.state = 830;
                this.match(SqlBaseParser.T__1);
            }

            break;

        case 45:
            localctx = new ShowColumnsContext(this, localctx);
            this.enterOuterAlt(localctx, 45);
            this.state = 834;
            this.match(SqlBaseParser.SHOW);
            this.state = 835;
            this.match(SqlBaseParser.COLUMNS);
            this.state = 836;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 837;
            this.tableIdentifier();
            this.state = 840;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN) {
                this.state = 838;
                _la = this._input.LA(1);
                if(!(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 839;
                localctx.db = this.errorCapturingIdentifier();
            }

            break;

        case 46:
            localctx = new ShowPartitionsContext(this, localctx);
            this.enterOuterAlt(localctx, 46);
            this.state = 842;
            this.match(SqlBaseParser.SHOW);
            this.state = 843;
            this.match(SqlBaseParser.PARTITIONS);
            this.state = 844;
            this.tableIdentifier();
            this.state = 846;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PARTITION) {
                this.state = 845;
                this.partitionSpec();
            }

            break;

        case 47:
            localctx = new ShowFunctionsContext(this, localctx);
            this.enterOuterAlt(localctx, 47);
            this.state = 848;
            this.match(SqlBaseParser.SHOW);
            this.state = 850;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
            if(la_===1) {
                this.state = 849;
                this.identifier();

            }
            this.state = 852;
            this.match(SqlBaseParser.FUNCTIONS);
            this.state = 860;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
            if(la_===1) {
                this.state = 854;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
                if(la_===1) {
                    this.state = 853;
                    this.match(SqlBaseParser.LIKE);

                }
                this.state = 858;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 856;
                    this.qualifiedName();
                    break;

                case 2:
                    this.state = 857;
                    localctx.pattern = this.match(SqlBaseParser.STRING);
                    break;

                }

            }
            break;

        case 48:
            localctx = new ShowCreateTableContext(this, localctx);
            this.enterOuterAlt(localctx, 48);
            this.state = 862;
            this.match(SqlBaseParser.SHOW);
            this.state = 863;
            this.match(SqlBaseParser.CREATE);
            this.state = 864;
            this.match(SqlBaseParser.TABLE);
            this.state = 865;
            this.tableIdentifier();
            break;

        case 49:
            localctx = new DescribeFunctionContext(this, localctx);
            this.enterOuterAlt(localctx, 49);
            this.state = 866;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.DESC || _la===SqlBaseParser.DESCRIBE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 867;
            this.match(SqlBaseParser.FUNCTION);
            this.state = 869;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
            if(la_===1) {
                this.state = 868;
                this.match(SqlBaseParser.EXTENDED);

            }
            this.state = 871;
            this.describeFuncName();
            break;

        case 50:
            localctx = new DescribeDatabaseContext(this, localctx);
            this.enterOuterAlt(localctx, 50);
            this.state = 872;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.DESC || _la===SqlBaseParser.DESCRIBE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 873;
            this.database();
            this.state = 875;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
            if(la_===1) {
                this.state = 874;
                this.match(SqlBaseParser.EXTENDED);

            }
            this.state = 877;
            localctx.db = this.errorCapturingIdentifier();
            break;

        case 51:
            localctx = new DescribeTableContext(this, localctx);
            this.enterOuterAlt(localctx, 51);
            this.state = 879;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.DESC || _la===SqlBaseParser.DESCRIBE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 881;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
            if(la_===1) {
                this.state = 880;
                this.match(SqlBaseParser.TABLE);

            }
            this.state = 884;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
            if(la_===1) {
                this.state = 883;
                localctx.option = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===SqlBaseParser.EXTENDED || _la===SqlBaseParser.FORMATTED)) {
                    localctx.option = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 886;
            this.multipartIdentifier();
            this.state = 888;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
            if(la_===1) {
                this.state = 887;
                this.partitionSpec();

            }
            this.state = 891;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
            if(la_===1) {
                this.state = 890;
                this.describeColName();

            }
            break;

        case 52:
            localctx = new DescribeQueryContext(this, localctx);
            this.enterOuterAlt(localctx, 52);
            this.state = 893;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.DESC || _la===SqlBaseParser.DESCRIBE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 895;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.QUERY) {
                this.state = 894;
                this.match(SqlBaseParser.QUERY);
            }

            this.state = 897;
            this.query();
            break;

        case 53:
            localctx = new RefreshTableContext(this, localctx);
            this.enterOuterAlt(localctx, 53);
            this.state = 898;
            this.match(SqlBaseParser.REFRESH);
            this.state = 899;
            this.match(SqlBaseParser.TABLE);
            this.state = 900;
            this.tableIdentifier();
            break;

        case 54:
            localctx = new RefreshResourceContext(this, localctx);
            this.enterOuterAlt(localctx, 54);
            this.state = 901;
            this.match(SqlBaseParser.REFRESH);
            this.state = 909;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
            switch(la_) {
            case 1:
                this.state = 902;
                this.match(SqlBaseParser.STRING);
                break;

            case 2:
                this.state = 906;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,92,this._ctx)
                while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1+1) {
                        this.state = 903;
                        this.matchWildcard();
                    }
                    this.state = 908;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,92,this._ctx);
                }

                break;

            }
            break;

        case 55:
            localctx = new CacheTableContext(this, localctx);
            this.enterOuterAlt(localctx, 55);
            this.state = 911;
            this.match(SqlBaseParser.CACHE);
            this.state = 913;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.LAZY) {
                this.state = 912;
                this.match(SqlBaseParser.LAZY);
            }

            this.state = 915;
            this.match(SqlBaseParser.TABLE);
            this.state = 916;
            this.tableIdentifier();
            this.state = 919;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.OPTIONS) {
                this.state = 917;
                this.match(SqlBaseParser.OPTIONS);
                this.state = 918;
                localctx.options = this.tablePropertyList();
            }

            this.state = 925;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.T__0 || _la===SqlBaseParser.AS || _la===SqlBaseParser.FROM || _la===SqlBaseParser.MAP || _la===SqlBaseParser.REDUCE || _la===SqlBaseParser.SELECT || _la===SqlBaseParser.TABLE || _la===SqlBaseParser.VALUES || _la===SqlBaseParser.WITH) {
                this.state = 922;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlBaseParser.AS) {
                    this.state = 921;
                    this.match(SqlBaseParser.AS);
                }

                this.state = 924;
                this.query();
            }

            break;

        case 56:
            localctx = new UncacheTableContext(this, localctx);
            this.enterOuterAlt(localctx, 56);
            this.state = 927;
            this.match(SqlBaseParser.UNCACHE);
            this.state = 928;
            this.match(SqlBaseParser.TABLE);
            this.state = 931;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
            if(la_===1) {
                this.state = 929;
                this.match(SqlBaseParser.IF);
                this.state = 930;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 933;
            this.tableIdentifier();
            break;

        case 57:
            localctx = new ClearCacheContext(this, localctx);
            this.enterOuterAlt(localctx, 57);
            this.state = 934;
            this.match(SqlBaseParser.CLEAR);
            this.state = 935;
            this.match(SqlBaseParser.CACHE);
            break;

        case 58:
            localctx = new LoadDataContext(this, localctx);
            this.enterOuterAlt(localctx, 58);
            this.state = 936;
            this.match(SqlBaseParser.LOAD);
            this.state = 937;
            this.match(SqlBaseParser.DATA);
            this.state = 939;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.LOCAL) {
                this.state = 938;
                this.match(SqlBaseParser.LOCAL);
            }

            this.state = 941;
            this.match(SqlBaseParser.INPATH);
            this.state = 942;
            localctx.path = this.match(SqlBaseParser.STRING);
            this.state = 944;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.OVERWRITE) {
                this.state = 943;
                this.match(SqlBaseParser.OVERWRITE);
            }

            this.state = 946;
            this.match(SqlBaseParser.INTO);
            this.state = 947;
            this.match(SqlBaseParser.TABLE);
            this.state = 948;
            this.tableIdentifier();
            this.state = 950;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PARTITION) {
                this.state = 949;
                this.partitionSpec();
            }

            break;

        case 59:
            localctx = new TruncateTableContext(this, localctx);
            this.enterOuterAlt(localctx, 59);
            this.state = 952;
            this.match(SqlBaseParser.TRUNCATE);
            this.state = 953;
            this.match(SqlBaseParser.TABLE);
            this.state = 954;
            this.tableIdentifier();
            this.state = 956;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PARTITION) {
                this.state = 955;
                this.partitionSpec();
            }

            break;

        case 60:
            localctx = new RepairTableContext(this, localctx);
            this.enterOuterAlt(localctx, 60);
            this.state = 958;
            this.match(SqlBaseParser.MSCK);
            this.state = 959;
            this.match(SqlBaseParser.REPAIR);
            this.state = 960;
            this.match(SqlBaseParser.TABLE);
            this.state = 961;
            this.tableIdentifier();
            break;

        case 61:
            localctx = new ManageResourceContext(this, localctx);
            this.enterOuterAlt(localctx, 61);
            this.state = 962;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.ADD || _la===SqlBaseParser.LIST)) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 963;
            this.identifier();
            this.state = 967;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,103,this._ctx)
            while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1+1) {
                    this.state = 964;
                    this.matchWildcard();
                }
                this.state = 969;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,103,this._ctx);
            }

            break;

        case 62:
            localctx = new FailNativeCommandContext(this, localctx);
            this.enterOuterAlt(localctx, 62);
            this.state = 970;
            this.match(SqlBaseParser.SET);
            this.state = 971;
            this.match(SqlBaseParser.ROLE);
            this.state = 975;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,104,this._ctx)
            while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1+1) {
                    this.state = 972;
                    this.matchWildcard();
                }
                this.state = 977;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,104,this._ctx);
            }

            break;

        case 63:
            localctx = new SetConfigurationContext(this, localctx);
            this.enterOuterAlt(localctx, 63);
            this.state = 978;
            this.match(SqlBaseParser.SET);
            this.state = 982;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,105,this._ctx)
            while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1+1) {
                    this.state = 979;
                    this.matchWildcard();
                }
                this.state = 984;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,105,this._ctx);
            }

            break;

        case 64:
            localctx = new ResetConfigurationContext(this, localctx);
            this.enterOuterAlt(localctx, 64);
            this.state = 985;
            this.match(SqlBaseParser.RESET);
            break;

        case 65:
            localctx = new DeleteFromTableContext(this, localctx);
            this.enterOuterAlt(localctx, 65);
            this.state = 986;
            this.match(SqlBaseParser.DELETE);
            this.state = 987;
            this.match(SqlBaseParser.FROM);
            this.state = 988;
            this.multipartIdentifier();
            this.state = 989;
            this.tableAlias();
            this.state = 991;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.WHERE) {
                this.state = 990;
                this.whereClause();
            }

            break;

        case 66:
            localctx = new UpdateTableContext(this, localctx);
            this.enterOuterAlt(localctx, 66);
            this.state = 993;
            this.match(SqlBaseParser.UPDATE);
            this.state = 994;
            this.multipartIdentifier();
            this.state = 995;
            this.tableAlias();
            this.state = 996;
            this.setClause();
            this.state = 998;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.WHERE) {
                this.state = 997;
                this.whereClause();
            }

            break;

        case 67:
            localctx = new FailNativeCommandContext(this, localctx);
            this.enterOuterAlt(localctx, 67);
            this.state = 1000;
            this.unsupportedHiveNativeCommands();
            this.state = 1004;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,108,this._ctx)
            while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1+1) {
                    this.state = 1001;
                    this.matchWildcard();
                }
                this.state = 1006;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,108,this._ctx);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnsupportedHiveNativeCommandsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_unsupportedHiveNativeCommands;
    this.kw1 = null; // Token
    this.kw2 = null; // Token
    this.kw3 = null; // Token
    this.kw4 = null; // Token
    this.kw5 = null; // Token
    this.kw6 = null; // Token
    return this;
}

UnsupportedHiveNativeCommandsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnsupportedHiveNativeCommandsContext.prototype.constructor = UnsupportedHiveNativeCommandsContext;

UnsupportedHiveNativeCommandsContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.ROLE = function() {
    return this.getToken(SqlBaseParser.ROLE, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.DROP = function() {
    return this.getToken(SqlBaseParser.DROP, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.GRANT = function() {
    return this.getToken(SqlBaseParser.GRANT, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.REVOKE = function() {
    return this.getToken(SqlBaseParser.REVOKE, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.PRINCIPALS = function() {
    return this.getToken(SqlBaseParser.PRINCIPALS, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.ROLES = function() {
    return this.getToken(SqlBaseParser.ROLES, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.CURRENT = function() {
    return this.getToken(SqlBaseParser.CURRENT, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.EXPORT = function() {
    return this.getToken(SqlBaseParser.EXPORT, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.IMPORT = function() {
    return this.getToken(SqlBaseParser.IMPORT, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.COMPACTIONS = function() {
    return this.getToken(SqlBaseParser.COMPACTIONS, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.TRANSACTIONS = function() {
    return this.getToken(SqlBaseParser.TRANSACTIONS, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.INDEXES = function() {
    return this.getToken(SqlBaseParser.INDEXES, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.LOCKS = function() {
    return this.getToken(SqlBaseParser.LOCKS, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.INDEX = function() {
    return this.getToken(SqlBaseParser.INDEX, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.LOCK = function() {
    return this.getToken(SqlBaseParser.LOCK, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.DATABASE = function() {
    return this.getToken(SqlBaseParser.DATABASE, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.UNLOCK = function() {
    return this.getToken(SqlBaseParser.UNLOCK, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.TEMPORARY = function() {
    return this.getToken(SqlBaseParser.TEMPORARY, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.MACRO = function() {
    return this.getToken(SqlBaseParser.MACRO, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

UnsupportedHiveNativeCommandsContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.CLUSTERED = function() {
    return this.getToken(SqlBaseParser.CLUSTERED, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.BY = function() {
    return this.getToken(SqlBaseParser.BY, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.SORTED = function() {
    return this.getToken(SqlBaseParser.SORTED, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.SKEWED = function() {
    return this.getToken(SqlBaseParser.SKEWED, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.STORED = function() {
    return this.getToken(SqlBaseParser.STORED, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.DIRECTORIES = function() {
    return this.getToken(SqlBaseParser.DIRECTORIES, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.SET = function() {
    return this.getToken(SqlBaseParser.SET, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.LOCATION = function() {
    return this.getToken(SqlBaseParser.LOCATION, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.EXCHANGE = function() {
    return this.getToken(SqlBaseParser.EXCHANGE, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.PARTITION = function() {
    return this.getToken(SqlBaseParser.PARTITION, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.ARCHIVE = function() {
    return this.getToken(SqlBaseParser.ARCHIVE, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.UNARCHIVE = function() {
    return this.getToken(SqlBaseParser.UNARCHIVE, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.TOUCH = function() {
    return this.getToken(SqlBaseParser.TOUCH, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.COMPACT = function() {
    return this.getToken(SqlBaseParser.COMPACT, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.partitionSpec = function() {
    return this.getTypedRuleContext(PartitionSpecContext,0);
};

UnsupportedHiveNativeCommandsContext.prototype.CONCATENATE = function() {
    return this.getToken(SqlBaseParser.CONCATENATE, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.FILEFORMAT = function() {
    return this.getToken(SqlBaseParser.FILEFORMAT, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.REPLACE = function() {
    return this.getToken(SqlBaseParser.REPLACE, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.COLUMNS = function() {
    return this.getToken(SqlBaseParser.COLUMNS, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.START = function() {
    return this.getToken(SqlBaseParser.START, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.TRANSACTION = function() {
    return this.getToken(SqlBaseParser.TRANSACTION, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.COMMIT = function() {
    return this.getToken(SqlBaseParser.COMMIT, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.ROLLBACK = function() {
    return this.getToken(SqlBaseParser.ROLLBACK, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.DFS = function() {
    return this.getToken(SqlBaseParser.DFS, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.DELETE = function() {
    return this.getToken(SqlBaseParser.DELETE, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};




SqlBaseParser.UnsupportedHiveNativeCommandsContext = UnsupportedHiveNativeCommandsContext;

SqlBaseParser.prototype.unsupportedHiveNativeCommands = function() {

    var localctx = new UnsupportedHiveNativeCommandsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, SqlBaseParser.RULE_unsupportedHiveNativeCommands);
    var _la = 0; // Token type
    try {
        this.state = 1179;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1009;
            localctx.kw1 = this.match(SqlBaseParser.CREATE);
            this.state = 1010;
            localctx.kw2 = this.match(SqlBaseParser.ROLE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1011;
            localctx.kw1 = this.match(SqlBaseParser.DROP);
            this.state = 1012;
            localctx.kw2 = this.match(SqlBaseParser.ROLE);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1013;
            localctx.kw1 = this.match(SqlBaseParser.GRANT);
            this.state = 1015;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,110,this._ctx);
            if(la_===1) {
                this.state = 1014;
                localctx.kw2 = this.match(SqlBaseParser.ROLE);

            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1017;
            localctx.kw1 = this.match(SqlBaseParser.REVOKE);
            this.state = 1019;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
            if(la_===1) {
                this.state = 1018;
                localctx.kw2 = this.match(SqlBaseParser.ROLE);

            }
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1021;
            localctx.kw1 = this.match(SqlBaseParser.SHOW);
            this.state = 1022;
            localctx.kw2 = this.match(SqlBaseParser.GRANT);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1023;
            localctx.kw1 = this.match(SqlBaseParser.SHOW);
            this.state = 1024;
            localctx.kw2 = this.match(SqlBaseParser.ROLE);
            this.state = 1026;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
            if(la_===1) {
                this.state = 1025;
                localctx.kw3 = this.match(SqlBaseParser.GRANT);

            }
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1028;
            localctx.kw1 = this.match(SqlBaseParser.SHOW);
            this.state = 1029;
            localctx.kw2 = this.match(SqlBaseParser.PRINCIPALS);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1030;
            localctx.kw1 = this.match(SqlBaseParser.SHOW);
            this.state = 1031;
            localctx.kw2 = this.match(SqlBaseParser.ROLES);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1032;
            localctx.kw1 = this.match(SqlBaseParser.SHOW);
            this.state = 1033;
            localctx.kw2 = this.match(SqlBaseParser.CURRENT);
            this.state = 1034;
            localctx.kw3 = this.match(SqlBaseParser.ROLES);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1035;
            localctx.kw1 = this.match(SqlBaseParser.EXPORT);
            this.state = 1036;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 1037;
            localctx.kw1 = this.match(SqlBaseParser.IMPORT);
            this.state = 1038;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 1039;
            localctx.kw1 = this.match(SqlBaseParser.SHOW);
            this.state = 1040;
            localctx.kw2 = this.match(SqlBaseParser.COMPACTIONS);
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 1041;
            localctx.kw1 = this.match(SqlBaseParser.SHOW);
            this.state = 1042;
            localctx.kw2 = this.match(SqlBaseParser.CREATE);
            this.state = 1043;
            localctx.kw3 = this.match(SqlBaseParser.TABLE);
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 1044;
            localctx.kw1 = this.match(SqlBaseParser.SHOW);
            this.state = 1045;
            localctx.kw2 = this.match(SqlBaseParser.TRANSACTIONS);
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 1046;
            localctx.kw1 = this.match(SqlBaseParser.SHOW);
            this.state = 1047;
            localctx.kw2 = this.match(SqlBaseParser.INDEXES);
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 1048;
            localctx.kw1 = this.match(SqlBaseParser.SHOW);
            this.state = 1049;
            localctx.kw2 = this.match(SqlBaseParser.LOCKS);
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 1050;
            localctx.kw1 = this.match(SqlBaseParser.CREATE);
            this.state = 1051;
            localctx.kw2 = this.match(SqlBaseParser.INDEX);
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 1052;
            localctx.kw1 = this.match(SqlBaseParser.DROP);
            this.state = 1053;
            localctx.kw2 = this.match(SqlBaseParser.INDEX);
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 1054;
            localctx.kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 1055;
            localctx.kw2 = this.match(SqlBaseParser.INDEX);
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 1056;
            localctx.kw1 = this.match(SqlBaseParser.LOCK);
            this.state = 1057;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            break;

        case 21:
            this.enterOuterAlt(localctx, 21);
            this.state = 1058;
            localctx.kw1 = this.match(SqlBaseParser.LOCK);
            this.state = 1059;
            localctx.kw2 = this.match(SqlBaseParser.DATABASE);
            break;

        case 22:
            this.enterOuterAlt(localctx, 22);
            this.state = 1060;
            localctx.kw1 = this.match(SqlBaseParser.UNLOCK);
            this.state = 1061;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            break;

        case 23:
            this.enterOuterAlt(localctx, 23);
            this.state = 1062;
            localctx.kw1 = this.match(SqlBaseParser.UNLOCK);
            this.state = 1063;
            localctx.kw2 = this.match(SqlBaseParser.DATABASE);
            break;

        case 24:
            this.enterOuterAlt(localctx, 24);
            this.state = 1064;
            localctx.kw1 = this.match(SqlBaseParser.CREATE);
            this.state = 1065;
            localctx.kw2 = this.match(SqlBaseParser.TEMPORARY);
            this.state = 1066;
            localctx.kw3 = this.match(SqlBaseParser.MACRO);
            break;

        case 25:
            this.enterOuterAlt(localctx, 25);
            this.state = 1067;
            localctx.kw1 = this.match(SqlBaseParser.DROP);
            this.state = 1068;
            localctx.kw2 = this.match(SqlBaseParser.TEMPORARY);
            this.state = 1069;
            localctx.kw3 = this.match(SqlBaseParser.MACRO);
            break;

        case 26:
            this.enterOuterAlt(localctx, 26);
            this.state = 1070;
            localctx.kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 1071;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 1072;
            this.tableIdentifier();
            this.state = 1073;
            localctx.kw3 = this.match(SqlBaseParser.NOT);
            this.state = 1074;
            localctx.kw4 = this.match(SqlBaseParser.CLUSTERED);
            break;

        case 27:
            this.enterOuterAlt(localctx, 27);
            this.state = 1076;
            localctx.kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 1077;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 1078;
            this.tableIdentifier();
            this.state = 1079;
            localctx.kw3 = this.match(SqlBaseParser.CLUSTERED);
            this.state = 1080;
            localctx.kw4 = this.match(SqlBaseParser.BY);
            break;

        case 28:
            this.enterOuterAlt(localctx, 28);
            this.state = 1082;
            localctx.kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 1083;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 1084;
            this.tableIdentifier();
            this.state = 1085;
            localctx.kw3 = this.match(SqlBaseParser.NOT);
            this.state = 1086;
            localctx.kw4 = this.match(SqlBaseParser.SORTED);
            break;

        case 29:
            this.enterOuterAlt(localctx, 29);
            this.state = 1088;
            localctx.kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 1089;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 1090;
            this.tableIdentifier();
            this.state = 1091;
            localctx.kw3 = this.match(SqlBaseParser.SKEWED);
            this.state = 1092;
            localctx.kw4 = this.match(SqlBaseParser.BY);
            break;

        case 30:
            this.enterOuterAlt(localctx, 30);
            this.state = 1094;
            localctx.kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 1095;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 1096;
            this.tableIdentifier();
            this.state = 1097;
            localctx.kw3 = this.match(SqlBaseParser.NOT);
            this.state = 1098;
            localctx.kw4 = this.match(SqlBaseParser.SKEWED);
            break;

        case 31:
            this.enterOuterAlt(localctx, 31);
            this.state = 1100;
            localctx.kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 1101;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 1102;
            this.tableIdentifier();
            this.state = 1103;
            localctx.kw3 = this.match(SqlBaseParser.NOT);
            this.state = 1104;
            localctx.kw4 = this.match(SqlBaseParser.STORED);
            this.state = 1105;
            localctx.kw5 = this.match(SqlBaseParser.AS);
            this.state = 1106;
            localctx.kw6 = this.match(SqlBaseParser.DIRECTORIES);
            break;

        case 32:
            this.enterOuterAlt(localctx, 32);
            this.state = 1108;
            localctx.kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 1109;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 1110;
            this.tableIdentifier();
            this.state = 1111;
            localctx.kw3 = this.match(SqlBaseParser.SET);
            this.state = 1112;
            localctx.kw4 = this.match(SqlBaseParser.SKEWED);
            this.state = 1113;
            localctx.kw5 = this.match(SqlBaseParser.LOCATION);
            break;

        case 33:
            this.enterOuterAlt(localctx, 33);
            this.state = 1115;
            localctx.kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 1116;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 1117;
            this.tableIdentifier();
            this.state = 1118;
            localctx.kw3 = this.match(SqlBaseParser.EXCHANGE);
            this.state = 1119;
            localctx.kw4 = this.match(SqlBaseParser.PARTITION);
            break;

        case 34:
            this.enterOuterAlt(localctx, 34);
            this.state = 1121;
            localctx.kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 1122;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 1123;
            this.tableIdentifier();
            this.state = 1124;
            localctx.kw3 = this.match(SqlBaseParser.ARCHIVE);
            this.state = 1125;
            localctx.kw4 = this.match(SqlBaseParser.PARTITION);
            break;

        case 35:
            this.enterOuterAlt(localctx, 35);
            this.state = 1127;
            localctx.kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 1128;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 1129;
            this.tableIdentifier();
            this.state = 1130;
            localctx.kw3 = this.match(SqlBaseParser.UNARCHIVE);
            this.state = 1131;
            localctx.kw4 = this.match(SqlBaseParser.PARTITION);
            break;

        case 36:
            this.enterOuterAlt(localctx, 36);
            this.state = 1133;
            localctx.kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 1134;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 1135;
            this.tableIdentifier();
            this.state = 1136;
            localctx.kw3 = this.match(SqlBaseParser.TOUCH);
            break;

        case 37:
            this.enterOuterAlt(localctx, 37);
            this.state = 1138;
            localctx.kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 1139;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 1140;
            this.tableIdentifier();
            this.state = 1142;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PARTITION) {
                this.state = 1141;
                this.partitionSpec();
            }

            this.state = 1144;
            localctx.kw3 = this.match(SqlBaseParser.COMPACT);
            break;

        case 38:
            this.enterOuterAlt(localctx, 38);
            this.state = 1146;
            localctx.kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 1147;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 1148;
            this.tableIdentifier();
            this.state = 1150;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PARTITION) {
                this.state = 1149;
                this.partitionSpec();
            }

            this.state = 1152;
            localctx.kw3 = this.match(SqlBaseParser.CONCATENATE);
            break;

        case 39:
            this.enterOuterAlt(localctx, 39);
            this.state = 1154;
            localctx.kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 1155;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 1156;
            this.tableIdentifier();
            this.state = 1158;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PARTITION) {
                this.state = 1157;
                this.partitionSpec();
            }

            this.state = 1160;
            localctx.kw3 = this.match(SqlBaseParser.SET);
            this.state = 1161;
            localctx.kw4 = this.match(SqlBaseParser.FILEFORMAT);
            break;

        case 40:
            this.enterOuterAlt(localctx, 40);
            this.state = 1163;
            localctx.kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 1164;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 1165;
            this.tableIdentifier();
            this.state = 1167;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PARTITION) {
                this.state = 1166;
                this.partitionSpec();
            }

            this.state = 1169;
            localctx.kw3 = this.match(SqlBaseParser.REPLACE);
            this.state = 1170;
            localctx.kw4 = this.match(SqlBaseParser.COLUMNS);
            break;

        case 41:
            this.enterOuterAlt(localctx, 41);
            this.state = 1172;
            localctx.kw1 = this.match(SqlBaseParser.START);
            this.state = 1173;
            localctx.kw2 = this.match(SqlBaseParser.TRANSACTION);
            break;

        case 42:
            this.enterOuterAlt(localctx, 42);
            this.state = 1174;
            localctx.kw1 = this.match(SqlBaseParser.COMMIT);
            break;

        case 43:
            this.enterOuterAlt(localctx, 43);
            this.state = 1175;
            localctx.kw1 = this.match(SqlBaseParser.ROLLBACK);
            break;

        case 44:
            this.enterOuterAlt(localctx, 44);
            this.state = 1176;
            localctx.kw1 = this.match(SqlBaseParser.DFS);
            break;

        case 45:
            this.enterOuterAlt(localctx, 45);
            this.state = 1177;
            localctx.kw1 = this.match(SqlBaseParser.DELETE);
            this.state = 1178;
            localctx.kw2 = this.match(SqlBaseParser.FROM);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateTableHeaderContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_createTableHeader;
    return this;
}

CreateTableHeaderContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateTableHeaderContext.prototype.constructor = CreateTableHeaderContext;

CreateTableHeaderContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

CreateTableHeaderContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

CreateTableHeaderContext.prototype.multipartIdentifier = function() {
    return this.getTypedRuleContext(MultipartIdentifierContext,0);
};

CreateTableHeaderContext.prototype.TEMPORARY = function() {
    return this.getToken(SqlBaseParser.TEMPORARY, 0);
};

CreateTableHeaderContext.prototype.EXTERNAL = function() {
    return this.getToken(SqlBaseParser.EXTERNAL, 0);
};

CreateTableHeaderContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

CreateTableHeaderContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

CreateTableHeaderContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};




SqlBaseParser.CreateTableHeaderContext = CreateTableHeaderContext;

SqlBaseParser.prototype.createTableHeader = function() {

    var localctx = new CreateTableHeaderContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, SqlBaseParser.RULE_createTableHeader);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1181;
        this.match(SqlBaseParser.CREATE);
        this.state = 1183;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.TEMPORARY) {
            this.state = 1182;
            this.match(SqlBaseParser.TEMPORARY);
        }

        this.state = 1186;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.EXTERNAL) {
            this.state = 1185;
            this.match(SqlBaseParser.EXTERNAL);
        }

        this.state = 1188;
        this.match(SqlBaseParser.TABLE);
        this.state = 1192;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
        if(la_===1) {
            this.state = 1189;
            this.match(SqlBaseParser.IF);
            this.state = 1190;
            this.match(SqlBaseParser.NOT);
            this.state = 1191;
            this.match(SqlBaseParser.EXISTS);

        }
        this.state = 1194;
        this.multipartIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReplaceTableHeaderContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_replaceTableHeader;
    return this;
}

ReplaceTableHeaderContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReplaceTableHeaderContext.prototype.constructor = ReplaceTableHeaderContext;

ReplaceTableHeaderContext.prototype.REPLACE = function() {
    return this.getToken(SqlBaseParser.REPLACE, 0);
};

ReplaceTableHeaderContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

ReplaceTableHeaderContext.prototype.multipartIdentifier = function() {
    return this.getTypedRuleContext(MultipartIdentifierContext,0);
};

ReplaceTableHeaderContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

ReplaceTableHeaderContext.prototype.OR = function() {
    return this.getToken(SqlBaseParser.OR, 0);
};




SqlBaseParser.ReplaceTableHeaderContext = ReplaceTableHeaderContext;

SqlBaseParser.prototype.replaceTableHeader = function() {

    var localctx = new ReplaceTableHeaderContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, SqlBaseParser.RULE_replaceTableHeader);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1198;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.CREATE) {
            this.state = 1196;
            this.match(SqlBaseParser.CREATE);
            this.state = 1197;
            this.match(SqlBaseParser.OR);
        }

        this.state = 1200;
        this.match(SqlBaseParser.REPLACE);
        this.state = 1201;
        this.match(SqlBaseParser.TABLE);
        this.state = 1202;
        this.multipartIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BucketSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_bucketSpec;
    return this;
}

BucketSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BucketSpecContext.prototype.constructor = BucketSpecContext;

BucketSpecContext.prototype.CLUSTERED = function() {
    return this.getToken(SqlBaseParser.CLUSTERED, 0);
};

BucketSpecContext.prototype.BY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.BY);
    } else {
        return this.getToken(SqlBaseParser.BY, i);
    }
};


BucketSpecContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

BucketSpecContext.prototype.INTO = function() {
    return this.getToken(SqlBaseParser.INTO, 0);
};

BucketSpecContext.prototype.INTEGER_VALUE = function() {
    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
};

BucketSpecContext.prototype.BUCKETS = function() {
    return this.getToken(SqlBaseParser.BUCKETS, 0);
};

BucketSpecContext.prototype.SORTED = function() {
    return this.getToken(SqlBaseParser.SORTED, 0);
};

BucketSpecContext.prototype.orderedIdentifierList = function() {
    return this.getTypedRuleContext(OrderedIdentifierListContext,0);
};




SqlBaseParser.BucketSpecContext = BucketSpecContext;

SqlBaseParser.prototype.bucketSpec = function() {

    var localctx = new BucketSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, SqlBaseParser.RULE_bucketSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1204;
        this.match(SqlBaseParser.CLUSTERED);
        this.state = 1205;
        this.match(SqlBaseParser.BY);
        this.state = 1206;
        this.identifierList();
        this.state = 1210;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.SORTED) {
            this.state = 1207;
            this.match(SqlBaseParser.SORTED);
            this.state = 1208;
            this.match(SqlBaseParser.BY);
            this.state = 1209;
            this.orderedIdentifierList();
        }

        this.state = 1212;
        this.match(SqlBaseParser.INTO);
        this.state = 1213;
        this.match(SqlBaseParser.INTEGER_VALUE);
        this.state = 1214;
        this.match(SqlBaseParser.BUCKETS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SkewSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_skewSpec;
    return this;
}

SkewSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SkewSpecContext.prototype.constructor = SkewSpecContext;

SkewSpecContext.prototype.SKEWED = function() {
    return this.getToken(SqlBaseParser.SKEWED, 0);
};

SkewSpecContext.prototype.BY = function() {
    return this.getToken(SqlBaseParser.BY, 0);
};

SkewSpecContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

SkewSpecContext.prototype.ON = function() {
    return this.getToken(SqlBaseParser.ON, 0);
};

SkewSpecContext.prototype.constantList = function() {
    return this.getTypedRuleContext(ConstantListContext,0);
};

SkewSpecContext.prototype.nestedConstantList = function() {
    return this.getTypedRuleContext(NestedConstantListContext,0);
};

SkewSpecContext.prototype.STORED = function() {
    return this.getToken(SqlBaseParser.STORED, 0);
};

SkewSpecContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

SkewSpecContext.prototype.DIRECTORIES = function() {
    return this.getToken(SqlBaseParser.DIRECTORIES, 0);
};




SqlBaseParser.SkewSpecContext = SkewSpecContext;

SqlBaseParser.prototype.skewSpec = function() {

    var localctx = new SkewSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, SqlBaseParser.RULE_skewSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1216;
        this.match(SqlBaseParser.SKEWED);
        this.state = 1217;
        this.match(SqlBaseParser.BY);
        this.state = 1218;
        this.identifierList();
        this.state = 1219;
        this.match(SqlBaseParser.ON);
        this.state = 1222;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1220;
            this.constantList();
            break;

        case 2:
            this.state = 1221;
            this.nestedConstantList();
            break;

        }
        this.state = 1227;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
        if(la_===1) {
            this.state = 1224;
            this.match(SqlBaseParser.STORED);
            this.state = 1225;
            this.match(SqlBaseParser.AS);
            this.state = 1226;
            this.match(SqlBaseParser.DIRECTORIES);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LocationSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_locationSpec;
    return this;
}

LocationSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocationSpecContext.prototype.constructor = LocationSpecContext;

LocationSpecContext.prototype.LOCATION = function() {
    return this.getToken(SqlBaseParser.LOCATION, 0);
};

LocationSpecContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};




SqlBaseParser.LocationSpecContext = LocationSpecContext;

SqlBaseParser.prototype.locationSpec = function() {

    var localctx = new LocationSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, SqlBaseParser.RULE_locationSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1229;
        this.match(SqlBaseParser.LOCATION);
        this.state = 1230;
        this.match(SqlBaseParser.STRING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_query;
    return this;
}

QueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryContext.prototype.constructor = QueryContext;

QueryContext.prototype.queryTerm = function() {
    return this.getTypedRuleContext(QueryTermContext,0);
};

QueryContext.prototype.queryOrganization = function() {
    return this.getTypedRuleContext(QueryOrganizationContext,0);
};

QueryContext.prototype.ctes = function() {
    return this.getTypedRuleContext(CtesContext,0);
};




SqlBaseParser.QueryContext = QueryContext;

SqlBaseParser.prototype.query = function() {

    var localctx = new QueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, SqlBaseParser.RULE_query);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1233;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.WITH) {
            this.state = 1232;
            this.ctes();
        }

        this.state = 1235;
        this.queryTerm(0);
        this.state = 1236;
        this.queryOrganization();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InsertIntoContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_insertInto;
    return this;
}

InsertIntoContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InsertIntoContext.prototype.constructor = InsertIntoContext;



InsertIntoContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function InsertOverwriteHiveDirContext(parser, ctx) {
	InsertIntoContext.call(this, parser);
    this.path = null; // Token;
    InsertIntoContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InsertOverwriteHiveDirContext.prototype = Object.create(InsertIntoContext.prototype);
InsertOverwriteHiveDirContext.prototype.constructor = InsertOverwriteHiveDirContext;

SqlBaseParser.InsertOverwriteHiveDirContext = InsertOverwriteHiveDirContext;

InsertOverwriteHiveDirContext.prototype.INSERT = function() {
    return this.getToken(SqlBaseParser.INSERT, 0);
};

InsertOverwriteHiveDirContext.prototype.OVERWRITE = function() {
    return this.getToken(SqlBaseParser.OVERWRITE, 0);
};

InsertOverwriteHiveDirContext.prototype.DIRECTORY = function() {
    return this.getToken(SqlBaseParser.DIRECTORY, 0);
};

InsertOverwriteHiveDirContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

InsertOverwriteHiveDirContext.prototype.LOCAL = function() {
    return this.getToken(SqlBaseParser.LOCAL, 0);
};

InsertOverwriteHiveDirContext.prototype.rowFormat = function() {
    return this.getTypedRuleContext(RowFormatContext,0);
};

InsertOverwriteHiveDirContext.prototype.createFileFormat = function() {
    return this.getTypedRuleContext(CreateFileFormatContext,0);
};

function InsertOverwriteDirContext(parser, ctx) {
	InsertIntoContext.call(this, parser);
    this.path = null; // Token;
    this.options = null; // TablePropertyListContext;
    InsertIntoContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InsertOverwriteDirContext.prototype = Object.create(InsertIntoContext.prototype);
InsertOverwriteDirContext.prototype.constructor = InsertOverwriteDirContext;

SqlBaseParser.InsertOverwriteDirContext = InsertOverwriteDirContext;

InsertOverwriteDirContext.prototype.INSERT = function() {
    return this.getToken(SqlBaseParser.INSERT, 0);
};

InsertOverwriteDirContext.prototype.OVERWRITE = function() {
    return this.getToken(SqlBaseParser.OVERWRITE, 0);
};

InsertOverwriteDirContext.prototype.DIRECTORY = function() {
    return this.getToken(SqlBaseParser.DIRECTORY, 0);
};

InsertOverwriteDirContext.prototype.tableProvider = function() {
    return this.getTypedRuleContext(TableProviderContext,0);
};

InsertOverwriteDirContext.prototype.LOCAL = function() {
    return this.getToken(SqlBaseParser.LOCAL, 0);
};

InsertOverwriteDirContext.prototype.OPTIONS = function() {
    return this.getToken(SqlBaseParser.OPTIONS, 0);
};

InsertOverwriteDirContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

InsertOverwriteDirContext.prototype.tablePropertyList = function() {
    return this.getTypedRuleContext(TablePropertyListContext,0);
};

function InsertOverwriteTableContext(parser, ctx) {
	InsertIntoContext.call(this, parser);
    InsertIntoContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InsertOverwriteTableContext.prototype = Object.create(InsertIntoContext.prototype);
InsertOverwriteTableContext.prototype.constructor = InsertOverwriteTableContext;

SqlBaseParser.InsertOverwriteTableContext = InsertOverwriteTableContext;

InsertOverwriteTableContext.prototype.INSERT = function() {
    return this.getToken(SqlBaseParser.INSERT, 0);
};

InsertOverwriteTableContext.prototype.OVERWRITE = function() {
    return this.getToken(SqlBaseParser.OVERWRITE, 0);
};

InsertOverwriteTableContext.prototype.multipartIdentifier = function() {
    return this.getTypedRuleContext(MultipartIdentifierContext,0);
};

InsertOverwriteTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

InsertOverwriteTableContext.prototype.partitionSpec = function() {
    return this.getTypedRuleContext(PartitionSpecContext,0);
};

InsertOverwriteTableContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

InsertOverwriteTableContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

InsertOverwriteTableContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

function InsertIntoTableContext(parser, ctx) {
	InsertIntoContext.call(this, parser);
    InsertIntoContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InsertIntoTableContext.prototype = Object.create(InsertIntoContext.prototype);
InsertIntoTableContext.prototype.constructor = InsertIntoTableContext;

SqlBaseParser.InsertIntoTableContext = InsertIntoTableContext;

InsertIntoTableContext.prototype.INSERT = function() {
    return this.getToken(SqlBaseParser.INSERT, 0);
};

InsertIntoTableContext.prototype.INTO = function() {
    return this.getToken(SqlBaseParser.INTO, 0);
};

InsertIntoTableContext.prototype.multipartIdentifier = function() {
    return this.getTypedRuleContext(MultipartIdentifierContext,0);
};

InsertIntoTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

InsertIntoTableContext.prototype.partitionSpec = function() {
    return this.getTypedRuleContext(PartitionSpecContext,0);
};

InsertIntoTableContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

InsertIntoTableContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

InsertIntoTableContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};


SqlBaseParser.InsertIntoContext = InsertIntoContext;

SqlBaseParser.prototype.insertInto = function() {

    var localctx = new InsertIntoContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, SqlBaseParser.RULE_insertInto);
    var _la = 0; // Token type
    try {
        this.state = 1293;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,138,this._ctx);
        switch(la_) {
        case 1:
            localctx = new InsertOverwriteTableContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1238;
            this.match(SqlBaseParser.INSERT);
            this.state = 1239;
            this.match(SqlBaseParser.OVERWRITE);
            this.state = 1241;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
            if(la_===1) {
                this.state = 1240;
                this.match(SqlBaseParser.TABLE);

            }
            this.state = 1243;
            this.multipartIdentifier();
            this.state = 1250;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PARTITION) {
                this.state = 1244;
                this.partitionSpec();
                this.state = 1248;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlBaseParser.IF) {
                    this.state = 1245;
                    this.match(SqlBaseParser.IF);
                    this.state = 1246;
                    this.match(SqlBaseParser.NOT);
                    this.state = 1247;
                    this.match(SqlBaseParser.EXISTS);
                }

            }

            break;

        case 2:
            localctx = new InsertIntoTableContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1252;
            this.match(SqlBaseParser.INSERT);
            this.state = 1253;
            this.match(SqlBaseParser.INTO);
            this.state = 1255;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,129,this._ctx);
            if(la_===1) {
                this.state = 1254;
                this.match(SqlBaseParser.TABLE);

            }
            this.state = 1257;
            this.multipartIdentifier();
            this.state = 1259;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PARTITION) {
                this.state = 1258;
                this.partitionSpec();
            }

            this.state = 1264;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.IF) {
                this.state = 1261;
                this.match(SqlBaseParser.IF);
                this.state = 1262;
                this.match(SqlBaseParser.NOT);
                this.state = 1263;
                this.match(SqlBaseParser.EXISTS);
            }

            break;

        case 3:
            localctx = new InsertOverwriteHiveDirContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1266;
            this.match(SqlBaseParser.INSERT);
            this.state = 1267;
            this.match(SqlBaseParser.OVERWRITE);
            this.state = 1269;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.LOCAL) {
                this.state = 1268;
                this.match(SqlBaseParser.LOCAL);
            }

            this.state = 1271;
            this.match(SqlBaseParser.DIRECTORY);
            this.state = 1272;
            localctx.path = this.match(SqlBaseParser.STRING);
            this.state = 1274;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.ROW) {
                this.state = 1273;
                this.rowFormat();
            }

            this.state = 1277;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.STORED) {
                this.state = 1276;
                this.createFileFormat();
            }

            break;

        case 4:
            localctx = new InsertOverwriteDirContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1279;
            this.match(SqlBaseParser.INSERT);
            this.state = 1280;
            this.match(SqlBaseParser.OVERWRITE);
            this.state = 1282;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.LOCAL) {
                this.state = 1281;
                this.match(SqlBaseParser.LOCAL);
            }

            this.state = 1284;
            this.match(SqlBaseParser.DIRECTORY);
            this.state = 1286;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.STRING) {
                this.state = 1285;
                localctx.path = this.match(SqlBaseParser.STRING);
            }

            this.state = 1288;
            this.tableProvider();
            this.state = 1291;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.OPTIONS) {
                this.state = 1289;
                this.match(SqlBaseParser.OPTIONS);
                this.state = 1290;
                localctx.options = this.tablePropertyList();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PartitionSpecLocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_partitionSpecLocation;
    return this;
}

PartitionSpecLocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionSpecLocationContext.prototype.constructor = PartitionSpecLocationContext;

PartitionSpecLocationContext.prototype.partitionSpec = function() {
    return this.getTypedRuleContext(PartitionSpecContext,0);
};

PartitionSpecLocationContext.prototype.locationSpec = function() {
    return this.getTypedRuleContext(LocationSpecContext,0);
};




SqlBaseParser.PartitionSpecLocationContext = PartitionSpecLocationContext;

SqlBaseParser.prototype.partitionSpecLocation = function() {

    var localctx = new PartitionSpecLocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, SqlBaseParser.RULE_partitionSpecLocation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1295;
        this.partitionSpec();
        this.state = 1297;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.LOCATION) {
            this.state = 1296;
            this.locationSpec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PartitionSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_partitionSpec;
    return this;
}

PartitionSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionSpecContext.prototype.constructor = PartitionSpecContext;

PartitionSpecContext.prototype.PARTITION = function() {
    return this.getToken(SqlBaseParser.PARTITION, 0);
};

PartitionSpecContext.prototype.partitionVal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartitionValContext);
    } else {
        return this.getTypedRuleContext(PartitionValContext,i);
    }
};




SqlBaseParser.PartitionSpecContext = PartitionSpecContext;

SqlBaseParser.prototype.partitionSpec = function() {

    var localctx = new PartitionSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, SqlBaseParser.RULE_partitionSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1299;
        this.match(SqlBaseParser.PARTITION);
        this.state = 1300;
        this.match(SqlBaseParser.T__0);
        this.state = 1301;
        this.partitionVal();
        this.state = 1306;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__2) {
            this.state = 1302;
            this.match(SqlBaseParser.T__2);
            this.state = 1303;
            this.partitionVal();
            this.state = 1308;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1309;
        this.match(SqlBaseParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PartitionValContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_partitionVal;
    return this;
}

PartitionValContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionValContext.prototype.constructor = PartitionValContext;

PartitionValContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

PartitionValContext.prototype.EQ = function() {
    return this.getToken(SqlBaseParser.EQ, 0);
};

PartitionValContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};




SqlBaseParser.PartitionValContext = PartitionValContext;

SqlBaseParser.prototype.partitionVal = function() {

    var localctx = new PartitionValContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, SqlBaseParser.RULE_partitionVal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1311;
        this.identifier();
        this.state = 1314;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.EQ) {
            this.state = 1312;
            this.match(SqlBaseParser.EQ);
            this.state = 1313;
            this.constant();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DatabaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_database;
    return this;
}

DatabaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DatabaseContext.prototype.constructor = DatabaseContext;

DatabaseContext.prototype.DATABASE = function() {
    return this.getToken(SqlBaseParser.DATABASE, 0);
};

DatabaseContext.prototype.SCHEMA = function() {
    return this.getToken(SqlBaseParser.SCHEMA, 0);
};




SqlBaseParser.DatabaseContext = DatabaseContext;

SqlBaseParser.prototype.database = function() {

    var localctx = new DatabaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, SqlBaseParser.RULE_database);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1316;
        _la = this._input.LA(1);
        if(!(_la===SqlBaseParser.DATABASE || _la===SqlBaseParser.SCHEMA)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DescribeFuncNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_describeFuncName;
    return this;
}

DescribeFuncNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DescribeFuncNameContext.prototype.constructor = DescribeFuncNameContext;

DescribeFuncNameContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

DescribeFuncNameContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

DescribeFuncNameContext.prototype.comparisonOperator = function() {
    return this.getTypedRuleContext(ComparisonOperatorContext,0);
};

DescribeFuncNameContext.prototype.arithmeticOperator = function() {
    return this.getTypedRuleContext(ArithmeticOperatorContext,0);
};

DescribeFuncNameContext.prototype.predicateOperator = function() {
    return this.getTypedRuleContext(PredicateOperatorContext,0);
};




SqlBaseParser.DescribeFuncNameContext = DescribeFuncNameContext;

SqlBaseParser.prototype.describeFuncName = function() {

    var localctx = new DescribeFuncNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, SqlBaseParser.RULE_describeFuncName);
    try {
        this.state = 1323;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,142,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1318;
            this.qualifiedName();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1319;
            this.match(SqlBaseParser.STRING);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1320;
            this.comparisonOperator();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1321;
            this.arithmeticOperator();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1322;
            this.predicateOperator();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DescribeColNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_describeColName;
    this._identifier = null; // IdentifierContext
    this.nameParts = []; // of IdentifierContexts
    return this;
}

DescribeColNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DescribeColNameContext.prototype.constructor = DescribeColNameContext;

DescribeColNameContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};




SqlBaseParser.DescribeColNameContext = DescribeColNameContext;

SqlBaseParser.prototype.describeColName = function() {

    var localctx = new DescribeColNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, SqlBaseParser.RULE_describeColName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1325;
        localctx._identifier = this.identifier();
        localctx.nameParts.push(localctx._identifier);
        this.state = 1330;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__3) {
            this.state = 1326;
            this.match(SqlBaseParser.T__3);
            this.state = 1327;
            localctx._identifier = this.identifier();
            localctx.nameParts.push(localctx._identifier);
            this.state = 1332;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CtesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_ctes;
    return this;
}

CtesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CtesContext.prototype.constructor = CtesContext;

CtesContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

CtesContext.prototype.namedQuery = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedQueryContext);
    } else {
        return this.getTypedRuleContext(NamedQueryContext,i);
    }
};




SqlBaseParser.CtesContext = CtesContext;

SqlBaseParser.prototype.ctes = function() {

    var localctx = new CtesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, SqlBaseParser.RULE_ctes);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1333;
        this.match(SqlBaseParser.WITH);
        this.state = 1334;
        this.namedQuery();
        this.state = 1339;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__2) {
            this.state = 1335;
            this.match(SqlBaseParser.T__2);
            this.state = 1336;
            this.namedQuery();
            this.state = 1341;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamedQueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_namedQuery;
    this.name = null; // ErrorCapturingIdentifierContext
    this.columnAliases = null; // IdentifierListContext
    return this;
}

NamedQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedQueryContext.prototype.constructor = NamedQueryContext;

NamedQueryContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

NamedQueryContext.prototype.errorCapturingIdentifier = function() {
    return this.getTypedRuleContext(ErrorCapturingIdentifierContext,0);
};

NamedQueryContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

NamedQueryContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};




SqlBaseParser.NamedQueryContext = NamedQueryContext;

SqlBaseParser.prototype.namedQuery = function() {

    var localctx = new NamedQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, SqlBaseParser.RULE_namedQuery);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1342;
        localctx.name = this.errorCapturingIdentifier();
        this.state = 1344;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,145,this._ctx);
        if(la_===1) {
            this.state = 1343;
            localctx.columnAliases = this.identifierList();

        }
        this.state = 1347;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.AS) {
            this.state = 1346;
            this.match(SqlBaseParser.AS);
        }

        this.state = 1349;
        this.match(SqlBaseParser.T__0);
        this.state = 1350;
        this.query();
        this.state = 1351;
        this.match(SqlBaseParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TableProviderContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_tableProvider;
    return this;
}

TableProviderContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableProviderContext.prototype.constructor = TableProviderContext;

TableProviderContext.prototype.USING = function() {
    return this.getToken(SqlBaseParser.USING, 0);
};

TableProviderContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};




SqlBaseParser.TableProviderContext = TableProviderContext;

SqlBaseParser.prototype.tableProvider = function() {

    var localctx = new TableProviderContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, SqlBaseParser.RULE_tableProvider);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1353;
        this.match(SqlBaseParser.USING);
        this.state = 1354;
        this.qualifiedName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TablePropertyListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_tablePropertyList;
    return this;
}

TablePropertyListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablePropertyListContext.prototype.constructor = TablePropertyListContext;

TablePropertyListContext.prototype.tableProperty = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TablePropertyContext);
    } else {
        return this.getTypedRuleContext(TablePropertyContext,i);
    }
};




SqlBaseParser.TablePropertyListContext = TablePropertyListContext;

SqlBaseParser.prototype.tablePropertyList = function() {

    var localctx = new TablePropertyListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, SqlBaseParser.RULE_tablePropertyList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1356;
        this.match(SqlBaseParser.T__0);
        this.state = 1357;
        this.tableProperty();
        this.state = 1362;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__2) {
            this.state = 1358;
            this.match(SqlBaseParser.T__2);
            this.state = 1359;
            this.tableProperty();
            this.state = 1364;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1365;
        this.match(SqlBaseParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TablePropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_tableProperty;
    this.key = null; // TablePropertyKeyContext
    this.value = null; // TablePropertyValueContext
    return this;
}

TablePropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablePropertyContext.prototype.constructor = TablePropertyContext;

TablePropertyContext.prototype.tablePropertyKey = function() {
    return this.getTypedRuleContext(TablePropertyKeyContext,0);
};

TablePropertyContext.prototype.tablePropertyValue = function() {
    return this.getTypedRuleContext(TablePropertyValueContext,0);
};

TablePropertyContext.prototype.EQ = function() {
    return this.getToken(SqlBaseParser.EQ, 0);
};




SqlBaseParser.TablePropertyContext = TablePropertyContext;

SqlBaseParser.prototype.tableProperty = function() {

    var localctx = new TablePropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, SqlBaseParser.RULE_tableProperty);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1367;
        localctx.key = this.tablePropertyKey();
        this.state = 1372;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.FALSE || _la===SqlBaseParser.TRUE || _la===SqlBaseParser.EQ || ((((_la - 291)) & ~0x1f) == 0 && ((1 << (_la - 291)) & ((1 << (SqlBaseParser.STRING - 291)) | (1 << (SqlBaseParser.INTEGER_VALUE - 291)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 291)))) !== 0)) {
            this.state = 1369;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.EQ) {
                this.state = 1368;
                this.match(SqlBaseParser.EQ);
            }

            this.state = 1371;
            localctx.value = this.tablePropertyValue();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TablePropertyKeyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_tablePropertyKey;
    return this;
}

TablePropertyKeyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablePropertyKeyContext.prototype.constructor = TablePropertyKeyContext;

TablePropertyKeyContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

TablePropertyKeyContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};




SqlBaseParser.TablePropertyKeyContext = TablePropertyKeyContext;

SqlBaseParser.prototype.tablePropertyKey = function() {

    var localctx = new TablePropertyKeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, SqlBaseParser.RULE_tablePropertyKey);
    var _la = 0; // Token type
    try {
        this.state = 1383;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,151,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1374;
            this.identifier();
            this.state = 1379;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__3) {
                this.state = 1375;
                this.match(SqlBaseParser.T__3);
                this.state = 1376;
                this.identifier();
                this.state = 1381;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1382;
            this.match(SqlBaseParser.STRING);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TablePropertyValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_tablePropertyValue;
    return this;
}

TablePropertyValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablePropertyValueContext.prototype.constructor = TablePropertyValueContext;

TablePropertyValueContext.prototype.INTEGER_VALUE = function() {
    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
};

TablePropertyValueContext.prototype.DECIMAL_VALUE = function() {
    return this.getToken(SqlBaseParser.DECIMAL_VALUE, 0);
};

TablePropertyValueContext.prototype.booleanValue = function() {
    return this.getTypedRuleContext(BooleanValueContext,0);
};

TablePropertyValueContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};




SqlBaseParser.TablePropertyValueContext = TablePropertyValueContext;

SqlBaseParser.prototype.tablePropertyValue = function() {

    var localctx = new TablePropertyValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, SqlBaseParser.RULE_tablePropertyValue);
    try {
        this.state = 1389;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.INTEGER_VALUE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1385;
            this.match(SqlBaseParser.INTEGER_VALUE);
            break;
        case SqlBaseParser.DECIMAL_VALUE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1386;
            this.match(SqlBaseParser.DECIMAL_VALUE);
            break;
        case SqlBaseParser.FALSE:
        case SqlBaseParser.TRUE:
            this.enterOuterAlt(localctx, 3);
            this.state = 1387;
            this.booleanValue();
            break;
        case SqlBaseParser.STRING:
            this.enterOuterAlt(localctx, 4);
            this.state = 1388;
            this.match(SqlBaseParser.STRING);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_constantList;
    return this;
}

ConstantListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantListContext.prototype.constructor = ConstantListContext;

ConstantListContext.prototype.constant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantContext);
    } else {
        return this.getTypedRuleContext(ConstantContext,i);
    }
};




SqlBaseParser.ConstantListContext = ConstantListContext;

SqlBaseParser.prototype.constantList = function() {

    var localctx = new ConstantListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, SqlBaseParser.RULE_constantList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1391;
        this.match(SqlBaseParser.T__0);
        this.state = 1392;
        this.constant();
        this.state = 1397;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__2) {
            this.state = 1393;
            this.match(SqlBaseParser.T__2);
            this.state = 1394;
            this.constant();
            this.state = 1399;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1400;
        this.match(SqlBaseParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NestedConstantListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_nestedConstantList;
    return this;
}

NestedConstantListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NestedConstantListContext.prototype.constructor = NestedConstantListContext;

NestedConstantListContext.prototype.constantList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantListContext);
    } else {
        return this.getTypedRuleContext(ConstantListContext,i);
    }
};




SqlBaseParser.NestedConstantListContext = NestedConstantListContext;

SqlBaseParser.prototype.nestedConstantList = function() {

    var localctx = new NestedConstantListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, SqlBaseParser.RULE_nestedConstantList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1402;
        this.match(SqlBaseParser.T__0);
        this.state = 1403;
        this.constantList();
        this.state = 1408;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__2) {
            this.state = 1404;
            this.match(SqlBaseParser.T__2);
            this.state = 1405;
            this.constantList();
            this.state = 1410;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1411;
        this.match(SqlBaseParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateFileFormatContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_createFileFormat;
    return this;
}

CreateFileFormatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateFileFormatContext.prototype.constructor = CreateFileFormatContext;

CreateFileFormatContext.prototype.STORED = function() {
    return this.getToken(SqlBaseParser.STORED, 0);
};

CreateFileFormatContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

CreateFileFormatContext.prototype.fileFormat = function() {
    return this.getTypedRuleContext(FileFormatContext,0);
};

CreateFileFormatContext.prototype.BY = function() {
    return this.getToken(SqlBaseParser.BY, 0);
};

CreateFileFormatContext.prototype.storageHandler = function() {
    return this.getTypedRuleContext(StorageHandlerContext,0);
};




SqlBaseParser.CreateFileFormatContext = CreateFileFormatContext;

SqlBaseParser.prototype.createFileFormat = function() {

    var localctx = new CreateFileFormatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, SqlBaseParser.RULE_createFileFormat);
    try {
        this.state = 1419;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,155,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1413;
            this.match(SqlBaseParser.STORED);
            this.state = 1414;
            this.match(SqlBaseParser.AS);
            this.state = 1415;
            this.fileFormat();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1416;
            this.match(SqlBaseParser.STORED);
            this.state = 1417;
            this.match(SqlBaseParser.BY);
            this.state = 1418;
            this.storageHandler();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FileFormatContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_fileFormat;
    return this;
}

FileFormatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FileFormatContext.prototype.constructor = FileFormatContext;



FileFormatContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function TableFileFormatContext(parser, ctx) {
	FileFormatContext.call(this, parser);
    this.inFmt = null; // Token;
    this.outFmt = null; // Token;
    FileFormatContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableFileFormatContext.prototype = Object.create(FileFormatContext.prototype);
TableFileFormatContext.prototype.constructor = TableFileFormatContext;

SqlBaseParser.TableFileFormatContext = TableFileFormatContext;

TableFileFormatContext.prototype.INPUTFORMAT = function() {
    return this.getToken(SqlBaseParser.INPUTFORMAT, 0);
};

TableFileFormatContext.prototype.OUTPUTFORMAT = function() {
    return this.getToken(SqlBaseParser.OUTPUTFORMAT, 0);
};

TableFileFormatContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.STRING);
    } else {
        return this.getToken(SqlBaseParser.STRING, i);
    }
};


function GenericFileFormatContext(parser, ctx) {
	FileFormatContext.call(this, parser);
    FileFormatContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GenericFileFormatContext.prototype = Object.create(FileFormatContext.prototype);
GenericFileFormatContext.prototype.constructor = GenericFileFormatContext;

SqlBaseParser.GenericFileFormatContext = GenericFileFormatContext;

GenericFileFormatContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};


SqlBaseParser.FileFormatContext = FileFormatContext;

SqlBaseParser.prototype.fileFormat = function() {

    var localctx = new FileFormatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, SqlBaseParser.RULE_fileFormat);
    try {
        this.state = 1426;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
        switch(la_) {
        case 1:
            localctx = new TableFileFormatContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1421;
            this.match(SqlBaseParser.INPUTFORMAT);
            this.state = 1422;
            localctx.inFmt = this.match(SqlBaseParser.STRING);
            this.state = 1423;
            this.match(SqlBaseParser.OUTPUTFORMAT);
            this.state = 1424;
            localctx.outFmt = this.match(SqlBaseParser.STRING);
            break;

        case 2:
            localctx = new GenericFileFormatContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1425;
            this.identifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StorageHandlerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_storageHandler;
    return this;
}

StorageHandlerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StorageHandlerContext.prototype.constructor = StorageHandlerContext;

StorageHandlerContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

StorageHandlerContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

StorageHandlerContext.prototype.SERDEPROPERTIES = function() {
    return this.getToken(SqlBaseParser.SERDEPROPERTIES, 0);
};

StorageHandlerContext.prototype.tablePropertyList = function() {
    return this.getTypedRuleContext(TablePropertyListContext,0);
};




SqlBaseParser.StorageHandlerContext = StorageHandlerContext;

SqlBaseParser.prototype.storageHandler = function() {

    var localctx = new StorageHandlerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, SqlBaseParser.RULE_storageHandler);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1428;
        this.match(SqlBaseParser.STRING);
        this.state = 1432;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
        if(la_===1) {
            this.state = 1429;
            this.match(SqlBaseParser.WITH);
            this.state = 1430;
            this.match(SqlBaseParser.SERDEPROPERTIES);
            this.state = 1431;
            this.tablePropertyList();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ResourceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_resource;
    return this;
}

ResourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResourceContext.prototype.constructor = ResourceContext;

ResourceContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ResourceContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};




SqlBaseParser.ResourceContext = ResourceContext;

SqlBaseParser.prototype.resource = function() {

    var localctx = new ResourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, SqlBaseParser.RULE_resource);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1434;
        this.identifier();
        this.state = 1435;
        this.match(SqlBaseParser.STRING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DmlStatementNoWithContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_dmlStatementNoWith;
    return this;
}

DmlStatementNoWithContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DmlStatementNoWithContext.prototype.constructor = DmlStatementNoWithContext;



DmlStatementNoWithContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SingleInsertQueryContext(parser, ctx) {
	DmlStatementNoWithContext.call(this, parser);
    DmlStatementNoWithContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SingleInsertQueryContext.prototype = Object.create(DmlStatementNoWithContext.prototype);
SingleInsertQueryContext.prototype.constructor = SingleInsertQueryContext;

SqlBaseParser.SingleInsertQueryContext = SingleInsertQueryContext;

SingleInsertQueryContext.prototype.insertInto = function() {
    return this.getTypedRuleContext(InsertIntoContext,0);
};

SingleInsertQueryContext.prototype.queryTerm = function() {
    return this.getTypedRuleContext(QueryTermContext,0);
};

SingleInsertQueryContext.prototype.queryOrganization = function() {
    return this.getTypedRuleContext(QueryOrganizationContext,0);
};

function MultiInsertQueryContext(parser, ctx) {
	DmlStatementNoWithContext.call(this, parser);
    DmlStatementNoWithContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MultiInsertQueryContext.prototype = Object.create(DmlStatementNoWithContext.prototype);
MultiInsertQueryContext.prototype.constructor = MultiInsertQueryContext;

SqlBaseParser.MultiInsertQueryContext = MultiInsertQueryContext;

MultiInsertQueryContext.prototype.fromClause = function() {
    return this.getTypedRuleContext(FromClauseContext,0);
};

MultiInsertQueryContext.prototype.multiInsertQueryBody = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MultiInsertQueryBodyContext);
    } else {
        return this.getTypedRuleContext(MultiInsertQueryBodyContext,i);
    }
};


SqlBaseParser.DmlStatementNoWithContext = DmlStatementNoWithContext;

SqlBaseParser.prototype.dmlStatementNoWith = function() {

    var localctx = new DmlStatementNoWithContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, SqlBaseParser.RULE_dmlStatementNoWith);
    var _la = 0; // Token type
    try {
        this.state = 1447;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.INSERT:
            localctx = new SingleInsertQueryContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1437;
            this.insertInto();
            this.state = 1438;
            this.queryTerm(0);
            this.state = 1439;
            this.queryOrganization();
            break;
        case SqlBaseParser.FROM:
            localctx = new MultiInsertQueryContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1441;
            this.fromClause();
            this.state = 1443;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1442;
                this.multiInsertQueryBody();
                this.state = 1445;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===SqlBaseParser.INSERT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QueryOrganizationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_queryOrganization;
    this._sortItem = null; // SortItemContext
    this.order = []; // of SortItemContexts
    this._expression = null; // ExpressionContext
    this.clusterBy = []; // of ExpressionContexts
    this.distributeBy = []; // of ExpressionContexts
    this.sort = []; // of SortItemContexts
    this.limit = null; // ExpressionContext
    return this;
}

QueryOrganizationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryOrganizationContext.prototype.constructor = QueryOrganizationContext;

QueryOrganizationContext.prototype.ORDER = function() {
    return this.getToken(SqlBaseParser.ORDER, 0);
};

QueryOrganizationContext.prototype.BY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.BY);
    } else {
        return this.getToken(SqlBaseParser.BY, i);
    }
};


QueryOrganizationContext.prototype.CLUSTER = function() {
    return this.getToken(SqlBaseParser.CLUSTER, 0);
};

QueryOrganizationContext.prototype.DISTRIBUTE = function() {
    return this.getToken(SqlBaseParser.DISTRIBUTE, 0);
};

QueryOrganizationContext.prototype.SORT = function() {
    return this.getToken(SqlBaseParser.SORT, 0);
};

QueryOrganizationContext.prototype.windowClause = function() {
    return this.getTypedRuleContext(WindowClauseContext,0);
};

QueryOrganizationContext.prototype.LIMIT = function() {
    return this.getToken(SqlBaseParser.LIMIT, 0);
};

QueryOrganizationContext.prototype.sortItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SortItemContext);
    } else {
        return this.getTypedRuleContext(SortItemContext,i);
    }
};

QueryOrganizationContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

QueryOrganizationContext.prototype.ALL = function() {
    return this.getToken(SqlBaseParser.ALL, 0);
};




SqlBaseParser.QueryOrganizationContext = QueryOrganizationContext;

SqlBaseParser.prototype.queryOrganization = function() {

    var localctx = new QueryOrganizationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, SqlBaseParser.RULE_queryOrganization);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1459;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,161,this._ctx);
        if(la_===1) {
            this.state = 1449;
            this.match(SqlBaseParser.ORDER);
            this.state = 1450;
            this.match(SqlBaseParser.BY);
            this.state = 1451;
            localctx._sortItem = this.sortItem();
            localctx.order.push(localctx._sortItem);
            this.state = 1456;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,160,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1452;
                    this.match(SqlBaseParser.T__2);
                    this.state = 1453;
                    localctx._sortItem = this.sortItem();
                    localctx.order.push(localctx._sortItem);
                }
                this.state = 1458;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,160,this._ctx);
            }


        }
        this.state = 1471;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,163,this._ctx);
        if(la_===1) {
            this.state = 1461;
            this.match(SqlBaseParser.CLUSTER);
            this.state = 1462;
            this.match(SqlBaseParser.BY);
            this.state = 1463;
            localctx._expression = this.expression();
            localctx.clusterBy.push(localctx._expression);
            this.state = 1468;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,162,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1464;
                    this.match(SqlBaseParser.T__2);
                    this.state = 1465;
                    localctx._expression = this.expression();
                    localctx.clusterBy.push(localctx._expression);
                }
                this.state = 1470;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,162,this._ctx);
            }


        }
        this.state = 1483;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
        if(la_===1) {
            this.state = 1473;
            this.match(SqlBaseParser.DISTRIBUTE);
            this.state = 1474;
            this.match(SqlBaseParser.BY);
            this.state = 1475;
            localctx._expression = this.expression();
            localctx.distributeBy.push(localctx._expression);
            this.state = 1480;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,164,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1476;
                    this.match(SqlBaseParser.T__2);
                    this.state = 1477;
                    localctx._expression = this.expression();
                    localctx.distributeBy.push(localctx._expression);
                }
                this.state = 1482;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,164,this._ctx);
            }


        }
        this.state = 1495;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,167,this._ctx);
        if(la_===1) {
            this.state = 1485;
            this.match(SqlBaseParser.SORT);
            this.state = 1486;
            this.match(SqlBaseParser.BY);
            this.state = 1487;
            localctx._sortItem = this.sortItem();
            localctx.sort.push(localctx._sortItem);
            this.state = 1492;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,166,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1488;
                    this.match(SqlBaseParser.T__2);
                    this.state = 1489;
                    localctx._sortItem = this.sortItem();
                    localctx.sort.push(localctx._sortItem);
                }
                this.state = 1494;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,166,this._ctx);
            }


        }
        this.state = 1498;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,168,this._ctx);
        if(la_===1) {
            this.state = 1497;
            this.windowClause();

        }
        this.state = 1505;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
        if(la_===1) {
            this.state = 1500;
            this.match(SqlBaseParser.LIMIT);
            this.state = 1503;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,169,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1501;
                this.match(SqlBaseParser.ALL);
                break;

            case 2:
                this.state = 1502;
                localctx.limit = this.expression();
                break;

            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MultiInsertQueryBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_multiInsertQueryBody;
    return this;
}

MultiInsertQueryBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiInsertQueryBodyContext.prototype.constructor = MultiInsertQueryBodyContext;

MultiInsertQueryBodyContext.prototype.insertInto = function() {
    return this.getTypedRuleContext(InsertIntoContext,0);
};

MultiInsertQueryBodyContext.prototype.fromStatementBody = function() {
    return this.getTypedRuleContext(FromStatementBodyContext,0);
};




SqlBaseParser.MultiInsertQueryBodyContext = MultiInsertQueryBodyContext;

SqlBaseParser.prototype.multiInsertQueryBody = function() {

    var localctx = new MultiInsertQueryBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, SqlBaseParser.RULE_multiInsertQueryBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1507;
        this.insertInto();
        this.state = 1508;
        this.fromStatementBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QueryTermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_queryTerm;
    return this;
}

QueryTermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryTermContext.prototype.constructor = QueryTermContext;



QueryTermContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function QueryTermDefaultContext(parser, ctx) {
	QueryTermContext.call(this, parser);
    QueryTermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QueryTermDefaultContext.prototype = Object.create(QueryTermContext.prototype);
QueryTermDefaultContext.prototype.constructor = QueryTermDefaultContext;

SqlBaseParser.QueryTermDefaultContext = QueryTermDefaultContext;

QueryTermDefaultContext.prototype.queryPrimary = function() {
    return this.getTypedRuleContext(QueryPrimaryContext,0);
};

function SetOperationContext(parser, ctx) {
	QueryTermContext.call(this, parser);
    this.left = null; // QueryTermContext;
    this.operator = null; // Token;
    this.right = null; // QueryTermContext;
    QueryTermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetOperationContext.prototype = Object.create(QueryTermContext.prototype);
SetOperationContext.prototype.constructor = SetOperationContext;

SqlBaseParser.SetOperationContext = SetOperationContext;

SetOperationContext.prototype.queryTerm = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QueryTermContext);
    } else {
        return this.getTypedRuleContext(QueryTermContext,i);
    }
};

SetOperationContext.prototype.INTERSECT = function() {
    return this.getToken(SqlBaseParser.INTERSECT, 0);
};

SetOperationContext.prototype.UNION = function() {
    return this.getToken(SqlBaseParser.UNION, 0);
};

SetOperationContext.prototype.EXCEPT = function() {
    return this.getToken(SqlBaseParser.EXCEPT, 0);
};

SetOperationContext.prototype.SETMINUS = function() {
    return this.getToken(SqlBaseParser.SETMINUS, 0);
};

SetOperationContext.prototype.setQuantifier = function() {
    return this.getTypedRuleContext(SetQuantifierContext,0);
};


SqlBaseParser.prototype.queryTerm = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new QueryTermContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 76;
    this.enterRecursionRule(localctx, 76, SqlBaseParser.RULE_queryTerm, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new QueryTermDefaultContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1511;
        this.queryPrimary();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1536;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,175,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1534;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,174,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new SetOperationContext(this, new QueryTermContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_queryTerm);
                    this.state = 1513;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 1514;
                    if (!( legacy_setops_precedence_enbled)) {
                        throw new antlr4.error.FailedPredicateException(this, "legacy_setops_precedence_enbled");
                    }
                    this.state = 1515;
                    localctx.operator = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===SqlBaseParser.EXCEPT || _la===SqlBaseParser.INTERSECT || _la===SqlBaseParser.SETMINUS || _la===SqlBaseParser.UNION)) {
                        localctx.operator = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1517;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===SqlBaseParser.ALL || _la===SqlBaseParser.DISTINCT) {
                        this.state = 1516;
                        this.setQuantifier();
                    }

                    this.state = 1519;
                    localctx.right = this.queryTerm(4);
                    break;

                case 2:
                    localctx = new SetOperationContext(this, new QueryTermContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_queryTerm);
                    this.state = 1520;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 1521;
                    if (!( !legacy_setops_precedence_enbled)) {
                        throw new antlr4.error.FailedPredicateException(this, "!legacy_setops_precedence_enbled");
                    }
                    this.state = 1522;
                    localctx.operator = this.match(SqlBaseParser.INTERSECT);
                    this.state = 1524;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===SqlBaseParser.ALL || _la===SqlBaseParser.DISTINCT) {
                        this.state = 1523;
                        this.setQuantifier();
                    }

                    this.state = 1526;
                    localctx.right = this.queryTerm(3);
                    break;

                case 3:
                    localctx = new SetOperationContext(this, new QueryTermContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_queryTerm);
                    this.state = 1527;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 1528;
                    if (!( !legacy_setops_precedence_enbled)) {
                        throw new antlr4.error.FailedPredicateException(this, "!legacy_setops_precedence_enbled");
                    }
                    this.state = 1529;
                    localctx.operator = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===SqlBaseParser.EXCEPT || _la===SqlBaseParser.SETMINUS || _la===SqlBaseParser.UNION)) {
                        localctx.operator = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1531;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===SqlBaseParser.ALL || _la===SqlBaseParser.DISTINCT) {
                        this.state = 1530;
                        this.setQuantifier();
                    }

                    this.state = 1533;
                    localctx.right = this.queryTerm(2);
                    break;

                }
            }
            this.state = 1538;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,175,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function QueryPrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_queryPrimary;
    return this;
}

QueryPrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryPrimaryContext.prototype.constructor = QueryPrimaryContext;



QueryPrimaryContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SubqueryContext(parser, ctx) {
	QueryPrimaryContext.call(this, parser);
    QueryPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubqueryContext.prototype = Object.create(QueryPrimaryContext.prototype);
SubqueryContext.prototype.constructor = SubqueryContext;

SqlBaseParser.SubqueryContext = SubqueryContext;

SubqueryContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

function QueryPrimaryDefaultContext(parser, ctx) {
	QueryPrimaryContext.call(this, parser);
    QueryPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QueryPrimaryDefaultContext.prototype = Object.create(QueryPrimaryContext.prototype);
QueryPrimaryDefaultContext.prototype.constructor = QueryPrimaryDefaultContext;

SqlBaseParser.QueryPrimaryDefaultContext = QueryPrimaryDefaultContext;

QueryPrimaryDefaultContext.prototype.querySpecification = function() {
    return this.getTypedRuleContext(QuerySpecificationContext,0);
};

function InlineTableDefault1Context(parser, ctx) {
	QueryPrimaryContext.call(this, parser);
    QueryPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InlineTableDefault1Context.prototype = Object.create(QueryPrimaryContext.prototype);
InlineTableDefault1Context.prototype.constructor = InlineTableDefault1Context;

SqlBaseParser.InlineTableDefault1Context = InlineTableDefault1Context;

InlineTableDefault1Context.prototype.inlineTable = function() {
    return this.getTypedRuleContext(InlineTableContext,0);
};

function FromStmtContext(parser, ctx) {
	QueryPrimaryContext.call(this, parser);
    QueryPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FromStmtContext.prototype = Object.create(QueryPrimaryContext.prototype);
FromStmtContext.prototype.constructor = FromStmtContext;

SqlBaseParser.FromStmtContext = FromStmtContext;

FromStmtContext.prototype.fromStatement = function() {
    return this.getTypedRuleContext(FromStatementContext,0);
};

function TableContext(parser, ctx) {
	QueryPrimaryContext.call(this, parser);
    QueryPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableContext.prototype = Object.create(QueryPrimaryContext.prototype);
TableContext.prototype.constructor = TableContext;

SqlBaseParser.TableContext = TableContext;

TableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

TableContext.prototype.multipartIdentifier = function() {
    return this.getTypedRuleContext(MultipartIdentifierContext,0);
};


SqlBaseParser.QueryPrimaryContext = QueryPrimaryContext;

SqlBaseParser.prototype.queryPrimary = function() {

    var localctx = new QueryPrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, SqlBaseParser.RULE_queryPrimary);
    try {
        this.state = 1548;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.MAP:
        case SqlBaseParser.REDUCE:
        case SqlBaseParser.SELECT:
            localctx = new QueryPrimaryDefaultContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1539;
            this.querySpecification();
            break;
        case SqlBaseParser.FROM:
            localctx = new FromStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1540;
            this.fromStatement();
            break;
        case SqlBaseParser.TABLE:
            localctx = new TableContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1541;
            this.match(SqlBaseParser.TABLE);
            this.state = 1542;
            this.multipartIdentifier();
            break;
        case SqlBaseParser.VALUES:
            localctx = new InlineTableDefault1Context(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1543;
            this.inlineTable();
            break;
        case SqlBaseParser.T__0:
            localctx = new SubqueryContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1544;
            this.match(SqlBaseParser.T__0);
            this.state = 1545;
            this.query();
            this.state = 1546;
            this.match(SqlBaseParser.T__1);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SortItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_sortItem;
    this.ordering = null; // Token
    this.nullOrder = null; // Token
    return this;
}

SortItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SortItemContext.prototype.constructor = SortItemContext;

SortItemContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SortItemContext.prototype.NULLS = function() {
    return this.getToken(SqlBaseParser.NULLS, 0);
};

SortItemContext.prototype.ASC = function() {
    return this.getToken(SqlBaseParser.ASC, 0);
};

SortItemContext.prototype.DESC = function() {
    return this.getToken(SqlBaseParser.DESC, 0);
};

SortItemContext.prototype.LAST = function() {
    return this.getToken(SqlBaseParser.LAST, 0);
};

SortItemContext.prototype.FIRST = function() {
    return this.getToken(SqlBaseParser.FIRST, 0);
};




SqlBaseParser.SortItemContext = SortItemContext;

SqlBaseParser.prototype.sortItem = function() {

    var localctx = new SortItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, SqlBaseParser.RULE_sortItem);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1550;
        this.expression();
        this.state = 1552;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,177,this._ctx);
        if(la_===1) {
            this.state = 1551;
            localctx.ordering = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.ASC || _la===SqlBaseParser.DESC)) {
                localctx.ordering = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
        this.state = 1556;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,178,this._ctx);
        if(la_===1) {
            this.state = 1554;
            this.match(SqlBaseParser.NULLS);
            this.state = 1555;
            localctx.nullOrder = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.FIRST || _la===SqlBaseParser.LAST)) {
                localctx.nullOrder = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FromStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_fromStatement;
    return this;
}

FromStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FromStatementContext.prototype.constructor = FromStatementContext;

FromStatementContext.prototype.fromClause = function() {
    return this.getTypedRuleContext(FromClauseContext,0);
};

FromStatementContext.prototype.fromStatementBody = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FromStatementBodyContext);
    } else {
        return this.getTypedRuleContext(FromStatementBodyContext,i);
    }
};




SqlBaseParser.FromStatementContext = FromStatementContext;

SqlBaseParser.prototype.fromStatement = function() {

    var localctx = new FromStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, SqlBaseParser.RULE_fromStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1558;
        this.fromClause();
        this.state = 1560;
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1559;
        		this.fromStatementBody();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1562;
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,179, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FromStatementBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_fromStatementBody;
    return this;
}

FromStatementBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FromStatementBodyContext.prototype.constructor = FromStatementBodyContext;

FromStatementBodyContext.prototype.transformClause = function() {
    return this.getTypedRuleContext(TransformClauseContext,0);
};

FromStatementBodyContext.prototype.queryOrganization = function() {
    return this.getTypedRuleContext(QueryOrganizationContext,0);
};

FromStatementBodyContext.prototype.whereClause = function() {
    return this.getTypedRuleContext(WhereClauseContext,0);
};

FromStatementBodyContext.prototype.selectClause = function() {
    return this.getTypedRuleContext(SelectClauseContext,0);
};

FromStatementBodyContext.prototype.lateralView = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LateralViewContext);
    } else {
        return this.getTypedRuleContext(LateralViewContext,i);
    }
};

FromStatementBodyContext.prototype.aggregationClause = function() {
    return this.getTypedRuleContext(AggregationClauseContext,0);
};

FromStatementBodyContext.prototype.havingClause = function() {
    return this.getTypedRuleContext(HavingClauseContext,0);
};

FromStatementBodyContext.prototype.windowClause = function() {
    return this.getTypedRuleContext(WindowClauseContext,0);
};




SqlBaseParser.FromStatementBodyContext = FromStatementBodyContext;

SqlBaseParser.prototype.fromStatementBody = function() {

    var localctx = new FromStatementBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, SqlBaseParser.RULE_fromStatementBody);
    try {
        this.state = 1591;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,186,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1564;
            this.transformClause();
            this.state = 1566;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,180,this._ctx);
            if(la_===1) {
                this.state = 1565;
                this.whereClause();

            }
            this.state = 1568;
            this.queryOrganization();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1570;
            this.selectClause();
            this.state = 1574;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,181,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1571;
                    this.lateralView();
                }
                this.state = 1576;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,181,this._ctx);
            }

            this.state = 1578;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,182,this._ctx);
            if(la_===1) {
                this.state = 1577;
                this.whereClause();

            }
            this.state = 1581;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,183,this._ctx);
            if(la_===1) {
                this.state = 1580;
                this.aggregationClause();

            }
            this.state = 1584;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,184,this._ctx);
            if(la_===1) {
                this.state = 1583;
                this.havingClause();

            }
            this.state = 1587;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,185,this._ctx);
            if(la_===1) {
                this.state = 1586;
                this.windowClause();

            }
            this.state = 1589;
            this.queryOrganization();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QuerySpecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_querySpecification;
    return this;
}

QuerySpecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuerySpecificationContext.prototype.constructor = QuerySpecificationContext;



QuerySpecificationContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function RegularQuerySpecificationContext(parser, ctx) {
	QuerySpecificationContext.call(this, parser);
    QuerySpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RegularQuerySpecificationContext.prototype = Object.create(QuerySpecificationContext.prototype);
RegularQuerySpecificationContext.prototype.constructor = RegularQuerySpecificationContext;

SqlBaseParser.RegularQuerySpecificationContext = RegularQuerySpecificationContext;

RegularQuerySpecificationContext.prototype.selectClause = function() {
    return this.getTypedRuleContext(SelectClauseContext,0);
};

RegularQuerySpecificationContext.prototype.fromClause = function() {
    return this.getTypedRuleContext(FromClauseContext,0);
};

RegularQuerySpecificationContext.prototype.lateralView = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LateralViewContext);
    } else {
        return this.getTypedRuleContext(LateralViewContext,i);
    }
};

RegularQuerySpecificationContext.prototype.whereClause = function() {
    return this.getTypedRuleContext(WhereClauseContext,0);
};

RegularQuerySpecificationContext.prototype.aggregationClause = function() {
    return this.getTypedRuleContext(AggregationClauseContext,0);
};

RegularQuerySpecificationContext.prototype.havingClause = function() {
    return this.getTypedRuleContext(HavingClauseContext,0);
};

RegularQuerySpecificationContext.prototype.windowClause = function() {
    return this.getTypedRuleContext(WindowClauseContext,0);
};

function TransformQuerySpecificationContext(parser, ctx) {
	QuerySpecificationContext.call(this, parser);
    QuerySpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TransformQuerySpecificationContext.prototype = Object.create(QuerySpecificationContext.prototype);
TransformQuerySpecificationContext.prototype.constructor = TransformQuerySpecificationContext;

SqlBaseParser.TransformQuerySpecificationContext = TransformQuerySpecificationContext;

TransformQuerySpecificationContext.prototype.transformClause = function() {
    return this.getTypedRuleContext(TransformClauseContext,0);
};

TransformQuerySpecificationContext.prototype.fromClause = function() {
    return this.getTypedRuleContext(FromClauseContext,0);
};

TransformQuerySpecificationContext.prototype.whereClause = function() {
    return this.getTypedRuleContext(WhereClauseContext,0);
};


SqlBaseParser.QuerySpecificationContext = QuerySpecificationContext;

SqlBaseParser.prototype.querySpecification = function() {

    var localctx = new QuerySpecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, SqlBaseParser.RULE_querySpecification);
    try {
        this.state = 1622;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,195,this._ctx);
        switch(la_) {
        case 1:
            localctx = new TransformQuerySpecificationContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1593;
            this.transformClause();
            this.state = 1595;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,187,this._ctx);
            if(la_===1) {
                this.state = 1594;
                this.fromClause();

            }
            this.state = 1598;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,188,this._ctx);
            if(la_===1) {
                this.state = 1597;
                this.whereClause();

            }
            break;

        case 2:
            localctx = new RegularQuerySpecificationContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1600;
            this.selectClause();
            this.state = 1602;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,189,this._ctx);
            if(la_===1) {
                this.state = 1601;
                this.fromClause();

            }
            this.state = 1607;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,190,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1604;
                    this.lateralView();
                }
                this.state = 1609;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,190,this._ctx);
            }

            this.state = 1611;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,191,this._ctx);
            if(la_===1) {
                this.state = 1610;
                this.whereClause();

            }
            this.state = 1614;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,192,this._ctx);
            if(la_===1) {
                this.state = 1613;
                this.aggregationClause();

            }
            this.state = 1617;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,193,this._ctx);
            if(la_===1) {
                this.state = 1616;
                this.havingClause();

            }
            this.state = 1620;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
            if(la_===1) {
                this.state = 1619;
                this.windowClause();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TransformClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_transformClause;
    this.kind = null; // Token
    this.inRowFormat = null; // RowFormatContext
    this.recordWriter = null; // Token
    this.script = null; // Token
    this.outRowFormat = null; // RowFormatContext
    this.recordReader = null; // Token
    return this;
}

TransformClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TransformClauseContext.prototype.constructor = TransformClauseContext;

TransformClauseContext.prototype.USING = function() {
    return this.getToken(SqlBaseParser.USING, 0);
};

TransformClauseContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.STRING);
    } else {
        return this.getToken(SqlBaseParser.STRING, i);
    }
};


TransformClauseContext.prototype.SELECT = function() {
    return this.getToken(SqlBaseParser.SELECT, 0);
};

TransformClauseContext.prototype.namedExpressionSeq = function() {
    return this.getTypedRuleContext(NamedExpressionSeqContext,0);
};

TransformClauseContext.prototype.TRANSFORM = function() {
    return this.getToken(SqlBaseParser.TRANSFORM, 0);
};

TransformClauseContext.prototype.MAP = function() {
    return this.getToken(SqlBaseParser.MAP, 0);
};

TransformClauseContext.prototype.REDUCE = function() {
    return this.getToken(SqlBaseParser.REDUCE, 0);
};

TransformClauseContext.prototype.RECORDWRITER = function() {
    return this.getToken(SqlBaseParser.RECORDWRITER, 0);
};

TransformClauseContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

TransformClauseContext.prototype.RECORDREADER = function() {
    return this.getToken(SqlBaseParser.RECORDREADER, 0);
};

TransformClauseContext.prototype.rowFormat = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RowFormatContext);
    } else {
        return this.getTypedRuleContext(RowFormatContext,i);
    }
};

TransformClauseContext.prototype.identifierSeq = function() {
    return this.getTypedRuleContext(IdentifierSeqContext,0);
};

TransformClauseContext.prototype.colTypeList = function() {
    return this.getTypedRuleContext(ColTypeListContext,0);
};




SqlBaseParser.TransformClauseContext = TransformClauseContext;

SqlBaseParser.prototype.transformClause = function() {

    var localctx = new TransformClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, SqlBaseParser.RULE_transformClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1634;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.SELECT:
            this.state = 1624;
            this.match(SqlBaseParser.SELECT);
            this.state = 1625;
            localctx.kind = this.match(SqlBaseParser.TRANSFORM);
            this.state = 1626;
            this.match(SqlBaseParser.T__0);
            this.state = 1627;
            this.namedExpressionSeq();
            this.state = 1628;
            this.match(SqlBaseParser.T__1);
            break;
        case SqlBaseParser.MAP:
            this.state = 1630;
            localctx.kind = this.match(SqlBaseParser.MAP);
            this.state = 1631;
            this.namedExpressionSeq();
            break;
        case SqlBaseParser.REDUCE:
            this.state = 1632;
            localctx.kind = this.match(SqlBaseParser.REDUCE);
            this.state = 1633;
            this.namedExpressionSeq();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1637;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.ROW) {
            this.state = 1636;
            localctx.inRowFormat = this.rowFormat();
        }

        this.state = 1641;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.RECORDWRITER) {
            this.state = 1639;
            this.match(SqlBaseParser.RECORDWRITER);
            this.state = 1640;
            localctx.recordWriter = this.match(SqlBaseParser.STRING);
        }

        this.state = 1643;
        this.match(SqlBaseParser.USING);
        this.state = 1644;
        localctx.script = this.match(SqlBaseParser.STRING);
        this.state = 1657;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,201,this._ctx);
        if(la_===1) {
            this.state = 1645;
            this.match(SqlBaseParser.AS);
            this.state = 1655;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,200,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1646;
                this.identifierSeq();
                break;

            case 2:
                this.state = 1647;
                this.colTypeList();
                break;

            case 3:
                this.state = 1648;
                this.match(SqlBaseParser.T__0);
                this.state = 1651;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,199,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1649;
                    this.identifierSeq();
                    break;

                case 2:
                    this.state = 1650;
                    this.colTypeList();
                    break;

                }
                this.state = 1653;
                this.match(SqlBaseParser.T__1);
                break;

            }

        }
        this.state = 1660;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,202,this._ctx);
        if(la_===1) {
            this.state = 1659;
            localctx.outRowFormat = this.rowFormat();

        }
        this.state = 1664;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,203,this._ctx);
        if(la_===1) {
            this.state = 1662;
            this.match(SqlBaseParser.RECORDREADER);
            this.state = 1663;
            localctx.recordReader = this.match(SqlBaseParser.STRING);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SelectClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_selectClause;
    this._hint = null; // HintContext
    this.hints = []; // of HintContexts
    return this;
}

SelectClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectClauseContext.prototype.constructor = SelectClauseContext;

SelectClauseContext.prototype.SELECT = function() {
    return this.getToken(SqlBaseParser.SELECT, 0);
};

SelectClauseContext.prototype.namedExpressionSeq = function() {
    return this.getTypedRuleContext(NamedExpressionSeqContext,0);
};

SelectClauseContext.prototype.setQuantifier = function() {
    return this.getTypedRuleContext(SetQuantifierContext,0);
};

SelectClauseContext.prototype.hint = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HintContext);
    } else {
        return this.getTypedRuleContext(HintContext,i);
    }
};




SqlBaseParser.SelectClauseContext = SelectClauseContext;

SqlBaseParser.prototype.selectClause = function() {

    var localctx = new SelectClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, SqlBaseParser.RULE_selectClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1666;
        this.match(SqlBaseParser.SELECT);
        this.state = 1670;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,204,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1667;
                localctx._hint = this.hint();
                localctx.hints.push(localctx._hint);
            }
            this.state = 1672;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,204,this._ctx);
        }

        this.state = 1674;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,205,this._ctx);
        if(la_===1) {
            this.state = 1673;
            this.setQuantifier();

        }
        this.state = 1676;
        this.namedExpressionSeq();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SetClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_setClause;
    return this;
}

SetClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetClauseContext.prototype.constructor = SetClauseContext;

SetClauseContext.prototype.SET = function() {
    return this.getToken(SqlBaseParser.SET, 0);
};

SetClauseContext.prototype.assign = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignContext);
    } else {
        return this.getTypedRuleContext(AssignContext,i);
    }
};




SqlBaseParser.SetClauseContext = SetClauseContext;

SqlBaseParser.prototype.setClause = function() {

    var localctx = new SetClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, SqlBaseParser.RULE_setClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1678;
        this.match(SqlBaseParser.SET);
        this.state = 1679;
        this.assign();
        this.state = 1684;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__2) {
            this.state = 1680;
            this.match(SqlBaseParser.T__2);
            this.state = 1681;
            this.assign();
            this.state = 1686;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_assign;
    this.key = null; // MultipartIdentifierContext
    this.value = null; // ExpressionContext
    return this;
}

AssignContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignContext.prototype.constructor = AssignContext;

AssignContext.prototype.EQ = function() {
    return this.getToken(SqlBaseParser.EQ, 0);
};

AssignContext.prototype.multipartIdentifier = function() {
    return this.getTypedRuleContext(MultipartIdentifierContext,0);
};

AssignContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};




SqlBaseParser.AssignContext = AssignContext;

SqlBaseParser.prototype.assign = function() {

    var localctx = new AssignContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, SqlBaseParser.RULE_assign);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1687;
        localctx.key = this.multipartIdentifier();
        this.state = 1688;
        this.match(SqlBaseParser.EQ);
        this.state = 1689;
        localctx.value = this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WhereClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_whereClause;
    return this;
}

WhereClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhereClauseContext.prototype.constructor = WhereClauseContext;

WhereClauseContext.prototype.WHERE = function() {
    return this.getToken(SqlBaseParser.WHERE, 0);
};

WhereClauseContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};




SqlBaseParser.WhereClauseContext = WhereClauseContext;

SqlBaseParser.prototype.whereClause = function() {

    var localctx = new WhereClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, SqlBaseParser.RULE_whereClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1691;
        this.match(SqlBaseParser.WHERE);
        this.state = 1692;
        this.booleanExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HavingClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_havingClause;
    return this;
}

HavingClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HavingClauseContext.prototype.constructor = HavingClauseContext;

HavingClauseContext.prototype.HAVING = function() {
    return this.getToken(SqlBaseParser.HAVING, 0);
};

HavingClauseContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};




SqlBaseParser.HavingClauseContext = HavingClauseContext;

SqlBaseParser.prototype.havingClause = function() {

    var localctx = new HavingClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, SqlBaseParser.RULE_havingClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1694;
        this.match(SqlBaseParser.HAVING);
        this.state = 1695;
        this.booleanExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_hint;
    this._hintStatement = null; // HintStatementContext
    this.hintStatements = []; // of HintStatementContexts
    return this;
}

HintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HintContext.prototype.constructor = HintContext;

HintContext.prototype.hintStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HintStatementContext);
    } else {
        return this.getTypedRuleContext(HintStatementContext,i);
    }
};




SqlBaseParser.HintContext = HintContext;

SqlBaseParser.prototype.hint = function() {

    var localctx = new HintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, SqlBaseParser.RULE_hint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1697;
        this.match(SqlBaseParser.T__4);
        this.state = 1698;
        localctx._hintStatement = this.hintStatement();
        localctx.hintStatements.push(localctx._hintStatement);
        this.state = 1705;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,208,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1700;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,207,this._ctx);
                if(la_===1) {
                    this.state = 1699;
                    this.match(SqlBaseParser.T__2);

                }
                this.state = 1702;
                localctx._hintStatement = this.hintStatement();
                localctx.hintStatements.push(localctx._hintStatement);
            }
            this.state = 1707;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,208,this._ctx);
        }

        this.state = 1708;
        this.match(SqlBaseParser.T__5);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HintStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_hintStatement;
    this.hintName = null; // IdentifierContext
    this._primaryExpression = null; // PrimaryExpressionContext
    this.parameters = []; // of PrimaryExpressionContexts
    return this;
}

HintStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HintStatementContext.prototype.constructor = HintStatementContext;

HintStatementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

HintStatementContext.prototype.primaryExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PrimaryExpressionContext);
    } else {
        return this.getTypedRuleContext(PrimaryExpressionContext,i);
    }
};




SqlBaseParser.HintStatementContext = HintStatementContext;

SqlBaseParser.prototype.hintStatement = function() {

    var localctx = new HintStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, SqlBaseParser.RULE_hintStatement);
    var _la = 0; // Token type
    try {
        this.state = 1723;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,210,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1710;
            localctx.hintName = this.identifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1711;
            localctx.hintName = this.identifier();
            this.state = 1712;
            this.match(SqlBaseParser.T__0);
            this.state = 1713;
            localctx._primaryExpression = this.primaryExpression(0);
            localctx.parameters.push(localctx._primaryExpression);
            this.state = 1718;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__2) {
                this.state = 1714;
                this.match(SqlBaseParser.T__2);
                this.state = 1715;
                localctx._primaryExpression = this.primaryExpression(0);
                localctx.parameters.push(localctx._primaryExpression);
                this.state = 1720;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1721;
            this.match(SqlBaseParser.T__1);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FromClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_fromClause;
    return this;
}

FromClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FromClauseContext.prototype.constructor = FromClauseContext;

FromClauseContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

FromClauseContext.prototype.relation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RelationContext);
    } else {
        return this.getTypedRuleContext(RelationContext,i);
    }
};

FromClauseContext.prototype.lateralView = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LateralViewContext);
    } else {
        return this.getTypedRuleContext(LateralViewContext,i);
    }
};

FromClauseContext.prototype.pivotClause = function() {
    return this.getTypedRuleContext(PivotClauseContext,0);
};




SqlBaseParser.FromClauseContext = FromClauseContext;

SqlBaseParser.prototype.fromClause = function() {

    var localctx = new FromClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, SqlBaseParser.RULE_fromClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1725;
        this.match(SqlBaseParser.FROM);
        this.state = 1726;
        this.relation();
        this.state = 1731;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,211,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1727;
                this.match(SqlBaseParser.T__2);
                this.state = 1728;
                this.relation();
            }
            this.state = 1733;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,211,this._ctx);
        }

        this.state = 1737;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,212,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1734;
                this.lateralView();
            }
            this.state = 1739;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,212,this._ctx);
        }

        this.state = 1741;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,213,this._ctx);
        if(la_===1) {
            this.state = 1740;
            this.pivotClause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AggregationClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_aggregationClause;
    this._expression = null; // ExpressionContext
    this.groupingExpressions = []; // of ExpressionContexts
    this.kind = null; // Token
    return this;
}

AggregationClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AggregationClauseContext.prototype.constructor = AggregationClauseContext;

AggregationClauseContext.prototype.GROUP = function() {
    return this.getToken(SqlBaseParser.GROUP, 0);
};

AggregationClauseContext.prototype.BY = function() {
    return this.getToken(SqlBaseParser.BY, 0);
};

AggregationClauseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

AggregationClauseContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

AggregationClauseContext.prototype.SETS = function() {
    return this.getToken(SqlBaseParser.SETS, 0);
};

AggregationClauseContext.prototype.groupingSet = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GroupingSetContext);
    } else {
        return this.getTypedRuleContext(GroupingSetContext,i);
    }
};

AggregationClauseContext.prototype.ROLLUP = function() {
    return this.getToken(SqlBaseParser.ROLLUP, 0);
};

AggregationClauseContext.prototype.CUBE = function() {
    return this.getToken(SqlBaseParser.CUBE, 0);
};

AggregationClauseContext.prototype.GROUPING = function() {
    return this.getToken(SqlBaseParser.GROUPING, 0);
};




SqlBaseParser.AggregationClauseContext = AggregationClauseContext;

SqlBaseParser.prototype.aggregationClause = function() {

    var localctx = new AggregationClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, SqlBaseParser.RULE_aggregationClause);
    var _la = 0; // Token type
    try {
        this.state = 1787;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,218,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1743;
            this.match(SqlBaseParser.GROUP);
            this.state = 1744;
            this.match(SqlBaseParser.BY);
            this.state = 1745;
            localctx._expression = this.expression();
            localctx.groupingExpressions.push(localctx._expression);
            this.state = 1750;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,214,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1746;
                    this.match(SqlBaseParser.T__2);
                    this.state = 1747;
                    localctx._expression = this.expression();
                    localctx.groupingExpressions.push(localctx._expression);
                }
                this.state = 1752;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,214,this._ctx);
            }

            this.state = 1770;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,216,this._ctx);
            if(la_===1) {
                this.state = 1753;
                this.match(SqlBaseParser.WITH);
                this.state = 1754;
                localctx.kind = this.match(SqlBaseParser.ROLLUP);

            } else if(la_===2) {
                this.state = 1755;
                this.match(SqlBaseParser.WITH);
                this.state = 1756;
                localctx.kind = this.match(SqlBaseParser.CUBE);

            } else if(la_===3) {
                this.state = 1757;
                localctx.kind = this.match(SqlBaseParser.GROUPING);
                this.state = 1758;
                this.match(SqlBaseParser.SETS);
                this.state = 1759;
                this.match(SqlBaseParser.T__0);
                this.state = 1760;
                this.groupingSet();
                this.state = 1765;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__2) {
                    this.state = 1761;
                    this.match(SqlBaseParser.T__2);
                    this.state = 1762;
                    this.groupingSet();
                    this.state = 1767;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1768;
                this.match(SqlBaseParser.T__1);

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1772;
            this.match(SqlBaseParser.GROUP);
            this.state = 1773;
            this.match(SqlBaseParser.BY);
            this.state = 1774;
            localctx.kind = this.match(SqlBaseParser.GROUPING);
            this.state = 1775;
            this.match(SqlBaseParser.SETS);
            this.state = 1776;
            this.match(SqlBaseParser.T__0);
            this.state = 1777;
            this.groupingSet();
            this.state = 1782;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__2) {
                this.state = 1778;
                this.match(SqlBaseParser.T__2);
                this.state = 1779;
                this.groupingSet();
                this.state = 1784;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1785;
            this.match(SqlBaseParser.T__1);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GroupingSetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_groupingSet;
    return this;
}

GroupingSetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupingSetContext.prototype.constructor = GroupingSetContext;

GroupingSetContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};




SqlBaseParser.GroupingSetContext = GroupingSetContext;

SqlBaseParser.prototype.groupingSet = function() {

    var localctx = new GroupingSetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, SqlBaseParser.RULE_groupingSet);
    var _la = 0; // Token type
    try {
        this.state = 1802;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,221,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1789;
            this.match(SqlBaseParser.T__0);
            this.state = 1798;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,220,this._ctx);
            if(la_===1) {
                this.state = 1790;
                this.expression();
                this.state = 1795;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__2) {
                    this.state = 1791;
                    this.match(SqlBaseParser.T__2);
                    this.state = 1792;
                    this.expression();
                    this.state = 1797;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }

            }
            this.state = 1800;
            this.match(SqlBaseParser.T__1);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1801;
            this.expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PivotClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_pivotClause;
    this.aggregates = null; // NamedExpressionSeqContext
    this._pivotValue = null; // PivotValueContext
    this.pivotValues = []; // of PivotValueContexts
    return this;
}

PivotClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PivotClauseContext.prototype.constructor = PivotClauseContext;

PivotClauseContext.prototype.PIVOT = function() {
    return this.getToken(SqlBaseParser.PIVOT, 0);
};

PivotClauseContext.prototype.FOR = function() {
    return this.getToken(SqlBaseParser.FOR, 0);
};

PivotClauseContext.prototype.pivotColumn = function() {
    return this.getTypedRuleContext(PivotColumnContext,0);
};

PivotClauseContext.prototype.IN = function() {
    return this.getToken(SqlBaseParser.IN, 0);
};

PivotClauseContext.prototype.namedExpressionSeq = function() {
    return this.getTypedRuleContext(NamedExpressionSeqContext,0);
};

PivotClauseContext.prototype.pivotValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PivotValueContext);
    } else {
        return this.getTypedRuleContext(PivotValueContext,i);
    }
};




SqlBaseParser.PivotClauseContext = PivotClauseContext;

SqlBaseParser.prototype.pivotClause = function() {

    var localctx = new PivotClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, SqlBaseParser.RULE_pivotClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1804;
        this.match(SqlBaseParser.PIVOT);
        this.state = 1805;
        this.match(SqlBaseParser.T__0);
        this.state = 1806;
        localctx.aggregates = this.namedExpressionSeq();
        this.state = 1807;
        this.match(SqlBaseParser.FOR);
        this.state = 1808;
        this.pivotColumn();
        this.state = 1809;
        this.match(SqlBaseParser.IN);
        this.state = 1810;
        this.match(SqlBaseParser.T__0);
        this.state = 1811;
        localctx._pivotValue = this.pivotValue();
        localctx.pivotValues.push(localctx._pivotValue);
        this.state = 1816;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__2) {
            this.state = 1812;
            this.match(SqlBaseParser.T__2);
            this.state = 1813;
            localctx._pivotValue = this.pivotValue();
            localctx.pivotValues.push(localctx._pivotValue);
            this.state = 1818;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1819;
        this.match(SqlBaseParser.T__1);
        this.state = 1820;
        this.match(SqlBaseParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PivotColumnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_pivotColumn;
    this._identifier = null; // IdentifierContext
    this.identifiers = []; // of IdentifierContexts
    return this;
}

PivotColumnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PivotColumnContext.prototype.constructor = PivotColumnContext;

PivotColumnContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};




SqlBaseParser.PivotColumnContext = PivotColumnContext;

SqlBaseParser.prototype.pivotColumn = function() {

    var localctx = new PivotColumnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, SqlBaseParser.RULE_pivotColumn);
    var _la = 0; // Token type
    try {
        this.state = 1834;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,224,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1822;
            localctx._identifier = this.identifier();
            localctx.identifiers.push(localctx._identifier);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1823;
            this.match(SqlBaseParser.T__0);
            this.state = 1824;
            localctx._identifier = this.identifier();
            localctx.identifiers.push(localctx._identifier);
            this.state = 1829;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__2) {
                this.state = 1825;
                this.match(SqlBaseParser.T__2);
                this.state = 1826;
                localctx._identifier = this.identifier();
                localctx.identifiers.push(localctx._identifier);
                this.state = 1831;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1832;
            this.match(SqlBaseParser.T__1);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PivotValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_pivotValue;
    return this;
}

PivotValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PivotValueContext.prototype.constructor = PivotValueContext;

PivotValueContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PivotValueContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

PivotValueContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};




SqlBaseParser.PivotValueContext = PivotValueContext;

SqlBaseParser.prototype.pivotValue = function() {

    var localctx = new PivotValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, SqlBaseParser.RULE_pivotValue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1836;
        this.expression();
        this.state = 1841;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,226,this._ctx);
        if(la_===1) {
            this.state = 1838;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,225,this._ctx);
            if(la_===1) {
                this.state = 1837;
                this.match(SqlBaseParser.AS);

            }
            this.state = 1840;
            this.identifier();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LateralViewContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_lateralView;
    this.tblName = null; // IdentifierContext
    this._identifier = null; // IdentifierContext
    this.colName = []; // of IdentifierContexts
    return this;
}

LateralViewContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LateralViewContext.prototype.constructor = LateralViewContext;

LateralViewContext.prototype.LATERAL = function() {
    return this.getToken(SqlBaseParser.LATERAL, 0);
};

LateralViewContext.prototype.VIEW = function() {
    return this.getToken(SqlBaseParser.VIEW, 0);
};

LateralViewContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

LateralViewContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

LateralViewContext.prototype.OUTER = function() {
    return this.getToken(SqlBaseParser.OUTER, 0);
};

LateralViewContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

LateralViewContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};




SqlBaseParser.LateralViewContext = LateralViewContext;

SqlBaseParser.prototype.lateralView = function() {

    var localctx = new LateralViewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, SqlBaseParser.RULE_lateralView);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1843;
        this.match(SqlBaseParser.LATERAL);
        this.state = 1844;
        this.match(SqlBaseParser.VIEW);
        this.state = 1846;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,227,this._ctx);
        if(la_===1) {
            this.state = 1845;
            this.match(SqlBaseParser.OUTER);

        }
        this.state = 1848;
        this.qualifiedName();
        this.state = 1849;
        this.match(SqlBaseParser.T__0);
        this.state = 1858;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,229,this._ctx);
        if(la_===1) {
            this.state = 1850;
            this.expression();
            this.state = 1855;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__2) {
                this.state = 1851;
                this.match(SqlBaseParser.T__2);
                this.state = 1852;
                this.expression();
                this.state = 1857;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }

        }
        this.state = 1860;
        this.match(SqlBaseParser.T__1);
        this.state = 1861;
        localctx.tblName = this.identifier();
        this.state = 1873;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,232,this._ctx);
        if(la_===1) {
            this.state = 1863;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,230,this._ctx);
            if(la_===1) {
                this.state = 1862;
                this.match(SqlBaseParser.AS);

            }
            this.state = 1865;
            localctx._identifier = this.identifier();
            localctx.colName.push(localctx._identifier);
            this.state = 1870;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,231,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1866;
                    this.match(SqlBaseParser.T__2);
                    this.state = 1867;
                    localctx._identifier = this.identifier();
                    localctx.colName.push(localctx._identifier);
                }
                this.state = 1872;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,231,this._ctx);
            }


        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SetQuantifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_setQuantifier;
    return this;
}

SetQuantifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetQuantifierContext.prototype.constructor = SetQuantifierContext;

SetQuantifierContext.prototype.DISTINCT = function() {
    return this.getToken(SqlBaseParser.DISTINCT, 0);
};

SetQuantifierContext.prototype.ALL = function() {
    return this.getToken(SqlBaseParser.ALL, 0);
};




SqlBaseParser.SetQuantifierContext = SetQuantifierContext;

SqlBaseParser.prototype.setQuantifier = function() {

    var localctx = new SetQuantifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, SqlBaseParser.RULE_setQuantifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1875;
        _la = this._input.LA(1);
        if(!(_la===SqlBaseParser.ALL || _la===SqlBaseParser.DISTINCT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_relation;
    return this;
}

RelationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationContext.prototype.constructor = RelationContext;

RelationContext.prototype.relationPrimary = function() {
    return this.getTypedRuleContext(RelationPrimaryContext,0);
};

RelationContext.prototype.joinRelation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JoinRelationContext);
    } else {
        return this.getTypedRuleContext(JoinRelationContext,i);
    }
};




SqlBaseParser.RelationContext = RelationContext;

SqlBaseParser.prototype.relation = function() {

    var localctx = new RelationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, SqlBaseParser.RULE_relation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1877;
        this.relationPrimary();
        this.state = 1881;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,233,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1878;
                this.joinRelation();
            }
            this.state = 1883;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,233,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function JoinRelationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_joinRelation;
    this.right = null; // RelationPrimaryContext
    return this;
}

JoinRelationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinRelationContext.prototype.constructor = JoinRelationContext;

JoinRelationContext.prototype.JOIN = function() {
    return this.getToken(SqlBaseParser.JOIN, 0);
};

JoinRelationContext.prototype.relationPrimary = function() {
    return this.getTypedRuleContext(RelationPrimaryContext,0);
};

JoinRelationContext.prototype.joinType = function() {
    return this.getTypedRuleContext(JoinTypeContext,0);
};

JoinRelationContext.prototype.joinCriteria = function() {
    return this.getTypedRuleContext(JoinCriteriaContext,0);
};

JoinRelationContext.prototype.NATURAL = function() {
    return this.getToken(SqlBaseParser.NATURAL, 0);
};




SqlBaseParser.JoinRelationContext = JoinRelationContext;

SqlBaseParser.prototype.joinRelation = function() {

    var localctx = new JoinRelationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, SqlBaseParser.RULE_joinRelation);
    try {
        this.state = 1895;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.ANTI:
        case SqlBaseParser.CROSS:
        case SqlBaseParser.FULL:
        case SqlBaseParser.INNER:
        case SqlBaseParser.JOIN:
        case SqlBaseParser.LEFT:
        case SqlBaseParser.RIGHT:
        case SqlBaseParser.SEMI:
            this.enterOuterAlt(localctx, 1);
            this.state = 1884;
            this.joinType();
            this.state = 1885;
            this.match(SqlBaseParser.JOIN);
            this.state = 1886;
            localctx.right = this.relationPrimary();
            this.state = 1888;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,234,this._ctx);
            if(la_===1) {
                this.state = 1887;
                this.joinCriteria();

            }
            break;
        case SqlBaseParser.NATURAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1890;
            this.match(SqlBaseParser.NATURAL);
            this.state = 1891;
            this.joinType();
            this.state = 1892;
            this.match(SqlBaseParser.JOIN);
            this.state = 1893;
            localctx.right = this.relationPrimary();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function JoinTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_joinType;
    return this;
}

JoinTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinTypeContext.prototype.constructor = JoinTypeContext;

JoinTypeContext.prototype.INNER = function() {
    return this.getToken(SqlBaseParser.INNER, 0);
};

JoinTypeContext.prototype.CROSS = function() {
    return this.getToken(SqlBaseParser.CROSS, 0);
};

JoinTypeContext.prototype.LEFT = function() {
    return this.getToken(SqlBaseParser.LEFT, 0);
};

JoinTypeContext.prototype.OUTER = function() {
    return this.getToken(SqlBaseParser.OUTER, 0);
};

JoinTypeContext.prototype.SEMI = function() {
    return this.getToken(SqlBaseParser.SEMI, 0);
};

JoinTypeContext.prototype.RIGHT = function() {
    return this.getToken(SqlBaseParser.RIGHT, 0);
};

JoinTypeContext.prototype.FULL = function() {
    return this.getToken(SqlBaseParser.FULL, 0);
};

JoinTypeContext.prototype.ANTI = function() {
    return this.getToken(SqlBaseParser.ANTI, 0);
};




SqlBaseParser.JoinTypeContext = JoinTypeContext;

SqlBaseParser.prototype.joinType = function() {

    var localctx = new JoinTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, SqlBaseParser.RULE_joinType);
    var _la = 0; // Token type
    try {
        this.state = 1921;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,242,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1898;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.INNER) {
                this.state = 1897;
                this.match(SqlBaseParser.INNER);
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1900;
            this.match(SqlBaseParser.CROSS);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1901;
            this.match(SqlBaseParser.LEFT);
            this.state = 1903;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.OUTER) {
                this.state = 1902;
                this.match(SqlBaseParser.OUTER);
            }

            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1906;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.LEFT) {
                this.state = 1905;
                this.match(SqlBaseParser.LEFT);
            }

            this.state = 1908;
            this.match(SqlBaseParser.SEMI);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1909;
            this.match(SqlBaseParser.RIGHT);
            this.state = 1911;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.OUTER) {
                this.state = 1910;
                this.match(SqlBaseParser.OUTER);
            }

            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1913;
            this.match(SqlBaseParser.FULL);
            this.state = 1915;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.OUTER) {
                this.state = 1914;
                this.match(SqlBaseParser.OUTER);
            }

            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1918;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.LEFT) {
                this.state = 1917;
                this.match(SqlBaseParser.LEFT);
            }

            this.state = 1920;
            this.match(SqlBaseParser.ANTI);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function JoinCriteriaContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_joinCriteria;
    return this;
}

JoinCriteriaContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinCriteriaContext.prototype.constructor = JoinCriteriaContext;

JoinCriteriaContext.prototype.ON = function() {
    return this.getToken(SqlBaseParser.ON, 0);
};

JoinCriteriaContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};

JoinCriteriaContext.prototype.USING = function() {
    return this.getToken(SqlBaseParser.USING, 0);
};

JoinCriteriaContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};




SqlBaseParser.JoinCriteriaContext = JoinCriteriaContext;

SqlBaseParser.prototype.joinCriteria = function() {

    var localctx = new JoinCriteriaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, SqlBaseParser.RULE_joinCriteria);
    try {
        this.state = 1927;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.ON:
            this.enterOuterAlt(localctx, 1);
            this.state = 1923;
            this.match(SqlBaseParser.ON);
            this.state = 1924;
            this.booleanExpression(0);
            break;
        case SqlBaseParser.USING:
            this.enterOuterAlt(localctx, 2);
            this.state = 1925;
            this.match(SqlBaseParser.USING);
            this.state = 1926;
            this.identifierList();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SampleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_sample;
    return this;
}

SampleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SampleContext.prototype.constructor = SampleContext;

SampleContext.prototype.TABLESAMPLE = function() {
    return this.getToken(SqlBaseParser.TABLESAMPLE, 0);
};

SampleContext.prototype.sampleMethod = function() {
    return this.getTypedRuleContext(SampleMethodContext,0);
};




SqlBaseParser.SampleContext = SampleContext;

SqlBaseParser.prototype.sample = function() {

    var localctx = new SampleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, SqlBaseParser.RULE_sample);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1929;
        this.match(SqlBaseParser.TABLESAMPLE);
        this.state = 1930;
        this.match(SqlBaseParser.T__0);
        this.state = 1932;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,244,this._ctx);
        if(la_===1) {
            this.state = 1931;
            this.sampleMethod();

        }
        this.state = 1934;
        this.match(SqlBaseParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SampleMethodContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_sampleMethod;
    return this;
}

SampleMethodContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SampleMethodContext.prototype.constructor = SampleMethodContext;



SampleMethodContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SampleByRowsContext(parser, ctx) {
	SampleMethodContext.call(this, parser);
    SampleMethodContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SampleByRowsContext.prototype = Object.create(SampleMethodContext.prototype);
SampleByRowsContext.prototype.constructor = SampleByRowsContext;

SqlBaseParser.SampleByRowsContext = SampleByRowsContext;

SampleByRowsContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SampleByRowsContext.prototype.ROWS = function() {
    return this.getToken(SqlBaseParser.ROWS, 0);
};

function SampleByPercentileContext(parser, ctx) {
	SampleMethodContext.call(this, parser);
    this.negativeSign = null; // Token;
    this.percentage = null; // Token;
    SampleMethodContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SampleByPercentileContext.prototype = Object.create(SampleMethodContext.prototype);
SampleByPercentileContext.prototype.constructor = SampleByPercentileContext;

SqlBaseParser.SampleByPercentileContext = SampleByPercentileContext;

SampleByPercentileContext.prototype.PERCENTLIT = function() {
    return this.getToken(SqlBaseParser.PERCENTLIT, 0);
};

SampleByPercentileContext.prototype.INTEGER_VALUE = function() {
    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
};

SampleByPercentileContext.prototype.DECIMAL_VALUE = function() {
    return this.getToken(SqlBaseParser.DECIMAL_VALUE, 0);
};

SampleByPercentileContext.prototype.MINUS = function() {
    return this.getToken(SqlBaseParser.MINUS, 0);
};

function SampleByBucketContext(parser, ctx) {
	SampleMethodContext.call(this, parser);
    this.sampleType = null; // Token;
    this.numerator = null; // Token;
    this.denominator = null; // Token;
    SampleMethodContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SampleByBucketContext.prototype = Object.create(SampleMethodContext.prototype);
SampleByBucketContext.prototype.constructor = SampleByBucketContext;

SqlBaseParser.SampleByBucketContext = SampleByBucketContext;

SampleByBucketContext.prototype.OUT = function() {
    return this.getToken(SqlBaseParser.OUT, 0);
};

SampleByBucketContext.prototype.OF = function() {
    return this.getToken(SqlBaseParser.OF, 0);
};

SampleByBucketContext.prototype.BUCKET = function() {
    return this.getToken(SqlBaseParser.BUCKET, 0);
};

SampleByBucketContext.prototype.INTEGER_VALUE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.INTEGER_VALUE);
    } else {
        return this.getToken(SqlBaseParser.INTEGER_VALUE, i);
    }
};


SampleByBucketContext.prototype.ON = function() {
    return this.getToken(SqlBaseParser.ON, 0);
};

SampleByBucketContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

SampleByBucketContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

function SampleByBytesContext(parser, ctx) {
	SampleMethodContext.call(this, parser);
    this.bytes = null; // ExpressionContext;
    SampleMethodContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SampleByBytesContext.prototype = Object.create(SampleMethodContext.prototype);
SampleByBytesContext.prototype.constructor = SampleByBytesContext;

SqlBaseParser.SampleByBytesContext = SampleByBytesContext;

SampleByBytesContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};


SqlBaseParser.SampleMethodContext = SampleMethodContext;

SqlBaseParser.prototype.sampleMethod = function() {

    var localctx = new SampleMethodContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, SqlBaseParser.RULE_sampleMethod);
    var _la = 0; // Token type
    try {
        this.state = 1960;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,248,this._ctx);
        switch(la_) {
        case 1:
            localctx = new SampleByPercentileContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1937;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.MINUS) {
                this.state = 1936;
                localctx.negativeSign = this.match(SqlBaseParser.MINUS);
            }

            this.state = 1939;
            localctx.percentage = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.INTEGER_VALUE || _la===SqlBaseParser.DECIMAL_VALUE)) {
                localctx.percentage = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1940;
            this.match(SqlBaseParser.PERCENTLIT);
            break;

        case 2:
            localctx = new SampleByRowsContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1941;
            this.expression();
            this.state = 1942;
            this.match(SqlBaseParser.ROWS);
            break;

        case 3:
            localctx = new SampleByBucketContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1944;
            localctx.sampleType = this.match(SqlBaseParser.BUCKET);
            this.state = 1945;
            localctx.numerator = this.match(SqlBaseParser.INTEGER_VALUE);
            this.state = 1946;
            this.match(SqlBaseParser.OUT);
            this.state = 1947;
            this.match(SqlBaseParser.OF);
            this.state = 1948;
            localctx.denominator = this.match(SqlBaseParser.INTEGER_VALUE);
            this.state = 1957;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.ON) {
                this.state = 1949;
                this.match(SqlBaseParser.ON);
                this.state = 1955;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,246,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1950;
                    this.identifier();
                    break;

                case 2:
                    this.state = 1951;
                    this.qualifiedName();
                    this.state = 1952;
                    this.match(SqlBaseParser.T__0);
                    this.state = 1953;
                    this.match(SqlBaseParser.T__1);
                    break;

                }
            }

            break;

        case 4:
            localctx = new SampleByBytesContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1959;
            localctx.bytes = this.expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_identifierList;
    return this;
}

IdentifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierListContext.prototype.constructor = IdentifierListContext;

IdentifierListContext.prototype.identifierSeq = function() {
    return this.getTypedRuleContext(IdentifierSeqContext,0);
};




SqlBaseParser.IdentifierListContext = IdentifierListContext;

SqlBaseParser.prototype.identifierList = function() {

    var localctx = new IdentifierListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, SqlBaseParser.RULE_identifierList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1962;
        this.match(SqlBaseParser.T__0);
        this.state = 1963;
        this.identifierSeq();
        this.state = 1964;
        this.match(SqlBaseParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierSeqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_identifierSeq;
    this._errorCapturingIdentifier = null; // ErrorCapturingIdentifierContext
    this.ident = []; // of ErrorCapturingIdentifierContexts
    return this;
}

IdentifierSeqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierSeqContext.prototype.constructor = IdentifierSeqContext;

IdentifierSeqContext.prototype.errorCapturingIdentifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ErrorCapturingIdentifierContext);
    } else {
        return this.getTypedRuleContext(ErrorCapturingIdentifierContext,i);
    }
};




SqlBaseParser.IdentifierSeqContext = IdentifierSeqContext;

SqlBaseParser.prototype.identifierSeq = function() {

    var localctx = new IdentifierSeqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, SqlBaseParser.RULE_identifierSeq);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1966;
        localctx._errorCapturingIdentifier = this.errorCapturingIdentifier();
        localctx.ident.push(localctx._errorCapturingIdentifier);
        this.state = 1971;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,249,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1967;
                this.match(SqlBaseParser.T__2);
                this.state = 1968;
                localctx._errorCapturingIdentifier = this.errorCapturingIdentifier();
                localctx.ident.push(localctx._errorCapturingIdentifier);
            }
            this.state = 1973;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,249,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OrderedIdentifierListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_orderedIdentifierList;
    return this;
}

OrderedIdentifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderedIdentifierListContext.prototype.constructor = OrderedIdentifierListContext;

OrderedIdentifierListContext.prototype.orderedIdentifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OrderedIdentifierContext);
    } else {
        return this.getTypedRuleContext(OrderedIdentifierContext,i);
    }
};




SqlBaseParser.OrderedIdentifierListContext = OrderedIdentifierListContext;

SqlBaseParser.prototype.orderedIdentifierList = function() {

    var localctx = new OrderedIdentifierListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, SqlBaseParser.RULE_orderedIdentifierList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1974;
        this.match(SqlBaseParser.T__0);
        this.state = 1975;
        this.orderedIdentifier();
        this.state = 1980;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__2) {
            this.state = 1976;
            this.match(SqlBaseParser.T__2);
            this.state = 1977;
            this.orderedIdentifier();
            this.state = 1982;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1983;
        this.match(SqlBaseParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OrderedIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_orderedIdentifier;
    this.ident = null; // ErrorCapturingIdentifierContext
    this.ordering = null; // Token
    return this;
}

OrderedIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderedIdentifierContext.prototype.constructor = OrderedIdentifierContext;

OrderedIdentifierContext.prototype.errorCapturingIdentifier = function() {
    return this.getTypedRuleContext(ErrorCapturingIdentifierContext,0);
};

OrderedIdentifierContext.prototype.ASC = function() {
    return this.getToken(SqlBaseParser.ASC, 0);
};

OrderedIdentifierContext.prototype.DESC = function() {
    return this.getToken(SqlBaseParser.DESC, 0);
};




SqlBaseParser.OrderedIdentifierContext = OrderedIdentifierContext;

SqlBaseParser.prototype.orderedIdentifier = function() {

    var localctx = new OrderedIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, SqlBaseParser.RULE_orderedIdentifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1985;
        localctx.ident = this.errorCapturingIdentifier();
        this.state = 1987;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.ASC || _la===SqlBaseParser.DESC) {
            this.state = 1986;
            localctx.ordering = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.ASC || _la===SqlBaseParser.DESC)) {
                localctx.ordering = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierCommentListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_identifierCommentList;
    return this;
}

IdentifierCommentListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierCommentListContext.prototype.constructor = IdentifierCommentListContext;

IdentifierCommentListContext.prototype.identifierComment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierCommentContext);
    } else {
        return this.getTypedRuleContext(IdentifierCommentContext,i);
    }
};




SqlBaseParser.IdentifierCommentListContext = IdentifierCommentListContext;

SqlBaseParser.prototype.identifierCommentList = function() {

    var localctx = new IdentifierCommentListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, SqlBaseParser.RULE_identifierCommentList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1989;
        this.match(SqlBaseParser.T__0);
        this.state = 1990;
        this.identifierComment();
        this.state = 1995;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__2) {
            this.state = 1991;
            this.match(SqlBaseParser.T__2);
            this.state = 1992;
            this.identifierComment();
            this.state = 1997;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1998;
        this.match(SqlBaseParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierCommentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_identifierComment;
    return this;
}

IdentifierCommentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierCommentContext.prototype.constructor = IdentifierCommentContext;

IdentifierCommentContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

IdentifierCommentContext.prototype.COMMENT = function() {
    return this.getToken(SqlBaseParser.COMMENT, 0);
};

IdentifierCommentContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};




SqlBaseParser.IdentifierCommentContext = IdentifierCommentContext;

SqlBaseParser.prototype.identifierComment = function() {

    var localctx = new IdentifierCommentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, SqlBaseParser.RULE_identifierComment);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2000;
        this.identifier();
        this.state = 2003;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.COMMENT) {
            this.state = 2001;
            this.match(SqlBaseParser.COMMENT);
            this.state = 2002;
            this.match(SqlBaseParser.STRING);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationPrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_relationPrimary;
    return this;
}

RelationPrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationPrimaryContext.prototype.constructor = RelationPrimaryContext;



RelationPrimaryContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function TableValuedFunctionContext(parser, ctx) {
	RelationPrimaryContext.call(this, parser);
    RelationPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableValuedFunctionContext.prototype = Object.create(RelationPrimaryContext.prototype);
TableValuedFunctionContext.prototype.constructor = TableValuedFunctionContext;

SqlBaseParser.TableValuedFunctionContext = TableValuedFunctionContext;

TableValuedFunctionContext.prototype.functionTable = function() {
    return this.getTypedRuleContext(FunctionTableContext,0);
};

function InlineTableDefault2Context(parser, ctx) {
	RelationPrimaryContext.call(this, parser);
    RelationPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InlineTableDefault2Context.prototype = Object.create(RelationPrimaryContext.prototype);
InlineTableDefault2Context.prototype.constructor = InlineTableDefault2Context;

SqlBaseParser.InlineTableDefault2Context = InlineTableDefault2Context;

InlineTableDefault2Context.prototype.inlineTable = function() {
    return this.getTypedRuleContext(InlineTableContext,0);
};

function AliasedRelationContext(parser, ctx) {
	RelationPrimaryContext.call(this, parser);
    RelationPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AliasedRelationContext.prototype = Object.create(RelationPrimaryContext.prototype);
AliasedRelationContext.prototype.constructor = AliasedRelationContext;

SqlBaseParser.AliasedRelationContext = AliasedRelationContext;

AliasedRelationContext.prototype.relation = function() {
    return this.getTypedRuleContext(RelationContext,0);
};

AliasedRelationContext.prototype.tableAlias = function() {
    return this.getTypedRuleContext(TableAliasContext,0);
};

AliasedRelationContext.prototype.sample = function() {
    return this.getTypedRuleContext(SampleContext,0);
};

function AliasedQueryContext(parser, ctx) {
	RelationPrimaryContext.call(this, parser);
    RelationPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AliasedQueryContext.prototype = Object.create(RelationPrimaryContext.prototype);
AliasedQueryContext.prototype.constructor = AliasedQueryContext;

SqlBaseParser.AliasedQueryContext = AliasedQueryContext;

AliasedQueryContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

AliasedQueryContext.prototype.tableAlias = function() {
    return this.getTypedRuleContext(TableAliasContext,0);
};

AliasedQueryContext.prototype.sample = function() {
    return this.getTypedRuleContext(SampleContext,0);
};

function TableNameContext(parser, ctx) {
	RelationPrimaryContext.call(this, parser);
    RelationPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableNameContext.prototype = Object.create(RelationPrimaryContext.prototype);
TableNameContext.prototype.constructor = TableNameContext;

SqlBaseParser.TableNameContext = TableNameContext;

TableNameContext.prototype.multipartIdentifier = function() {
    return this.getTypedRuleContext(MultipartIdentifierContext,0);
};

TableNameContext.prototype.tableAlias = function() {
    return this.getTypedRuleContext(TableAliasContext,0);
};

TableNameContext.prototype.sample = function() {
    return this.getTypedRuleContext(SampleContext,0);
};


SqlBaseParser.RelationPrimaryContext = RelationPrimaryContext;

SqlBaseParser.prototype.relationPrimary = function() {

    var localctx = new RelationPrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, SqlBaseParser.RULE_relationPrimary);
    try {
        this.state = 2029;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,257,this._ctx);
        switch(la_) {
        case 1:
            localctx = new TableNameContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2005;
            this.multipartIdentifier();
            this.state = 2007;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,254,this._ctx);
            if(la_===1) {
                this.state = 2006;
                this.sample();

            }
            this.state = 2009;
            this.tableAlias();
            break;

        case 2:
            localctx = new AliasedQueryContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2011;
            this.match(SqlBaseParser.T__0);
            this.state = 2012;
            this.query();
            this.state = 2013;
            this.match(SqlBaseParser.T__1);
            this.state = 2015;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,255,this._ctx);
            if(la_===1) {
                this.state = 2014;
                this.sample();

            }
            this.state = 2017;
            this.tableAlias();
            break;

        case 3:
            localctx = new AliasedRelationContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2019;
            this.match(SqlBaseParser.T__0);
            this.state = 2020;
            this.relation();
            this.state = 2021;
            this.match(SqlBaseParser.T__1);
            this.state = 2023;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,256,this._ctx);
            if(la_===1) {
                this.state = 2022;
                this.sample();

            }
            this.state = 2025;
            this.tableAlias();
            break;

        case 4:
            localctx = new InlineTableDefault2Context(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 2027;
            this.inlineTable();
            break;

        case 5:
            localctx = new TableValuedFunctionContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 2028;
            this.functionTable();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InlineTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_inlineTable;
    return this;
}

InlineTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InlineTableContext.prototype.constructor = InlineTableContext;

InlineTableContext.prototype.VALUES = function() {
    return this.getToken(SqlBaseParser.VALUES, 0);
};

InlineTableContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

InlineTableContext.prototype.tableAlias = function() {
    return this.getTypedRuleContext(TableAliasContext,0);
};




SqlBaseParser.InlineTableContext = InlineTableContext;

SqlBaseParser.prototype.inlineTable = function() {

    var localctx = new InlineTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, SqlBaseParser.RULE_inlineTable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2031;
        this.match(SqlBaseParser.VALUES);
        this.state = 2032;
        this.expression();
        this.state = 2037;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,258,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2033;
                this.match(SqlBaseParser.T__2);
                this.state = 2034;
                this.expression();
            }
            this.state = 2039;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,258,this._ctx);
        }

        this.state = 2040;
        this.tableAlias();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_functionTable;
    this.funcName = null; // ErrorCapturingIdentifierContext
    return this;
}

FunctionTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionTableContext.prototype.constructor = FunctionTableContext;

FunctionTableContext.prototype.tableAlias = function() {
    return this.getTypedRuleContext(TableAliasContext,0);
};

FunctionTableContext.prototype.errorCapturingIdentifier = function() {
    return this.getTypedRuleContext(ErrorCapturingIdentifierContext,0);
};

FunctionTableContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};




SqlBaseParser.FunctionTableContext = FunctionTableContext;

SqlBaseParser.prototype.functionTable = function() {

    var localctx = new FunctionTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, SqlBaseParser.RULE_functionTable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2042;
        localctx.funcName = this.errorCapturingIdentifier();
        this.state = 2043;
        this.match(SqlBaseParser.T__0);
        this.state = 2052;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,260,this._ctx);
        if(la_===1) {
            this.state = 2044;
            this.expression();
            this.state = 2049;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__2) {
                this.state = 2045;
                this.match(SqlBaseParser.T__2);
                this.state = 2046;
                this.expression();
                this.state = 2051;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }

        }
        this.state = 2054;
        this.match(SqlBaseParser.T__1);
        this.state = 2055;
        this.tableAlias();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TableAliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_tableAlias;
    return this;
}

TableAliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableAliasContext.prototype.constructor = TableAliasContext;

TableAliasContext.prototype.strictIdentifier = function() {
    return this.getTypedRuleContext(StrictIdentifierContext,0);
};

TableAliasContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

TableAliasContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};




SqlBaseParser.TableAliasContext = TableAliasContext;

SqlBaseParser.prototype.tableAlias = function() {

    var localctx = new TableAliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, SqlBaseParser.RULE_tableAlias);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2064;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,263,this._ctx);
        if(la_===1) {
            this.state = 2058;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,261,this._ctx);
            if(la_===1) {
                this.state = 2057;
                this.match(SqlBaseParser.AS);

            }
            this.state = 2060;
            this.strictIdentifier();
            this.state = 2062;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,262,this._ctx);
            if(la_===1) {
                this.state = 2061;
                this.identifierList();

            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RowFormatContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_rowFormat;
    return this;
}

RowFormatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RowFormatContext.prototype.constructor = RowFormatContext;



RowFormatContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function RowFormatSerdeContext(parser, ctx) {
	RowFormatContext.call(this, parser);
    this.name = null; // Token;
    this.props = null; // TablePropertyListContext;
    RowFormatContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RowFormatSerdeContext.prototype = Object.create(RowFormatContext.prototype);
RowFormatSerdeContext.prototype.constructor = RowFormatSerdeContext;

SqlBaseParser.RowFormatSerdeContext = RowFormatSerdeContext;

RowFormatSerdeContext.prototype.ROW = function() {
    return this.getToken(SqlBaseParser.ROW, 0);
};

RowFormatSerdeContext.prototype.FORMAT = function() {
    return this.getToken(SqlBaseParser.FORMAT, 0);
};

RowFormatSerdeContext.prototype.SERDE = function() {
    return this.getToken(SqlBaseParser.SERDE, 0);
};

RowFormatSerdeContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

RowFormatSerdeContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

RowFormatSerdeContext.prototype.SERDEPROPERTIES = function() {
    return this.getToken(SqlBaseParser.SERDEPROPERTIES, 0);
};

RowFormatSerdeContext.prototype.tablePropertyList = function() {
    return this.getTypedRuleContext(TablePropertyListContext,0);
};

function RowFormatDelimitedContext(parser, ctx) {
	RowFormatContext.call(this, parser);
    this.fieldsTerminatedBy = null; // Token;
    this.escapedBy = null; // Token;
    this.collectionItemsTerminatedBy = null; // Token;
    this.keysTerminatedBy = null; // Token;
    this.linesSeparatedBy = null; // Token;
    this.nullDefinedAs = null; // Token;
    RowFormatContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RowFormatDelimitedContext.prototype = Object.create(RowFormatContext.prototype);
RowFormatDelimitedContext.prototype.constructor = RowFormatDelimitedContext;

SqlBaseParser.RowFormatDelimitedContext = RowFormatDelimitedContext;

RowFormatDelimitedContext.prototype.ROW = function() {
    return this.getToken(SqlBaseParser.ROW, 0);
};

RowFormatDelimitedContext.prototype.FORMAT = function() {
    return this.getToken(SqlBaseParser.FORMAT, 0);
};

RowFormatDelimitedContext.prototype.DELIMITED = function() {
    return this.getToken(SqlBaseParser.DELIMITED, 0);
};

RowFormatDelimitedContext.prototype.FIELDS = function() {
    return this.getToken(SqlBaseParser.FIELDS, 0);
};

RowFormatDelimitedContext.prototype.TERMINATED = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.TERMINATED);
    } else {
        return this.getToken(SqlBaseParser.TERMINATED, i);
    }
};


RowFormatDelimitedContext.prototype.BY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.BY);
    } else {
        return this.getToken(SqlBaseParser.BY, i);
    }
};


RowFormatDelimitedContext.prototype.COLLECTION = function() {
    return this.getToken(SqlBaseParser.COLLECTION, 0);
};

RowFormatDelimitedContext.prototype.ITEMS = function() {
    return this.getToken(SqlBaseParser.ITEMS, 0);
};

RowFormatDelimitedContext.prototype.MAP = function() {
    return this.getToken(SqlBaseParser.MAP, 0);
};

RowFormatDelimitedContext.prototype.KEYS = function() {
    return this.getToken(SqlBaseParser.KEYS, 0);
};

RowFormatDelimitedContext.prototype.LINES = function() {
    return this.getToken(SqlBaseParser.LINES, 0);
};

RowFormatDelimitedContext.prototype.NULL = function() {
    return this.getToken(SqlBaseParser.NULL, 0);
};

RowFormatDelimitedContext.prototype.DEFINED = function() {
    return this.getToken(SqlBaseParser.DEFINED, 0);
};

RowFormatDelimitedContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

RowFormatDelimitedContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.STRING);
    } else {
        return this.getToken(SqlBaseParser.STRING, i);
    }
};


RowFormatDelimitedContext.prototype.ESCAPED = function() {
    return this.getToken(SqlBaseParser.ESCAPED, 0);
};


SqlBaseParser.RowFormatContext = RowFormatContext;

SqlBaseParser.prototype.rowFormat = function() {

    var localctx = new RowFormatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, SqlBaseParser.RULE_rowFormat);
    try {
        this.state = 2115;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,271,this._ctx);
        switch(la_) {
        case 1:
            localctx = new RowFormatSerdeContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2066;
            this.match(SqlBaseParser.ROW);
            this.state = 2067;
            this.match(SqlBaseParser.FORMAT);
            this.state = 2068;
            this.match(SqlBaseParser.SERDE);
            this.state = 2069;
            localctx.name = this.match(SqlBaseParser.STRING);
            this.state = 2073;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,264,this._ctx);
            if(la_===1) {
                this.state = 2070;
                this.match(SqlBaseParser.WITH);
                this.state = 2071;
                this.match(SqlBaseParser.SERDEPROPERTIES);
                this.state = 2072;
                localctx.props = this.tablePropertyList();

            }
            break;

        case 2:
            localctx = new RowFormatDelimitedContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2075;
            this.match(SqlBaseParser.ROW);
            this.state = 2076;
            this.match(SqlBaseParser.FORMAT);
            this.state = 2077;
            this.match(SqlBaseParser.DELIMITED);
            this.state = 2087;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,266,this._ctx);
            if(la_===1) {
                this.state = 2078;
                this.match(SqlBaseParser.FIELDS);
                this.state = 2079;
                this.match(SqlBaseParser.TERMINATED);
                this.state = 2080;
                this.match(SqlBaseParser.BY);
                this.state = 2081;
                localctx.fieldsTerminatedBy = this.match(SqlBaseParser.STRING);
                this.state = 2085;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,265,this._ctx);
                if(la_===1) {
                    this.state = 2082;
                    this.match(SqlBaseParser.ESCAPED);
                    this.state = 2083;
                    this.match(SqlBaseParser.BY);
                    this.state = 2084;
                    localctx.escapedBy = this.match(SqlBaseParser.STRING);

                }

            }
            this.state = 2094;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,267,this._ctx);
            if(la_===1) {
                this.state = 2089;
                this.match(SqlBaseParser.COLLECTION);
                this.state = 2090;
                this.match(SqlBaseParser.ITEMS);
                this.state = 2091;
                this.match(SqlBaseParser.TERMINATED);
                this.state = 2092;
                this.match(SqlBaseParser.BY);
                this.state = 2093;
                localctx.collectionItemsTerminatedBy = this.match(SqlBaseParser.STRING);

            }
            this.state = 2101;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,268,this._ctx);
            if(la_===1) {
                this.state = 2096;
                this.match(SqlBaseParser.MAP);
                this.state = 2097;
                this.match(SqlBaseParser.KEYS);
                this.state = 2098;
                this.match(SqlBaseParser.TERMINATED);
                this.state = 2099;
                this.match(SqlBaseParser.BY);
                this.state = 2100;
                localctx.keysTerminatedBy = this.match(SqlBaseParser.STRING);

            }
            this.state = 2107;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,269,this._ctx);
            if(la_===1) {
                this.state = 2103;
                this.match(SqlBaseParser.LINES);
                this.state = 2104;
                this.match(SqlBaseParser.TERMINATED);
                this.state = 2105;
                this.match(SqlBaseParser.BY);
                this.state = 2106;
                localctx.linesSeparatedBy = this.match(SqlBaseParser.STRING);

            }
            this.state = 2113;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,270,this._ctx);
            if(la_===1) {
                this.state = 2109;
                this.match(SqlBaseParser.NULL);
                this.state = 2110;
                this.match(SqlBaseParser.DEFINED);
                this.state = 2111;
                this.match(SqlBaseParser.AS);
                this.state = 2112;
                localctx.nullDefinedAs = this.match(SqlBaseParser.STRING);

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MultipartIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_multipartIdentifier;
    this._errorCapturingIdentifier = null; // ErrorCapturingIdentifierContext
    this.parts = []; // of ErrorCapturingIdentifierContexts
    return this;
}

MultipartIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultipartIdentifierContext.prototype.constructor = MultipartIdentifierContext;

MultipartIdentifierContext.prototype.errorCapturingIdentifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ErrorCapturingIdentifierContext);
    } else {
        return this.getTypedRuleContext(ErrorCapturingIdentifierContext,i);
    }
};




SqlBaseParser.MultipartIdentifierContext = MultipartIdentifierContext;

SqlBaseParser.prototype.multipartIdentifier = function() {

    var localctx = new MultipartIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, SqlBaseParser.RULE_multipartIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2117;
        localctx._errorCapturingIdentifier = this.errorCapturingIdentifier();
        localctx.parts.push(localctx._errorCapturingIdentifier);
        this.state = 2122;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,272,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2118;
                this.match(SqlBaseParser.T__3);
                this.state = 2119;
                localctx._errorCapturingIdentifier = this.errorCapturingIdentifier();
                localctx.parts.push(localctx._errorCapturingIdentifier);
            }
            this.state = 2124;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,272,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TableIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_tableIdentifier;
    this.db = null; // ErrorCapturingIdentifierContext
    this.table = null; // ErrorCapturingIdentifierContext
    return this;
}

TableIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableIdentifierContext.prototype.constructor = TableIdentifierContext;

TableIdentifierContext.prototype.errorCapturingIdentifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ErrorCapturingIdentifierContext);
    } else {
        return this.getTypedRuleContext(ErrorCapturingIdentifierContext,i);
    }
};




SqlBaseParser.TableIdentifierContext = TableIdentifierContext;

SqlBaseParser.prototype.tableIdentifier = function() {

    var localctx = new TableIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, SqlBaseParser.RULE_tableIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2128;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,273,this._ctx);
        if(la_===1) {
            this.state = 2125;
            localctx.db = this.errorCapturingIdentifier();
            this.state = 2126;
            this.match(SqlBaseParser.T__3);

        }
        this.state = 2130;
        localctx.table = this.errorCapturingIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_functionIdentifier;
    this.db = null; // ErrorCapturingIdentifierContext
    this.r_function = null; // ErrorCapturingIdentifierContext
    return this;
}

FunctionIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionIdentifierContext.prototype.constructor = FunctionIdentifierContext;

FunctionIdentifierContext.prototype.errorCapturingIdentifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ErrorCapturingIdentifierContext);
    } else {
        return this.getTypedRuleContext(ErrorCapturingIdentifierContext,i);
    }
};




SqlBaseParser.FunctionIdentifierContext = FunctionIdentifierContext;

SqlBaseParser.prototype.functionIdentifier = function() {

    var localctx = new FunctionIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, SqlBaseParser.RULE_functionIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2135;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,274,this._ctx);
        if(la_===1) {
            this.state = 2132;
            localctx.db = this.errorCapturingIdentifier();
            this.state = 2133;
            this.match(SqlBaseParser.T__3);

        }
        this.state = 2137;
        localctx.r_function = this.errorCapturingIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamedExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_namedExpression;
    this.name = null; // ErrorCapturingIdentifierContext
    return this;
}

NamedExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedExpressionContext.prototype.constructor = NamedExpressionContext;

NamedExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

NamedExpressionContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

NamedExpressionContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

NamedExpressionContext.prototype.errorCapturingIdentifier = function() {
    return this.getTypedRuleContext(ErrorCapturingIdentifierContext,0);
};




SqlBaseParser.NamedExpressionContext = NamedExpressionContext;

SqlBaseParser.prototype.namedExpression = function() {

    var localctx = new NamedExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, SqlBaseParser.RULE_namedExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2139;
        this.expression();
        this.state = 2147;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,277,this._ctx);
        if(la_===1) {
            this.state = 2141;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,275,this._ctx);
            if(la_===1) {
                this.state = 2140;
                this.match(SqlBaseParser.AS);

            }
            this.state = 2145;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,276,this._ctx);
            switch(la_) {
            case 1:
                this.state = 2143;
                localctx.name = this.errorCapturingIdentifier();
                break;

            case 2:
                this.state = 2144;
                this.identifierList();
                break;

            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamedExpressionSeqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_namedExpressionSeq;
    return this;
}

NamedExpressionSeqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedExpressionSeqContext.prototype.constructor = NamedExpressionSeqContext;

NamedExpressionSeqContext.prototype.namedExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedExpressionContext);
    } else {
        return this.getTypedRuleContext(NamedExpressionContext,i);
    }
};




SqlBaseParser.NamedExpressionSeqContext = NamedExpressionSeqContext;

SqlBaseParser.prototype.namedExpressionSeq = function() {

    var localctx = new NamedExpressionSeqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, SqlBaseParser.RULE_namedExpressionSeq);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2149;
        this.namedExpression();
        this.state = 2154;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,278,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2150;
                this.match(SqlBaseParser.T__2);
                this.state = 2151;
                this.namedExpression();
            }
            this.state = 2156;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,278,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TransformListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_transformList;
    this._transform = null; // TransformContext
    this.transforms = []; // of TransformContexts
    return this;
}

TransformListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TransformListContext.prototype.constructor = TransformListContext;

TransformListContext.prototype.transform = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TransformContext);
    } else {
        return this.getTypedRuleContext(TransformContext,i);
    }
};




SqlBaseParser.TransformListContext = TransformListContext;

SqlBaseParser.prototype.transformList = function() {

    var localctx = new TransformListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, SqlBaseParser.RULE_transformList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2157;
        this.match(SqlBaseParser.T__0);
        this.state = 2158;
        localctx._transform = this.transform();
        localctx.transforms.push(localctx._transform);
        this.state = 2163;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__2) {
            this.state = 2159;
            this.match(SqlBaseParser.T__2);
            this.state = 2160;
            localctx._transform = this.transform();
            localctx.transforms.push(localctx._transform);
            this.state = 2165;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2166;
        this.match(SqlBaseParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TransformContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_transform;
    return this;
}

TransformContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TransformContext.prototype.constructor = TransformContext;



TransformContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function IdentityTransformContext(parser, ctx) {
	TransformContext.call(this, parser);
    TransformContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IdentityTransformContext.prototype = Object.create(TransformContext.prototype);
IdentityTransformContext.prototype.constructor = IdentityTransformContext;

SqlBaseParser.IdentityTransformContext = IdentityTransformContext;

IdentityTransformContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

function ApplyTransformContext(parser, ctx) {
	TransformContext.call(this, parser);
    this.transformName = null; // IdentifierContext;
    this._transformArgument = null; // TransformArgumentContext;
    this.argument = []; // of TransformArgumentContexts;
    TransformContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ApplyTransformContext.prototype = Object.create(TransformContext.prototype);
ApplyTransformContext.prototype.constructor = ApplyTransformContext;

SqlBaseParser.ApplyTransformContext = ApplyTransformContext;

ApplyTransformContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ApplyTransformContext.prototype.transformArgument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TransformArgumentContext);
    } else {
        return this.getTypedRuleContext(TransformArgumentContext,i);
    }
};


SqlBaseParser.TransformContext = TransformContext;

SqlBaseParser.prototype.transform = function() {

    var localctx = new TransformContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, SqlBaseParser.RULE_transform);
    var _la = 0; // Token type
    try {
        this.state = 2181;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,281,this._ctx);
        switch(la_) {
        case 1:
            localctx = new IdentityTransformContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2168;
            this.qualifiedName();
            break;

        case 2:
            localctx = new ApplyTransformContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2169;
            localctx.transformName = this.identifier();
            this.state = 2170;
            this.match(SqlBaseParser.T__0);
            this.state = 2171;
            localctx._transformArgument = this.transformArgument();
            localctx.argument.push(localctx._transformArgument);
            this.state = 2176;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__2) {
                this.state = 2172;
                this.match(SqlBaseParser.T__2);
                this.state = 2173;
                localctx._transformArgument = this.transformArgument();
                localctx.argument.push(localctx._transformArgument);
                this.state = 2178;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2179;
            this.match(SqlBaseParser.T__1);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TransformArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_transformArgument;
    return this;
}

TransformArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TransformArgumentContext.prototype.constructor = TransformArgumentContext;

TransformArgumentContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

TransformArgumentContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};




SqlBaseParser.TransformArgumentContext = TransformArgumentContext;

SqlBaseParser.prototype.transformArgument = function() {

    var localctx = new TransformArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, SqlBaseParser.RULE_transformArgument);
    try {
        this.state = 2185;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,282,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2183;
            this.qualifiedName();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2184;
            this.constant();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};




SqlBaseParser.ExpressionContext = ExpressionContext;

SqlBaseParser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, SqlBaseParser.RULE_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2187;
        this.booleanExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BooleanExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_booleanExpression;
    return this;
}

BooleanExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanExpressionContext.prototype.constructor = BooleanExpressionContext;



BooleanExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function LogicalNotContext(parser, ctx) {
	BooleanExpressionContext.call(this, parser);
    BooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalNotContext.prototype = Object.create(BooleanExpressionContext.prototype);
LogicalNotContext.prototype.constructor = LogicalNotContext;

SqlBaseParser.LogicalNotContext = LogicalNotContext;

LogicalNotContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

LogicalNotContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};

function PredicatedContext(parser, ctx) {
	BooleanExpressionContext.call(this, parser);
    BooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PredicatedContext.prototype = Object.create(BooleanExpressionContext.prototype);
PredicatedContext.prototype.constructor = PredicatedContext;

SqlBaseParser.PredicatedContext = PredicatedContext;

PredicatedContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

PredicatedContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};

function ExistsContext(parser, ctx) {
	BooleanExpressionContext.call(this, parser);
    BooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExistsContext.prototype = Object.create(BooleanExpressionContext.prototype);
ExistsContext.prototype.constructor = ExistsContext;

SqlBaseParser.ExistsContext = ExistsContext;

ExistsContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

ExistsContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

function LogicalBinaryContext(parser, ctx) {
	BooleanExpressionContext.call(this, parser);
    this.left = null; // BooleanExpressionContext;
    this.operator = null; // Token;
    this.right = null; // BooleanExpressionContext;
    BooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalBinaryContext.prototype = Object.create(BooleanExpressionContext.prototype);
LogicalBinaryContext.prototype.constructor = LogicalBinaryContext;

SqlBaseParser.LogicalBinaryContext = LogicalBinaryContext;

LogicalBinaryContext.prototype.booleanExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BooleanExpressionContext);
    } else {
        return this.getTypedRuleContext(BooleanExpressionContext,i);
    }
};

LogicalBinaryContext.prototype.AND = function() {
    return this.getToken(SqlBaseParser.AND, 0);
};

LogicalBinaryContext.prototype.OR = function() {
    return this.getToken(SqlBaseParser.OR, 0);
};


SqlBaseParser.prototype.booleanExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new BooleanExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 172;
    this.enterRecursionRule(localctx, 172, SqlBaseParser.RULE_booleanExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2201;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,284,this._ctx);
        switch(la_) {
        case 1:
            localctx = new LogicalNotContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 2190;
            this.match(SqlBaseParser.NOT);
            this.state = 2191;
            this.booleanExpression(5);
            break;

        case 2:
            localctx = new ExistsContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2192;
            this.match(SqlBaseParser.EXISTS);
            this.state = 2193;
            this.match(SqlBaseParser.T__0);
            this.state = 2194;
            this.query();
            this.state = 2195;
            this.match(SqlBaseParser.T__1);
            break;

        case 3:
            localctx = new PredicatedContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2197;
            this.valueExpression(0);
            this.state = 2199;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,283,this._ctx);
            if(la_===1) {
                this.state = 2198;
                this.predicate();

            }
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 2211;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,286,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 2209;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,285,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new LogicalBinaryContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_booleanExpression);
                    this.state = 2203;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 2204;
                    localctx.operator = this.match(SqlBaseParser.AND);
                    this.state = 2205;
                    localctx.right = this.booleanExpression(3);
                    break;

                case 2:
                    localctx = new LogicalBinaryContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_booleanExpression);
                    this.state = 2206;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 2207;
                    localctx.operator = this.match(SqlBaseParser.OR);
                    this.state = 2208;
                    localctx.right = this.booleanExpression(2);
                    break;

                }
            }
            this.state = 2213;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,286,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function PredicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_predicate;
    this.kind = null; // Token
    this.lower = null; // ValueExpressionContext
    this.upper = null; // ValueExpressionContext
    this.pattern = null; // ValueExpressionContext
    this.right = null; // ValueExpressionContext
    return this;
}

PredicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PredicateContext.prototype.constructor = PredicateContext;

PredicateContext.prototype.AND = function() {
    return this.getToken(SqlBaseParser.AND, 0);
};

PredicateContext.prototype.BETWEEN = function() {
    return this.getToken(SqlBaseParser.BETWEEN, 0);
};

PredicateContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

PredicateContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

PredicateContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

PredicateContext.prototype.IN = function() {
    return this.getToken(SqlBaseParser.IN, 0);
};

PredicateContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

PredicateContext.prototype.RLIKE = function() {
    return this.getToken(SqlBaseParser.RLIKE, 0);
};

PredicateContext.prototype.LIKE = function() {
    return this.getToken(SqlBaseParser.LIKE, 0);
};

PredicateContext.prototype.IS = function() {
    return this.getToken(SqlBaseParser.IS, 0);
};

PredicateContext.prototype.NULL = function() {
    return this.getToken(SqlBaseParser.NULL, 0);
};

PredicateContext.prototype.TRUE = function() {
    return this.getToken(SqlBaseParser.TRUE, 0);
};

PredicateContext.prototype.FALSE = function() {
    return this.getToken(SqlBaseParser.FALSE, 0);
};

PredicateContext.prototype.UNKNOWN = function() {
    return this.getToken(SqlBaseParser.UNKNOWN, 0);
};

PredicateContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

PredicateContext.prototype.DISTINCT = function() {
    return this.getToken(SqlBaseParser.DISTINCT, 0);
};




SqlBaseParser.PredicateContext = PredicateContext;

SqlBaseParser.prototype.predicate = function() {

    var localctx = new PredicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, SqlBaseParser.RULE_predicate);
    var _la = 0; // Token type
    try {
        this.state = 2267;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,295,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2215;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 2214;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 2217;
            localctx.kind = this.match(SqlBaseParser.BETWEEN);
            this.state = 2218;
            localctx.lower = this.valueExpression(0);
            this.state = 2219;
            this.match(SqlBaseParser.AND);
            this.state = 2220;
            localctx.upper = this.valueExpression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2223;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 2222;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 2225;
            localctx.kind = this.match(SqlBaseParser.IN);
            this.state = 2226;
            this.match(SqlBaseParser.T__0);
            this.state = 2227;
            this.expression();
            this.state = 2232;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__2) {
                this.state = 2228;
                this.match(SqlBaseParser.T__2);
                this.state = 2229;
                this.expression();
                this.state = 2234;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2235;
            this.match(SqlBaseParser.T__1);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2238;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 2237;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 2240;
            localctx.kind = this.match(SqlBaseParser.IN);
            this.state = 2241;
            this.match(SqlBaseParser.T__0);
            this.state = 2242;
            this.query();
            this.state = 2243;
            this.match(SqlBaseParser.T__1);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2246;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 2245;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 2248;
            localctx.kind = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.LIKE || _la===SqlBaseParser.RLIKE)) {
                localctx.kind = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2249;
            localctx.pattern = this.valueExpression(0);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2250;
            this.match(SqlBaseParser.IS);
            this.state = 2252;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 2251;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 2254;
            localctx.kind = this.match(SqlBaseParser.NULL);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2255;
            this.match(SqlBaseParser.IS);
            this.state = 2257;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 2256;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 2259;
            localctx.kind = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.FALSE || _la===SqlBaseParser.TRUE || _la===SqlBaseParser.UNKNOWN)) {
                localctx.kind = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2260;
            this.match(SqlBaseParser.IS);
            this.state = 2262;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 2261;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 2264;
            localctx.kind = this.match(SqlBaseParser.DISTINCT);
            this.state = 2265;
            this.match(SqlBaseParser.FROM);
            this.state = 2266;
            localctx.right = this.valueExpression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ValueExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_valueExpression;
    return this;
}

ValueExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueExpressionContext.prototype.constructor = ValueExpressionContext;



ValueExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ValueExpressionDefaultContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ValueExpressionDefaultContext.prototype = Object.create(ValueExpressionContext.prototype);
ValueExpressionDefaultContext.prototype.constructor = ValueExpressionDefaultContext;

SqlBaseParser.ValueExpressionDefaultContext = ValueExpressionDefaultContext;

ValueExpressionDefaultContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

function ComparisonContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    this.left = null; // ValueExpressionContext;
    this.right = null; // ValueExpressionContext;
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ComparisonContext.prototype = Object.create(ValueExpressionContext.prototype);
ComparisonContext.prototype.constructor = ComparisonContext;

SqlBaseParser.ComparisonContext = ComparisonContext;

ComparisonContext.prototype.comparisonOperator = function() {
    return this.getTypedRuleContext(ComparisonOperatorContext,0);
};

ComparisonContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

function ArithmeticBinaryContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    this.left = null; // ValueExpressionContext;
    this.operator = null; // Token;
    this.right = null; // ValueExpressionContext;
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArithmeticBinaryContext.prototype = Object.create(ValueExpressionContext.prototype);
ArithmeticBinaryContext.prototype.constructor = ArithmeticBinaryContext;

SqlBaseParser.ArithmeticBinaryContext = ArithmeticBinaryContext;

ArithmeticBinaryContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

ArithmeticBinaryContext.prototype.ASTERISK = function() {
    return this.getToken(SqlBaseParser.ASTERISK, 0);
};

ArithmeticBinaryContext.prototype.SLASH = function() {
    return this.getToken(SqlBaseParser.SLASH, 0);
};

ArithmeticBinaryContext.prototype.PERCENT = function() {
    return this.getToken(SqlBaseParser.PERCENT, 0);
};

ArithmeticBinaryContext.prototype.DIV = function() {
    return this.getToken(SqlBaseParser.DIV, 0);
};

ArithmeticBinaryContext.prototype.PLUS = function() {
    return this.getToken(SqlBaseParser.PLUS, 0);
};

ArithmeticBinaryContext.prototype.MINUS = function() {
    return this.getToken(SqlBaseParser.MINUS, 0);
};

ArithmeticBinaryContext.prototype.CONCAT_PIPE = function() {
    return this.getToken(SqlBaseParser.CONCAT_PIPE, 0);
};

ArithmeticBinaryContext.prototype.AMPERSAND = function() {
    return this.getToken(SqlBaseParser.AMPERSAND, 0);
};

ArithmeticBinaryContext.prototype.HAT = function() {
    return this.getToken(SqlBaseParser.HAT, 0);
};

ArithmeticBinaryContext.prototype.PIPE = function() {
    return this.getToken(SqlBaseParser.PIPE, 0);
};

function ArithmeticUnaryContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    this.operator = null; // Token;
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArithmeticUnaryContext.prototype = Object.create(ValueExpressionContext.prototype);
ArithmeticUnaryContext.prototype.constructor = ArithmeticUnaryContext;

SqlBaseParser.ArithmeticUnaryContext = ArithmeticUnaryContext;

ArithmeticUnaryContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

ArithmeticUnaryContext.prototype.MINUS = function() {
    return this.getToken(SqlBaseParser.MINUS, 0);
};

ArithmeticUnaryContext.prototype.PLUS = function() {
    return this.getToken(SqlBaseParser.PLUS, 0);
};

ArithmeticUnaryContext.prototype.TILDE = function() {
    return this.getToken(SqlBaseParser.TILDE, 0);
};


SqlBaseParser.prototype.valueExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ValueExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 176;
    this.enterRecursionRule(localctx, 176, SqlBaseParser.RULE_valueExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2273;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,296,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ValueExpressionDefaultContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 2270;
            this.primaryExpression(0);
            break;

        case 2:
            localctx = new ArithmeticUnaryContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2271;
            localctx.operator = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 280)) & ~0x1f) == 0 && ((1 << (_la - 280)) & ((1 << (SqlBaseParser.PLUS - 280)) | (1 << (SqlBaseParser.MINUS - 280)) | (1 << (SqlBaseParser.TILDE - 280)))) !== 0))) {
                localctx.operator = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2272;
            this.valueExpression(7);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 2296;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,298,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 2294;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,297,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
                    this.state = 2275;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 2276;
                    localctx.operator = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 282)) & ~0x1f) == 0 && ((1 << (_la - 282)) & ((1 << (SqlBaseParser.ASTERISK - 282)) | (1 << (SqlBaseParser.SLASH - 282)) | (1 << (SqlBaseParser.PERCENT - 282)) | (1 << (SqlBaseParser.DIV - 282)))) !== 0))) {
                        localctx.operator = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2277;
                    localctx.right = this.valueExpression(7);
                    break;

                case 2:
                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
                    this.state = 2278;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 2279;
                    localctx.operator = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 280)) & ~0x1f) == 0 && ((1 << (_la - 280)) & ((1 << (SqlBaseParser.PLUS - 280)) | (1 << (SqlBaseParser.MINUS - 280)) | (1 << (SqlBaseParser.CONCAT_PIPE - 280)))) !== 0))) {
                        localctx.operator = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2280;
                    localctx.right = this.valueExpression(6);
                    break;

                case 3:
                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
                    this.state = 2281;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 2282;
                    localctx.operator = this.match(SqlBaseParser.AMPERSAND);
                    this.state = 2283;
                    localctx.right = this.valueExpression(5);
                    break;

                case 4:
                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
                    this.state = 2284;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 2285;
                    localctx.operator = this.match(SqlBaseParser.HAT);
                    this.state = 2286;
                    localctx.right = this.valueExpression(4);
                    break;

                case 5:
                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
                    this.state = 2287;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 2288;
                    localctx.operator = this.match(SqlBaseParser.PIPE);
                    this.state = 2289;
                    localctx.right = this.valueExpression(3);
                    break;

                case 6:
                    localctx = new ComparisonContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
                    this.state = 2290;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 2291;
                    this.comparisonOperator();
                    this.state = 2292;
                    localctx.right = this.valueExpression(2);
                    break;

                }
            }
            this.state = 2298;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,298,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function PrimaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_primaryExpression;
    return this;
}

PrimaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryExpressionContext.prototype.constructor = PrimaryExpressionContext;



PrimaryExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function StructContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this._namedExpression = null; // NamedExpressionContext;
    this.argument = []; // of NamedExpressionContexts;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StructContext.prototype = Object.create(PrimaryExpressionContext.prototype);
StructContext.prototype.constructor = StructContext;

SqlBaseParser.StructContext = StructContext;

StructContext.prototype.STRUCT = function() {
    return this.getToken(SqlBaseParser.STRUCT, 0);
};

StructContext.prototype.namedExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedExpressionContext);
    } else {
        return this.getTypedRuleContext(NamedExpressionContext,i);
    }
};

function DereferenceContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.base = null; // PrimaryExpressionContext;
    this.fieldName = null; // IdentifierContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DereferenceContext.prototype = Object.create(PrimaryExpressionContext.prototype);
DereferenceContext.prototype.constructor = DereferenceContext;

SqlBaseParser.DereferenceContext = DereferenceContext;

DereferenceContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

DereferenceContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

function SimpleCaseContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.value = null; // ExpressionContext;
    this.elseExpression = null; // ExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleCaseContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SimpleCaseContext.prototype.constructor = SimpleCaseContext;

SqlBaseParser.SimpleCaseContext = SimpleCaseContext;

SimpleCaseContext.prototype.CASE = function() {
    return this.getToken(SqlBaseParser.CASE, 0);
};

SimpleCaseContext.prototype.END = function() {
    return this.getToken(SqlBaseParser.END, 0);
};

SimpleCaseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SimpleCaseContext.prototype.whenClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WhenClauseContext);
    } else {
        return this.getTypedRuleContext(WhenClauseContext,i);
    }
};

SimpleCaseContext.prototype.ELSE = function() {
    return this.getToken(SqlBaseParser.ELSE, 0);
};

function ColumnReferenceContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnReferenceContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ColumnReferenceContext.prototype.constructor = ColumnReferenceContext;

SqlBaseParser.ColumnReferenceContext = ColumnReferenceContext;

ColumnReferenceContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

function RowConstructorContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RowConstructorContext.prototype = Object.create(PrimaryExpressionContext.prototype);
RowConstructorContext.prototype.constructor = RowConstructorContext;

SqlBaseParser.RowConstructorContext = RowConstructorContext;

RowConstructorContext.prototype.namedExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedExpressionContext);
    } else {
        return this.getTypedRuleContext(NamedExpressionContext,i);
    }
};

function LastContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LastContext.prototype = Object.create(PrimaryExpressionContext.prototype);
LastContext.prototype.constructor = LastContext;

SqlBaseParser.LastContext = LastContext;

LastContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

LastContext.prototype.LAST = function() {
    return this.getToken(SqlBaseParser.LAST, 0);
};

LastContext.prototype.LAST_VALUE = function() {
    return this.getToken(SqlBaseParser.LAST_VALUE, 0);
};

LastContext.prototype.NULLS = function() {
    return this.getToken(SqlBaseParser.NULLS, 0);
};

LastContext.prototype.IGNORE = function() {
    return this.getToken(SqlBaseParser.IGNORE, 0);
};

LastContext.prototype.RESPECT = function() {
    return this.getToken(SqlBaseParser.RESPECT, 0);
};

function StarContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StarContext.prototype = Object.create(PrimaryExpressionContext.prototype);
StarContext.prototype.constructor = StarContext;

SqlBaseParser.StarContext = StarContext;

StarContext.prototype.ASTERISK = function() {
    return this.getToken(SqlBaseParser.ASTERISK, 0);
};

StarContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

function OverlayContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.input = null; // ValueExpressionContext;
    this.replace = null; // ValueExpressionContext;
    this.position = null; // ValueExpressionContext;
    this.length = null; // ValueExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OverlayContext.prototype = Object.create(PrimaryExpressionContext.prototype);
OverlayContext.prototype.constructor = OverlayContext;

SqlBaseParser.OverlayContext = OverlayContext;

OverlayContext.prototype.OVERLAY = function() {
    return this.getToken(SqlBaseParser.OVERLAY, 0);
};

OverlayContext.prototype.PLACING = function() {
    return this.getToken(SqlBaseParser.PLACING, 0);
};

OverlayContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

OverlayContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

OverlayContext.prototype.FOR = function() {
    return this.getToken(SqlBaseParser.FOR, 0);
};

function SubscriptContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.value = null; // PrimaryExpressionContext;
    this.index = null; // ValueExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubscriptContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SubscriptContext.prototype.constructor = SubscriptContext;

SqlBaseParser.SubscriptContext = SubscriptContext;

SubscriptContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

SubscriptContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

function SubqueryExpressionContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubqueryExpressionContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SubqueryExpressionContext.prototype.constructor = SubqueryExpressionContext;

SqlBaseParser.SubqueryExpressionContext = SubqueryExpressionContext;

SubqueryExpressionContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

function SubstringContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.str = null; // ValueExpressionContext;
    this.pos = null; // ValueExpressionContext;
    this.len = null; // ValueExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubstringContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SubstringContext.prototype.constructor = SubstringContext;

SqlBaseParser.SubstringContext = SubstringContext;

SubstringContext.prototype.SUBSTR = function() {
    return this.getToken(SqlBaseParser.SUBSTR, 0);
};

SubstringContext.prototype.SUBSTRING = function() {
    return this.getToken(SqlBaseParser.SUBSTRING, 0);
};

SubstringContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

SubstringContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

SubstringContext.prototype.FOR = function() {
    return this.getToken(SqlBaseParser.FOR, 0);
};

function CurrentDatetimeContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.name = null; // Token;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CurrentDatetimeContext.prototype = Object.create(PrimaryExpressionContext.prototype);
CurrentDatetimeContext.prototype.constructor = CurrentDatetimeContext;

SqlBaseParser.CurrentDatetimeContext = CurrentDatetimeContext;

CurrentDatetimeContext.prototype.CURRENT_DATE = function() {
    return this.getToken(SqlBaseParser.CURRENT_DATE, 0);
};

CurrentDatetimeContext.prototype.CURRENT_TIMESTAMP = function() {
    return this.getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0);
};

function CastContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CastContext.prototype = Object.create(PrimaryExpressionContext.prototype);
CastContext.prototype.constructor = CastContext;

SqlBaseParser.CastContext = CastContext;

CastContext.prototype.CAST = function() {
    return this.getToken(SqlBaseParser.CAST, 0);
};

CastContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

CastContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

CastContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

function ConstantDefaultContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConstantDefaultContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ConstantDefaultContext.prototype.constructor = ConstantDefaultContext;

SqlBaseParser.ConstantDefaultContext = ConstantDefaultContext;

ConstantDefaultContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

function LambdaContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LambdaContext.prototype = Object.create(PrimaryExpressionContext.prototype);
LambdaContext.prototype.constructor = LambdaContext;

SqlBaseParser.LambdaContext = LambdaContext;

LambdaContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.IDENTIFIER);
    } else {
        return this.getToken(SqlBaseParser.IDENTIFIER, i);
    }
};


LambdaContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

function ParenthesizedExpressionContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParenthesizedExpressionContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ParenthesizedExpressionContext.prototype.constructor = ParenthesizedExpressionContext;

SqlBaseParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;

ParenthesizedExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

function ExtractContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.field = null; // IdentifierContext;
    this.source = null; // ValueExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExtractContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ExtractContext.prototype.constructor = ExtractContext;

SqlBaseParser.ExtractContext = ExtractContext;

ExtractContext.prototype.EXTRACT = function() {
    return this.getToken(SqlBaseParser.EXTRACT, 0);
};

ExtractContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

ExtractContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ExtractContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

function TrimContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.trimOption = null; // Token;
    this.trimStr = null; // ValueExpressionContext;
    this.srcStr = null; // ValueExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TrimContext.prototype = Object.create(PrimaryExpressionContext.prototype);
TrimContext.prototype.constructor = TrimContext;

SqlBaseParser.TrimContext = TrimContext;

TrimContext.prototype.TRIM = function() {
    return this.getToken(SqlBaseParser.TRIM, 0);
};

TrimContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

TrimContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

TrimContext.prototype.BOTH = function() {
    return this.getToken(SqlBaseParser.BOTH, 0);
};

TrimContext.prototype.LEADING = function() {
    return this.getToken(SqlBaseParser.LEADING, 0);
};

TrimContext.prototype.TRAILING = function() {
    return this.getToken(SqlBaseParser.TRAILING, 0);
};

function FunctionCallContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this._expression = null; // ExpressionContext;
    this.argument = []; // of ExpressionContexts;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FunctionCallContext.prototype = Object.create(PrimaryExpressionContext.prototype);
FunctionCallContext.prototype.constructor = FunctionCallContext;

SqlBaseParser.FunctionCallContext = FunctionCallContext;

FunctionCallContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

FunctionCallContext.prototype.OVER = function() {
    return this.getToken(SqlBaseParser.OVER, 0);
};

FunctionCallContext.prototype.windowSpec = function() {
    return this.getTypedRuleContext(WindowSpecContext,0);
};

FunctionCallContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

FunctionCallContext.prototype.setQuantifier = function() {
    return this.getTypedRuleContext(SetQuantifierContext,0);
};

function SearchedCaseContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.elseExpression = null; // ExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SearchedCaseContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SearchedCaseContext.prototype.constructor = SearchedCaseContext;

SqlBaseParser.SearchedCaseContext = SearchedCaseContext;

SearchedCaseContext.prototype.CASE = function() {
    return this.getToken(SqlBaseParser.CASE, 0);
};

SearchedCaseContext.prototype.END = function() {
    return this.getToken(SqlBaseParser.END, 0);
};

SearchedCaseContext.prototype.whenClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WhenClauseContext);
    } else {
        return this.getTypedRuleContext(WhenClauseContext,i);
    }
};

SearchedCaseContext.prototype.ELSE = function() {
    return this.getToken(SqlBaseParser.ELSE, 0);
};

SearchedCaseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

function PositionContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.substr = null; // ValueExpressionContext;
    this.str = null; // ValueExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PositionContext.prototype = Object.create(PrimaryExpressionContext.prototype);
PositionContext.prototype.constructor = PositionContext;

SqlBaseParser.PositionContext = PositionContext;

PositionContext.prototype.POSITION = function() {
    return this.getToken(SqlBaseParser.POSITION, 0);
};

PositionContext.prototype.IN = function() {
    return this.getToken(SqlBaseParser.IN, 0);
};

PositionContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

function FirstContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FirstContext.prototype = Object.create(PrimaryExpressionContext.prototype);
FirstContext.prototype.constructor = FirstContext;

SqlBaseParser.FirstContext = FirstContext;

FirstContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

FirstContext.prototype.FIRST = function() {
    return this.getToken(SqlBaseParser.FIRST, 0);
};

FirstContext.prototype.FIRST_VALUE = function() {
    return this.getToken(SqlBaseParser.FIRST_VALUE, 0);
};

FirstContext.prototype.NULLS = function() {
    return this.getToken(SqlBaseParser.NULLS, 0);
};

FirstContext.prototype.IGNORE = function() {
    return this.getToken(SqlBaseParser.IGNORE, 0);
};

FirstContext.prototype.RESPECT = function() {
    return this.getToken(SqlBaseParser.RESPECT, 0);
};


SqlBaseParser.prototype.primaryExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new PrimaryExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 178;
    this.enterRecursionRule(localctx, 178, SqlBaseParser.RULE_primaryExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2473;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,317,this._ctx);
        switch(la_) {
        case 1:
            localctx = new CurrentDatetimeContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 2300;
            localctx.name = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.CURRENT_DATE || _la===SqlBaseParser.CURRENT_TIMESTAMP)) {
                localctx.name = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 2:
            localctx = new SearchedCaseContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2301;
            this.match(SqlBaseParser.CASE);
            this.state = 2303;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2302;
                this.whenClause();
                this.state = 2305;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===SqlBaseParser.WHEN);
            this.state = 2309;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.ELSE) {
                this.state = 2307;
                this.match(SqlBaseParser.ELSE);
                this.state = 2308;
                localctx.elseExpression = this.expression();
            }

            this.state = 2311;
            this.match(SqlBaseParser.END);
            break;

        case 3:
            localctx = new SimpleCaseContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2313;
            this.match(SqlBaseParser.CASE);
            this.state = 2314;
            localctx.value = this.expression();
            this.state = 2316;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2315;
                this.whenClause();
                this.state = 2318;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===SqlBaseParser.WHEN);
            this.state = 2322;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.ELSE) {
                this.state = 2320;
                this.match(SqlBaseParser.ELSE);
                this.state = 2321;
                localctx.elseExpression = this.expression();
            }

            this.state = 2324;
            this.match(SqlBaseParser.END);
            break;

        case 4:
            localctx = new CastContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2326;
            this.match(SqlBaseParser.CAST);
            this.state = 2327;
            this.match(SqlBaseParser.T__0);
            this.state = 2328;
            this.expression();
            this.state = 2329;
            this.match(SqlBaseParser.AS);
            this.state = 2330;
            this.dataType();
            this.state = 2331;
            this.match(SqlBaseParser.T__1);
            break;

        case 5:
            localctx = new StructContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2333;
            this.match(SqlBaseParser.STRUCT);
            this.state = 2334;
            this.match(SqlBaseParser.T__0);
            this.state = 2343;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,304,this._ctx);
            if(la_===1) {
                this.state = 2335;
                localctx._namedExpression = this.namedExpression();
                localctx.argument.push(localctx._namedExpression);
                this.state = 2340;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__2) {
                    this.state = 2336;
                    this.match(SqlBaseParser.T__2);
                    this.state = 2337;
                    localctx._namedExpression = this.namedExpression();
                    localctx.argument.push(localctx._namedExpression);
                    this.state = 2342;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }

            }
            this.state = 2345;
            this.match(SqlBaseParser.T__1);
            break;

        case 6:
            localctx = new FirstContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2346;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.FIRST || _la===SqlBaseParser.FIRST_VALUE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2347;
            this.match(SqlBaseParser.T__0);
            this.state = 2348;
            this.expression();
            this.state = 2351;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.IGNORE || _la===SqlBaseParser.RESPECT) {
                this.state = 2349;
                _la = this._input.LA(1);
                if(!(_la===SqlBaseParser.IGNORE || _la===SqlBaseParser.RESPECT)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2350;
                this.match(SqlBaseParser.NULLS);
            }

            this.state = 2353;
            this.match(SqlBaseParser.T__1);
            break;

        case 7:
            localctx = new LastContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2355;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.LAST || _la===SqlBaseParser.LAST_VALUE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2356;
            this.match(SqlBaseParser.T__0);
            this.state = 2357;
            this.expression();
            this.state = 2360;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.IGNORE || _la===SqlBaseParser.RESPECT) {
                this.state = 2358;
                _la = this._input.LA(1);
                if(!(_la===SqlBaseParser.IGNORE || _la===SqlBaseParser.RESPECT)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2359;
                this.match(SqlBaseParser.NULLS);
            }

            this.state = 2362;
            this.match(SqlBaseParser.T__1);
            break;

        case 8:
            localctx = new PositionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2364;
            this.match(SqlBaseParser.POSITION);
            this.state = 2365;
            this.match(SqlBaseParser.T__0);
            this.state = 2366;
            localctx.substr = this.valueExpression(0);
            this.state = 2367;
            this.match(SqlBaseParser.IN);
            this.state = 2368;
            localctx.str = this.valueExpression(0);
            this.state = 2369;
            this.match(SqlBaseParser.T__1);
            break;

        case 9:
            localctx = new ConstantDefaultContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2371;
            this.constant();
            break;

        case 10:
            localctx = new StarContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2372;
            this.match(SqlBaseParser.ASTERISK);
            break;

        case 11:
            localctx = new StarContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2373;
            this.qualifiedName();
            this.state = 2374;
            this.match(SqlBaseParser.T__3);
            this.state = 2375;
            this.match(SqlBaseParser.ASTERISK);
            break;

        case 12:
            localctx = new RowConstructorContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2377;
            this.match(SqlBaseParser.T__0);
            this.state = 2378;
            this.namedExpression();
            this.state = 2381;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2379;
                this.match(SqlBaseParser.T__2);
                this.state = 2380;
                this.namedExpression();
                this.state = 2383;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===SqlBaseParser.T__2);
            this.state = 2385;
            this.match(SqlBaseParser.T__1);
            break;

        case 13:
            localctx = new SubqueryExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2387;
            this.match(SqlBaseParser.T__0);
            this.state = 2388;
            this.query();
            this.state = 2389;
            this.match(SqlBaseParser.T__1);
            break;

        case 14:
            localctx = new FunctionCallContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2391;
            this.qualifiedName();
            this.state = 2392;
            this.match(SqlBaseParser.T__0);
            this.state = 2404;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,310,this._ctx);
            if(la_===1) {
                this.state = 2394;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,308,this._ctx);
                if(la_===1) {
                    this.state = 2393;
                    this.setQuantifier();

                }
                this.state = 2396;
                localctx._expression = this.expression();
                localctx.argument.push(localctx._expression);
                this.state = 2401;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__2) {
                    this.state = 2397;
                    this.match(SqlBaseParser.T__2);
                    this.state = 2398;
                    localctx._expression = this.expression();
                    localctx.argument.push(localctx._expression);
                    this.state = 2403;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }

            }
            this.state = 2406;
            this.match(SqlBaseParser.T__1);
            this.state = 2409;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,311,this._ctx);
            if(la_===1) {
                this.state = 2407;
                this.match(SqlBaseParser.OVER);
                this.state = 2408;
                this.windowSpec();

            }
            break;

        case 15:
            localctx = new LambdaContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2411;
            this.match(SqlBaseParser.IDENTIFIER);
            this.state = 2412;
            this.match(SqlBaseParser.T__6);
            this.state = 2413;
            this.expression();
            break;

        case 16:
            localctx = new LambdaContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2414;
            this.match(SqlBaseParser.T__0);
            this.state = 2415;
            this.match(SqlBaseParser.IDENTIFIER);
            this.state = 2418;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2416;
                this.match(SqlBaseParser.T__2);
                this.state = 2417;
                this.match(SqlBaseParser.IDENTIFIER);
                this.state = 2420;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===SqlBaseParser.T__2);
            this.state = 2422;
            this.match(SqlBaseParser.T__1);
            this.state = 2423;
            this.match(SqlBaseParser.T__6);
            this.state = 2424;
            this.expression();
            break;

        case 17:
            localctx = new ColumnReferenceContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2425;
            this.identifier();
            break;

        case 18:
            localctx = new ParenthesizedExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2426;
            this.match(SqlBaseParser.T__0);
            this.state = 2427;
            this.expression();
            this.state = 2428;
            this.match(SqlBaseParser.T__1);
            break;

        case 19:
            localctx = new ExtractContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2430;
            this.match(SqlBaseParser.EXTRACT);
            this.state = 2431;
            this.match(SqlBaseParser.T__0);
            this.state = 2432;
            localctx.field = this.identifier();
            this.state = 2433;
            this.match(SqlBaseParser.FROM);
            this.state = 2434;
            localctx.source = this.valueExpression(0);
            this.state = 2435;
            this.match(SqlBaseParser.T__1);
            break;

        case 20:
            localctx = new SubstringContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2437;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.SUBSTR || _la===SqlBaseParser.SUBSTRING)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2438;
            this.match(SqlBaseParser.T__0);
            this.state = 2439;
            localctx.str = this.valueExpression(0);
            this.state = 2440;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.T__2 || _la===SqlBaseParser.FROM)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2441;
            localctx.pos = this.valueExpression(0);
            this.state = 2444;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.T__2 || _la===SqlBaseParser.FOR) {
                this.state = 2442;
                _la = this._input.LA(1);
                if(!(_la===SqlBaseParser.T__2 || _la===SqlBaseParser.FOR)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2443;
                localctx.len = this.valueExpression(0);
            }

            this.state = 2446;
            this.match(SqlBaseParser.T__1);
            break;

        case 21:
            localctx = new TrimContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2448;
            this.match(SqlBaseParser.TRIM);
            this.state = 2449;
            this.match(SqlBaseParser.T__0);
            this.state = 2451;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,314,this._ctx);
            if(la_===1) {
                this.state = 2450;
                localctx.trimOption = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===SqlBaseParser.BOTH || _la===SqlBaseParser.LEADING || _la===SqlBaseParser.TRAILING)) {
                    localctx.trimOption = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 2454;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,315,this._ctx);
            if(la_===1) {
                this.state = 2453;
                localctx.trimStr = this.valueExpression(0);

            }
            this.state = 2456;
            this.match(SqlBaseParser.FROM);
            this.state = 2457;
            localctx.srcStr = this.valueExpression(0);
            this.state = 2458;
            this.match(SqlBaseParser.T__1);
            break;

        case 22:
            localctx = new OverlayContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2460;
            this.match(SqlBaseParser.OVERLAY);
            this.state = 2461;
            this.match(SqlBaseParser.T__0);
            this.state = 2462;
            localctx.input = this.valueExpression(0);
            this.state = 2463;
            this.match(SqlBaseParser.PLACING);
            this.state = 2464;
            localctx.replace = this.valueExpression(0);
            this.state = 2465;
            this.match(SqlBaseParser.FROM);
            this.state = 2466;
            localctx.position = this.valueExpression(0);
            this.state = 2469;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.FOR) {
                this.state = 2467;
                this.match(SqlBaseParser.FOR);
                this.state = 2468;
                localctx.length = this.valueExpression(0);
            }

            this.state = 2471;
            this.match(SqlBaseParser.T__1);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 2485;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,319,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 2483;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,318,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new SubscriptContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
                    localctx.value = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_primaryExpression);
                    this.state = 2475;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 2476;
                    this.match(SqlBaseParser.T__7);
                    this.state = 2477;
                    localctx.index = this.valueExpression(0);
                    this.state = 2478;
                    this.match(SqlBaseParser.T__8);
                    break;

                case 2:
                    localctx = new DereferenceContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
                    localctx.base = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_primaryExpression);
                    this.state = 2480;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 2481;
                    this.match(SqlBaseParser.T__3);
                    this.state = 2482;
                    localctx.fieldName = this.identifier();
                    break;

                }
            }
            this.state = 2487;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,319,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_constant;
    return this;
}

ConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantContext.prototype.constructor = ConstantContext;



ConstantContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function NullLiteralContext(parser, ctx) {
	ConstantContext.call(this, parser);
    ConstantContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NullLiteralContext.prototype = Object.create(ConstantContext.prototype);
NullLiteralContext.prototype.constructor = NullLiteralContext;

SqlBaseParser.NullLiteralContext = NullLiteralContext;

NullLiteralContext.prototype.NULL = function() {
    return this.getToken(SqlBaseParser.NULL, 0);
};

function StringLiteralContext(parser, ctx) {
	ConstantContext.call(this, parser);
    ConstantContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StringLiteralContext.prototype = Object.create(ConstantContext.prototype);
StringLiteralContext.prototype.constructor = StringLiteralContext;

SqlBaseParser.StringLiteralContext = StringLiteralContext;

StringLiteralContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.STRING);
    } else {
        return this.getToken(SqlBaseParser.STRING, i);
    }
};


function TypeConstructorContext(parser, ctx) {
	ConstantContext.call(this, parser);
    ConstantContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeConstructorContext.prototype = Object.create(ConstantContext.prototype);
TypeConstructorContext.prototype.constructor = TypeConstructorContext;

SqlBaseParser.TypeConstructorContext = TypeConstructorContext;

TypeConstructorContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TypeConstructorContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

function IntervalLiteralContext(parser, ctx) {
	ConstantContext.call(this, parser);
    ConstantContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IntervalLiteralContext.prototype = Object.create(ConstantContext.prototype);
IntervalLiteralContext.prototype.constructor = IntervalLiteralContext;

SqlBaseParser.IntervalLiteralContext = IntervalLiteralContext;

IntervalLiteralContext.prototype.interval = function() {
    return this.getTypedRuleContext(IntervalContext,0);
};

function NumericLiteralContext(parser, ctx) {
	ConstantContext.call(this, parser);
    ConstantContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NumericLiteralContext.prototype = Object.create(ConstantContext.prototype);
NumericLiteralContext.prototype.constructor = NumericLiteralContext;

SqlBaseParser.NumericLiteralContext = NumericLiteralContext;

NumericLiteralContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};

function BooleanLiteralContext(parser, ctx) {
	ConstantContext.call(this, parser);
    ConstantContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BooleanLiteralContext.prototype = Object.create(ConstantContext.prototype);
BooleanLiteralContext.prototype.constructor = BooleanLiteralContext;

SqlBaseParser.BooleanLiteralContext = BooleanLiteralContext;

BooleanLiteralContext.prototype.booleanValue = function() {
    return this.getTypedRuleContext(BooleanValueContext,0);
};


SqlBaseParser.ConstantContext = ConstantContext;

SqlBaseParser.prototype.constant = function() {

    var localctx = new ConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, SqlBaseParser.RULE_constant);
    try {
        this.state = 2500;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,321,this._ctx);
        switch(la_) {
        case 1:
            localctx = new NullLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2488;
            this.match(SqlBaseParser.NULL);
            break;

        case 2:
            localctx = new IntervalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2489;
            this.interval();
            break;

        case 3:
            localctx = new TypeConstructorContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2490;
            this.identifier();
            this.state = 2491;
            this.match(SqlBaseParser.STRING);
            break;

        case 4:
            localctx = new NumericLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 2493;
            this.number();
            break;

        case 5:
            localctx = new BooleanLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 2494;
            this.booleanValue();
            break;

        case 6:
            localctx = new StringLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 2496;
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 2495;
            		this.match(SqlBaseParser.STRING);
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 2498;
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,320, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ComparisonOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_comparisonOperator;
    return this;
}

ComparisonOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComparisonOperatorContext.prototype.constructor = ComparisonOperatorContext;

ComparisonOperatorContext.prototype.EQ = function() {
    return this.getToken(SqlBaseParser.EQ, 0);
};

ComparisonOperatorContext.prototype.NEQ = function() {
    return this.getToken(SqlBaseParser.NEQ, 0);
};

ComparisonOperatorContext.prototype.NEQJ = function() {
    return this.getToken(SqlBaseParser.NEQJ, 0);
};

ComparisonOperatorContext.prototype.LT = function() {
    return this.getToken(SqlBaseParser.LT, 0);
};

ComparisonOperatorContext.prototype.LTE = function() {
    return this.getToken(SqlBaseParser.LTE, 0);
};

ComparisonOperatorContext.prototype.GT = function() {
    return this.getToken(SqlBaseParser.GT, 0);
};

ComparisonOperatorContext.prototype.GTE = function() {
    return this.getToken(SqlBaseParser.GTE, 0);
};

ComparisonOperatorContext.prototype.NSEQ = function() {
    return this.getToken(SqlBaseParser.NSEQ, 0);
};




SqlBaseParser.ComparisonOperatorContext = ComparisonOperatorContext;

SqlBaseParser.prototype.comparisonOperator = function() {

    var localctx = new ComparisonOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, SqlBaseParser.RULE_comparisonOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2502;
        _la = this._input.LA(1);
        if(!(((((_la - 272)) & ~0x1f) == 0 && ((1 << (_la - 272)) & ((1 << (SqlBaseParser.EQ - 272)) | (1 << (SqlBaseParser.NSEQ - 272)) | (1 << (SqlBaseParser.NEQ - 272)) | (1 << (SqlBaseParser.NEQJ - 272)) | (1 << (SqlBaseParser.LT - 272)) | (1 << (SqlBaseParser.LTE - 272)) | (1 << (SqlBaseParser.GT - 272)) | (1 << (SqlBaseParser.GTE - 272)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArithmeticOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_arithmeticOperator;
    return this;
}

ArithmeticOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArithmeticOperatorContext.prototype.constructor = ArithmeticOperatorContext;

ArithmeticOperatorContext.prototype.PLUS = function() {
    return this.getToken(SqlBaseParser.PLUS, 0);
};

ArithmeticOperatorContext.prototype.MINUS = function() {
    return this.getToken(SqlBaseParser.MINUS, 0);
};

ArithmeticOperatorContext.prototype.ASTERISK = function() {
    return this.getToken(SqlBaseParser.ASTERISK, 0);
};

ArithmeticOperatorContext.prototype.SLASH = function() {
    return this.getToken(SqlBaseParser.SLASH, 0);
};

ArithmeticOperatorContext.prototype.PERCENT = function() {
    return this.getToken(SqlBaseParser.PERCENT, 0);
};

ArithmeticOperatorContext.prototype.DIV = function() {
    return this.getToken(SqlBaseParser.DIV, 0);
};

ArithmeticOperatorContext.prototype.TILDE = function() {
    return this.getToken(SqlBaseParser.TILDE, 0);
};

ArithmeticOperatorContext.prototype.AMPERSAND = function() {
    return this.getToken(SqlBaseParser.AMPERSAND, 0);
};

ArithmeticOperatorContext.prototype.PIPE = function() {
    return this.getToken(SqlBaseParser.PIPE, 0);
};

ArithmeticOperatorContext.prototype.CONCAT_PIPE = function() {
    return this.getToken(SqlBaseParser.CONCAT_PIPE, 0);
};

ArithmeticOperatorContext.prototype.HAT = function() {
    return this.getToken(SqlBaseParser.HAT, 0);
};




SqlBaseParser.ArithmeticOperatorContext = ArithmeticOperatorContext;

SqlBaseParser.prototype.arithmeticOperator = function() {

    var localctx = new ArithmeticOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, SqlBaseParser.RULE_arithmeticOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2504;
        _la = this._input.LA(1);
        if(!(((((_la - 280)) & ~0x1f) == 0 && ((1 << (_la - 280)) & ((1 << (SqlBaseParser.PLUS - 280)) | (1 << (SqlBaseParser.MINUS - 280)) | (1 << (SqlBaseParser.ASTERISK - 280)) | (1 << (SqlBaseParser.SLASH - 280)) | (1 << (SqlBaseParser.PERCENT - 280)) | (1 << (SqlBaseParser.DIV - 280)) | (1 << (SqlBaseParser.TILDE - 280)) | (1 << (SqlBaseParser.AMPERSAND - 280)) | (1 << (SqlBaseParser.PIPE - 280)) | (1 << (SqlBaseParser.CONCAT_PIPE - 280)) | (1 << (SqlBaseParser.HAT - 280)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PredicateOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_predicateOperator;
    return this;
}

PredicateOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PredicateOperatorContext.prototype.constructor = PredicateOperatorContext;

PredicateOperatorContext.prototype.OR = function() {
    return this.getToken(SqlBaseParser.OR, 0);
};

PredicateOperatorContext.prototype.AND = function() {
    return this.getToken(SqlBaseParser.AND, 0);
};

PredicateOperatorContext.prototype.IN = function() {
    return this.getToken(SqlBaseParser.IN, 0);
};

PredicateOperatorContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};




SqlBaseParser.PredicateOperatorContext = PredicateOperatorContext;

SqlBaseParser.prototype.predicateOperator = function() {

    var localctx = new PredicateOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, SqlBaseParser.RULE_predicateOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2506;
        _la = this._input.LA(1);
        if(!(_la===SqlBaseParser.AND || _la===SqlBaseParser.IN || _la===SqlBaseParser.NOT || _la===SqlBaseParser.OR)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BooleanValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_booleanValue;
    return this;
}

BooleanValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanValueContext.prototype.constructor = BooleanValueContext;

BooleanValueContext.prototype.TRUE = function() {
    return this.getToken(SqlBaseParser.TRUE, 0);
};

BooleanValueContext.prototype.FALSE = function() {
    return this.getToken(SqlBaseParser.FALSE, 0);
};




SqlBaseParser.BooleanValueContext = BooleanValueContext;

SqlBaseParser.prototype.booleanValue = function() {

    var localctx = new BooleanValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, SqlBaseParser.RULE_booleanValue);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2508;
        _la = this._input.LA(1);
        if(!(_la===SqlBaseParser.FALSE || _la===SqlBaseParser.TRUE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IntervalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_interval;
    return this;
}

IntervalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntervalContext.prototype.constructor = IntervalContext;

IntervalContext.prototype.INTERVAL = function() {
    return this.getToken(SqlBaseParser.INTERVAL, 0);
};

IntervalContext.prototype.intervalField = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IntervalFieldContext);
    } else {
        return this.getTypedRuleContext(IntervalFieldContext,i);
    }
};




SqlBaseParser.IntervalContext = IntervalContext;

SqlBaseParser.prototype.interval = function() {

    var localctx = new IntervalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, SqlBaseParser.RULE_interval);
    var _la = 0; // Token type
    try {
        this.state = 2527;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,325,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2510;
            if (!( ansi)) {
                throw new antlr4.error.FailedPredicateException(this, "ansi");
            }
            this.state = 2512;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.INTERVAL) {
                this.state = 2511;
                this.match(SqlBaseParser.INTERVAL);
            }

            this.state = 2515;
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 2514;
            		this.intervalField();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 2517;
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,323, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2519;
            if (!( !ansi)) {
                throw new antlr4.error.FailedPredicateException(this, "!ansi");
            }
            this.state = 2520;
            this.match(SqlBaseParser.INTERVAL);
            this.state = 2524;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,324,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 2521;
                    this.intervalField();
                }
                this.state = 2526;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,324,this._ctx);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IntervalFieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_intervalField;
    this.value = null; // IntervalValueContext
    this.unit = null; // IntervalUnitContext
    this.to = null; // IntervalUnitContext
    return this;
}

IntervalFieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntervalFieldContext.prototype.constructor = IntervalFieldContext;

IntervalFieldContext.prototype.intervalValue = function() {
    return this.getTypedRuleContext(IntervalValueContext,0);
};

IntervalFieldContext.prototype.intervalUnit = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IntervalUnitContext);
    } else {
        return this.getTypedRuleContext(IntervalUnitContext,i);
    }
};

IntervalFieldContext.prototype.TO = function() {
    return this.getToken(SqlBaseParser.TO, 0);
};




SqlBaseParser.IntervalFieldContext = IntervalFieldContext;

SqlBaseParser.prototype.intervalField = function() {

    var localctx = new IntervalFieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, SqlBaseParser.RULE_intervalField);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2529;
        localctx.value = this.intervalValue();
        this.state = 2530;
        localctx.unit = this.intervalUnit();
        this.state = 2533;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,326,this._ctx);
        if(la_===1) {
            this.state = 2531;
            this.match(SqlBaseParser.TO);
            this.state = 2532;
            localctx.to = this.intervalUnit();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IntervalValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_intervalValue;
    return this;
}

IntervalValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntervalValueContext.prototype.constructor = IntervalValueContext;

IntervalValueContext.prototype.INTEGER_VALUE = function() {
    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
};

IntervalValueContext.prototype.DECIMAL_VALUE = function() {
    return this.getToken(SqlBaseParser.DECIMAL_VALUE, 0);
};

IntervalValueContext.prototype.PLUS = function() {
    return this.getToken(SqlBaseParser.PLUS, 0);
};

IntervalValueContext.prototype.MINUS = function() {
    return this.getToken(SqlBaseParser.MINUS, 0);
};

IntervalValueContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};




SqlBaseParser.IntervalValueContext = IntervalValueContext;

SqlBaseParser.prototype.intervalValue = function() {

    var localctx = new IntervalValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, SqlBaseParser.RULE_intervalValue);
    var _la = 0; // Token type
    try {
        this.state = 2540;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.PLUS:
        case SqlBaseParser.MINUS:
        case SqlBaseParser.INTEGER_VALUE:
        case SqlBaseParser.DECIMAL_VALUE:
            this.enterOuterAlt(localctx, 1);
            this.state = 2536;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PLUS || _la===SqlBaseParser.MINUS) {
                this.state = 2535;
                _la = this._input.LA(1);
                if(!(_la===SqlBaseParser.PLUS || _la===SqlBaseParser.MINUS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 2538;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.INTEGER_VALUE || _la===SqlBaseParser.DECIMAL_VALUE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case SqlBaseParser.STRING:
            this.enterOuterAlt(localctx, 2);
            this.state = 2539;
            this.match(SqlBaseParser.STRING);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IntervalUnitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_intervalUnit;
    return this;
}

IntervalUnitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntervalUnitContext.prototype.constructor = IntervalUnitContext;

IntervalUnitContext.prototype.DAY = function() {
    return this.getToken(SqlBaseParser.DAY, 0);
};

IntervalUnitContext.prototype.DAYS = function() {
    return this.getToken(SqlBaseParser.DAYS, 0);
};

IntervalUnitContext.prototype.HOUR = function() {
    return this.getToken(SqlBaseParser.HOUR, 0);
};

IntervalUnitContext.prototype.HOURS = function() {
    return this.getToken(SqlBaseParser.HOURS, 0);
};

IntervalUnitContext.prototype.MICROSECOND = function() {
    return this.getToken(SqlBaseParser.MICROSECOND, 0);
};

IntervalUnitContext.prototype.MICROSECONDS = function() {
    return this.getToken(SqlBaseParser.MICROSECONDS, 0);
};

IntervalUnitContext.prototype.MILLISECOND = function() {
    return this.getToken(SqlBaseParser.MILLISECOND, 0);
};

IntervalUnitContext.prototype.MILLISECONDS = function() {
    return this.getToken(SqlBaseParser.MILLISECONDS, 0);
};

IntervalUnitContext.prototype.MINUTE = function() {
    return this.getToken(SqlBaseParser.MINUTE, 0);
};

IntervalUnitContext.prototype.MINUTES = function() {
    return this.getToken(SqlBaseParser.MINUTES, 0);
};

IntervalUnitContext.prototype.MONTH = function() {
    return this.getToken(SqlBaseParser.MONTH, 0);
};

IntervalUnitContext.prototype.MONTHS = function() {
    return this.getToken(SqlBaseParser.MONTHS, 0);
};

IntervalUnitContext.prototype.SECOND = function() {
    return this.getToken(SqlBaseParser.SECOND, 0);
};

IntervalUnitContext.prototype.SECONDS = function() {
    return this.getToken(SqlBaseParser.SECONDS, 0);
};

IntervalUnitContext.prototype.WEEK = function() {
    return this.getToken(SqlBaseParser.WEEK, 0);
};

IntervalUnitContext.prototype.WEEKS = function() {
    return this.getToken(SqlBaseParser.WEEKS, 0);
};

IntervalUnitContext.prototype.YEAR = function() {
    return this.getToken(SqlBaseParser.YEAR, 0);
};

IntervalUnitContext.prototype.YEARS = function() {
    return this.getToken(SqlBaseParser.YEARS, 0);
};




SqlBaseParser.IntervalUnitContext = IntervalUnitContext;

SqlBaseParser.prototype.intervalUnit = function() {

    var localctx = new IntervalUnitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, SqlBaseParser.RULE_intervalUnit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2542;
        _la = this._input.LA(1);
        if(!(_la===SqlBaseParser.DAY || _la===SqlBaseParser.DAYS || _la===SqlBaseParser.HOUR || _la===SqlBaseParser.HOURS || ((((_la - 145)) & ~0x1f) == 0 && ((1 << (_la - 145)) & ((1 << (SqlBaseParser.MICROSECOND - 145)) | (1 << (SqlBaseParser.MICROSECONDS - 145)) | (1 << (SqlBaseParser.MILLISECOND - 145)) | (1 << (SqlBaseParser.MILLISECONDS - 145)) | (1 << (SqlBaseParser.MINUTE - 145)) | (1 << (SqlBaseParser.MINUTES - 145)) | (1 << (SqlBaseParser.MONTH - 145)) | (1 << (SqlBaseParser.MONTHS - 145)))) !== 0) || _la===SqlBaseParser.SECOND || _la===SqlBaseParser.SECONDS || ((((_la - 264)) & ~0x1f) == 0 && ((1 << (_la - 264)) & ((1 << (SqlBaseParser.WEEK - 264)) | (1 << (SqlBaseParser.WEEKS - 264)) | (1 << (SqlBaseParser.YEAR - 264)) | (1 << (SqlBaseParser.YEARS - 264)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ColPositionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_colPosition;
    return this;
}

ColPositionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColPositionContext.prototype.constructor = ColPositionContext;

ColPositionContext.prototype.FIRST = function() {
    return this.getToken(SqlBaseParser.FIRST, 0);
};

ColPositionContext.prototype.AFTER = function() {
    return this.getToken(SqlBaseParser.AFTER, 0);
};

ColPositionContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};




SqlBaseParser.ColPositionContext = ColPositionContext;

SqlBaseParser.prototype.colPosition = function() {

    var localctx = new ColPositionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, SqlBaseParser.RULE_colPosition);
    try {
        this.state = 2547;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.FIRST:
            this.enterOuterAlt(localctx, 1);
            this.state = 2544;
            this.match(SqlBaseParser.FIRST);
            break;
        case SqlBaseParser.AFTER:
            this.enterOuterAlt(localctx, 2);
            this.state = 2545;
            this.match(SqlBaseParser.AFTER);
            this.state = 2546;
            this.qualifiedName();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_dataType;
    return this;
}

DataTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeContext.prototype.constructor = DataTypeContext;



DataTypeContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ComplexDataTypeContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    this.complex = null; // Token;
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ComplexDataTypeContext.prototype = Object.create(DataTypeContext.prototype);
ComplexDataTypeContext.prototype.constructor = ComplexDataTypeContext;

SqlBaseParser.ComplexDataTypeContext = ComplexDataTypeContext;

ComplexDataTypeContext.prototype.dataType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DataTypeContext);
    } else {
        return this.getTypedRuleContext(DataTypeContext,i);
    }
};

ComplexDataTypeContext.prototype.ARRAY = function() {
    return this.getToken(SqlBaseParser.ARRAY, 0);
};

ComplexDataTypeContext.prototype.MAP = function() {
    return this.getToken(SqlBaseParser.MAP, 0);
};

ComplexDataTypeContext.prototype.STRUCT = function() {
    return this.getToken(SqlBaseParser.STRUCT, 0);
};

ComplexDataTypeContext.prototype.NEQ = function() {
    return this.getToken(SqlBaseParser.NEQ, 0);
};

ComplexDataTypeContext.prototype.complexColTypeList = function() {
    return this.getTypedRuleContext(ComplexColTypeListContext,0);
};

function PrimitiveDataTypeContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PrimitiveDataTypeContext.prototype = Object.create(DataTypeContext.prototype);
PrimitiveDataTypeContext.prototype.constructor = PrimitiveDataTypeContext;

SqlBaseParser.PrimitiveDataTypeContext = PrimitiveDataTypeContext;

PrimitiveDataTypeContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

PrimitiveDataTypeContext.prototype.INTEGER_VALUE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.INTEGER_VALUE);
    } else {
        return this.getToken(SqlBaseParser.INTEGER_VALUE, i);
    }
};



SqlBaseParser.DataTypeContext = DataTypeContext;

SqlBaseParser.prototype.dataType = function() {

    var localctx = new DataTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, SqlBaseParser.RULE_dataType);
    var _la = 0; // Token type
    try {
        this.state = 2583;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,334,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ComplexDataTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2549;
            localctx.complex = this.match(SqlBaseParser.ARRAY);
            this.state = 2550;
            this.match(SqlBaseParser.LT);
            this.state = 2551;
            this.dataType();
            this.state = 2552;
            this.match(SqlBaseParser.GT);
            break;

        case 2:
            localctx = new ComplexDataTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2554;
            localctx.complex = this.match(SqlBaseParser.MAP);
            this.state = 2555;
            this.match(SqlBaseParser.LT);
            this.state = 2556;
            this.dataType();
            this.state = 2557;
            this.match(SqlBaseParser.T__2);
            this.state = 2558;
            this.dataType();
            this.state = 2559;
            this.match(SqlBaseParser.GT);
            break;

        case 3:
            localctx = new ComplexDataTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2561;
            localctx.complex = this.match(SqlBaseParser.STRUCT);
            this.state = 2568;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SqlBaseParser.LT:
                this.state = 2562;
                this.match(SqlBaseParser.LT);
                this.state = 2564;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,330,this._ctx);
                if(la_===1) {
                    this.state = 2563;
                    this.complexColTypeList();

                }
                this.state = 2566;
                this.match(SqlBaseParser.GT);
                break;
            case SqlBaseParser.NEQ:
                this.state = 2567;
                this.match(SqlBaseParser.NEQ);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 4:
            localctx = new PrimitiveDataTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 2570;
            this.identifier();
            this.state = 2581;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,333,this._ctx);
            if(la_===1) {
                this.state = 2571;
                this.match(SqlBaseParser.T__0);
                this.state = 2572;
                this.match(SqlBaseParser.INTEGER_VALUE);
                this.state = 2577;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__2) {
                    this.state = 2573;
                    this.match(SqlBaseParser.T__2);
                    this.state = 2574;
                    this.match(SqlBaseParser.INTEGER_VALUE);
                    this.state = 2579;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2580;
                this.match(SqlBaseParser.T__1);

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QualifiedColTypeWithPositionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_qualifiedColTypeWithPositionList;
    return this;
}

QualifiedColTypeWithPositionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiedColTypeWithPositionListContext.prototype.constructor = QualifiedColTypeWithPositionListContext;

QualifiedColTypeWithPositionListContext.prototype.qualifiedColTypeWithPosition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QualifiedColTypeWithPositionContext);
    } else {
        return this.getTypedRuleContext(QualifiedColTypeWithPositionContext,i);
    }
};




SqlBaseParser.QualifiedColTypeWithPositionListContext = QualifiedColTypeWithPositionListContext;

SqlBaseParser.prototype.qualifiedColTypeWithPositionList = function() {

    var localctx = new QualifiedColTypeWithPositionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, SqlBaseParser.RULE_qualifiedColTypeWithPositionList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2585;
        this.qualifiedColTypeWithPosition();
        this.state = 2590;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__2) {
            this.state = 2586;
            this.match(SqlBaseParser.T__2);
            this.state = 2587;
            this.qualifiedColTypeWithPosition();
            this.state = 2592;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QualifiedColTypeWithPositionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_qualifiedColTypeWithPosition;
    this.name = null; // QualifiedNameContext
    this.comment = null; // Token
    return this;
}

QualifiedColTypeWithPositionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiedColTypeWithPositionContext.prototype.constructor = QualifiedColTypeWithPositionContext;

QualifiedColTypeWithPositionContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

QualifiedColTypeWithPositionContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

QualifiedColTypeWithPositionContext.prototype.COMMENT = function() {
    return this.getToken(SqlBaseParser.COMMENT, 0);
};

QualifiedColTypeWithPositionContext.prototype.colPosition = function() {
    return this.getTypedRuleContext(ColPositionContext,0);
};

QualifiedColTypeWithPositionContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};




SqlBaseParser.QualifiedColTypeWithPositionContext = QualifiedColTypeWithPositionContext;

SqlBaseParser.prototype.qualifiedColTypeWithPosition = function() {

    var localctx = new QualifiedColTypeWithPositionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, SqlBaseParser.RULE_qualifiedColTypeWithPosition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2593;
        localctx.name = this.qualifiedName();
        this.state = 2594;
        this.dataType();
        this.state = 2597;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.COMMENT) {
            this.state = 2595;
            this.match(SqlBaseParser.COMMENT);
            this.state = 2596;
            localctx.comment = this.match(SqlBaseParser.STRING);
        }

        this.state = 2600;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.AFTER || _la===SqlBaseParser.FIRST) {
            this.state = 2599;
            this.colPosition();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ColTypeListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_colTypeList;
    return this;
}

ColTypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColTypeListContext.prototype.constructor = ColTypeListContext;

ColTypeListContext.prototype.colType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColTypeContext);
    } else {
        return this.getTypedRuleContext(ColTypeContext,i);
    }
};




SqlBaseParser.ColTypeListContext = ColTypeListContext;

SqlBaseParser.prototype.colTypeList = function() {

    var localctx = new ColTypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, SqlBaseParser.RULE_colTypeList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2602;
        this.colType();
        this.state = 2607;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,338,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2603;
                this.match(SqlBaseParser.T__2);
                this.state = 2604;
                this.colType();
            }
            this.state = 2609;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,338,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ColTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_colType;
    this.colName = null; // ErrorCapturingIdentifierContext
    return this;
}

ColTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColTypeContext.prototype.constructor = ColTypeContext;

ColTypeContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

ColTypeContext.prototype.errorCapturingIdentifier = function() {
    return this.getTypedRuleContext(ErrorCapturingIdentifierContext,0);
};

ColTypeContext.prototype.COMMENT = function() {
    return this.getToken(SqlBaseParser.COMMENT, 0);
};

ColTypeContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};




SqlBaseParser.ColTypeContext = ColTypeContext;

SqlBaseParser.prototype.colType = function() {

    var localctx = new ColTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, SqlBaseParser.RULE_colType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2610;
        localctx.colName = this.errorCapturingIdentifier();
        this.state = 2611;
        this.dataType();
        this.state = 2614;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,339,this._ctx);
        if(la_===1) {
            this.state = 2612;
            this.match(SqlBaseParser.COMMENT);
            this.state = 2613;
            this.match(SqlBaseParser.STRING);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ComplexColTypeListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_complexColTypeList;
    return this;
}

ComplexColTypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComplexColTypeListContext.prototype.constructor = ComplexColTypeListContext;

ComplexColTypeListContext.prototype.complexColType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ComplexColTypeContext);
    } else {
        return this.getTypedRuleContext(ComplexColTypeContext,i);
    }
};




SqlBaseParser.ComplexColTypeListContext = ComplexColTypeListContext;

SqlBaseParser.prototype.complexColTypeList = function() {

    var localctx = new ComplexColTypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, SqlBaseParser.RULE_complexColTypeList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2616;
        this.complexColType();
        this.state = 2621;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__2) {
            this.state = 2617;
            this.match(SqlBaseParser.T__2);
            this.state = 2618;
            this.complexColType();
            this.state = 2623;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ComplexColTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_complexColType;
    return this;
}

ComplexColTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComplexColTypeContext.prototype.constructor = ComplexColTypeContext;

ComplexColTypeContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ComplexColTypeContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

ComplexColTypeContext.prototype.COMMENT = function() {
    return this.getToken(SqlBaseParser.COMMENT, 0);
};

ComplexColTypeContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};




SqlBaseParser.ComplexColTypeContext = ComplexColTypeContext;

SqlBaseParser.prototype.complexColType = function() {

    var localctx = new ComplexColTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, SqlBaseParser.RULE_complexColType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2624;
        this.identifier();
        this.state = 2625;
        this.match(SqlBaseParser.T__9);
        this.state = 2626;
        this.dataType();
        this.state = 2629;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.COMMENT) {
            this.state = 2627;
            this.match(SqlBaseParser.COMMENT);
            this.state = 2628;
            this.match(SqlBaseParser.STRING);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WhenClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_whenClause;
    this.condition = null; // ExpressionContext
    this.result = null; // ExpressionContext
    return this;
}

WhenClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhenClauseContext.prototype.constructor = WhenClauseContext;

WhenClauseContext.prototype.WHEN = function() {
    return this.getToken(SqlBaseParser.WHEN, 0);
};

WhenClauseContext.prototype.THEN = function() {
    return this.getToken(SqlBaseParser.THEN, 0);
};

WhenClauseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};




SqlBaseParser.WhenClauseContext = WhenClauseContext;

SqlBaseParser.prototype.whenClause = function() {

    var localctx = new WhenClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, SqlBaseParser.RULE_whenClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2631;
        this.match(SqlBaseParser.WHEN);
        this.state = 2632;
        localctx.condition = this.expression();
        this.state = 2633;
        this.match(SqlBaseParser.THEN);
        this.state = 2634;
        localctx.result = this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WindowClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_windowClause;
    return this;
}

WindowClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowClauseContext.prototype.constructor = WindowClauseContext;

WindowClauseContext.prototype.WINDOW = function() {
    return this.getToken(SqlBaseParser.WINDOW, 0);
};

WindowClauseContext.prototype.namedWindow = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedWindowContext);
    } else {
        return this.getTypedRuleContext(NamedWindowContext,i);
    }
};




SqlBaseParser.WindowClauseContext = WindowClauseContext;

SqlBaseParser.prototype.windowClause = function() {

    var localctx = new WindowClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, SqlBaseParser.RULE_windowClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2636;
        this.match(SqlBaseParser.WINDOW);
        this.state = 2637;
        this.namedWindow();
        this.state = 2642;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,342,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2638;
                this.match(SqlBaseParser.T__2);
                this.state = 2639;
                this.namedWindow();
            }
            this.state = 2644;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,342,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamedWindowContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_namedWindow;
    this.name = null; // ErrorCapturingIdentifierContext
    return this;
}

NamedWindowContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedWindowContext.prototype.constructor = NamedWindowContext;

NamedWindowContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

NamedWindowContext.prototype.windowSpec = function() {
    return this.getTypedRuleContext(WindowSpecContext,0);
};

NamedWindowContext.prototype.errorCapturingIdentifier = function() {
    return this.getTypedRuleContext(ErrorCapturingIdentifierContext,0);
};




SqlBaseParser.NamedWindowContext = NamedWindowContext;

SqlBaseParser.prototype.namedWindow = function() {

    var localctx = new NamedWindowContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, SqlBaseParser.RULE_namedWindow);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2645;
        localctx.name = this.errorCapturingIdentifier();
        this.state = 2646;
        this.match(SqlBaseParser.AS);
        this.state = 2647;
        this.windowSpec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WindowSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_windowSpec;
    return this;
}

WindowSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowSpecContext.prototype.constructor = WindowSpecContext;



WindowSpecContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function WindowRefContext(parser, ctx) {
	WindowSpecContext.call(this, parser);
    this.name = null; // ErrorCapturingIdentifierContext;
    WindowSpecContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WindowRefContext.prototype = Object.create(WindowSpecContext.prototype);
WindowRefContext.prototype.constructor = WindowRefContext;

SqlBaseParser.WindowRefContext = WindowRefContext;

WindowRefContext.prototype.errorCapturingIdentifier = function() {
    return this.getTypedRuleContext(ErrorCapturingIdentifierContext,0);
};

function WindowDefContext(parser, ctx) {
	WindowSpecContext.call(this, parser);
    this._expression = null; // ExpressionContext;
    this.partition = []; // of ExpressionContexts;
    WindowSpecContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WindowDefContext.prototype = Object.create(WindowSpecContext.prototype);
WindowDefContext.prototype.constructor = WindowDefContext;

SqlBaseParser.WindowDefContext = WindowDefContext;

WindowDefContext.prototype.CLUSTER = function() {
    return this.getToken(SqlBaseParser.CLUSTER, 0);
};

WindowDefContext.prototype.BY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.BY);
    } else {
        return this.getToken(SqlBaseParser.BY, i);
    }
};


WindowDefContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

WindowDefContext.prototype.windowFrame = function() {
    return this.getTypedRuleContext(WindowFrameContext,0);
};

WindowDefContext.prototype.sortItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SortItemContext);
    } else {
        return this.getTypedRuleContext(SortItemContext,i);
    }
};

WindowDefContext.prototype.PARTITION = function() {
    return this.getToken(SqlBaseParser.PARTITION, 0);
};

WindowDefContext.prototype.DISTRIBUTE = function() {
    return this.getToken(SqlBaseParser.DISTRIBUTE, 0);
};

WindowDefContext.prototype.ORDER = function() {
    return this.getToken(SqlBaseParser.ORDER, 0);
};

WindowDefContext.prototype.SORT = function() {
    return this.getToken(SqlBaseParser.SORT, 0);
};


SqlBaseParser.WindowSpecContext = WindowSpecContext;

SqlBaseParser.prototype.windowSpec = function() {

    var localctx = new WindowSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, SqlBaseParser.RULE_windowSpec);
    var _la = 0; // Token type
    try {
        this.state = 2695;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,350,this._ctx);
        switch(la_) {
        case 1:
            localctx = new WindowRefContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2649;
            localctx.name = this.errorCapturingIdentifier();
            break;

        case 2:
            localctx = new WindowRefContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2650;
            this.match(SqlBaseParser.T__0);
            this.state = 2651;
            localctx.name = this.errorCapturingIdentifier();
            this.state = 2652;
            this.match(SqlBaseParser.T__1);
            break;

        case 3:
            localctx = new WindowDefContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2654;
            this.match(SqlBaseParser.T__0);
            this.state = 2689;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SqlBaseParser.CLUSTER:
                this.state = 2655;
                this.match(SqlBaseParser.CLUSTER);
                this.state = 2656;
                this.match(SqlBaseParser.BY);
                this.state = 2657;
                localctx._expression = this.expression();
                localctx.partition.push(localctx._expression);
                this.state = 2662;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__2) {
                    this.state = 2658;
                    this.match(SqlBaseParser.T__2);
                    this.state = 2659;
                    localctx._expression = this.expression();
                    localctx.partition.push(localctx._expression);
                    this.state = 2664;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                break;
            case SqlBaseParser.T__1:
            case SqlBaseParser.DISTRIBUTE:
            case SqlBaseParser.ORDER:
            case SqlBaseParser.PARTITION:
            case SqlBaseParser.RANGE:
            case SqlBaseParser.ROWS:
            case SqlBaseParser.SORT:
                this.state = 2675;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlBaseParser.DISTRIBUTE || _la===SqlBaseParser.PARTITION) {
                    this.state = 2665;
                    _la = this._input.LA(1);
                    if(!(_la===SqlBaseParser.DISTRIBUTE || _la===SqlBaseParser.PARTITION)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2666;
                    this.match(SqlBaseParser.BY);
                    this.state = 2667;
                    localctx._expression = this.expression();
                    localctx.partition.push(localctx._expression);
                    this.state = 2672;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===SqlBaseParser.T__2) {
                        this.state = 2668;
                        this.match(SqlBaseParser.T__2);
                        this.state = 2669;
                        localctx._expression = this.expression();
                        localctx.partition.push(localctx._expression);
                        this.state = 2674;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                }

                this.state = 2687;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlBaseParser.ORDER || _la===SqlBaseParser.SORT) {
                    this.state = 2677;
                    _la = this._input.LA(1);
                    if(!(_la===SqlBaseParser.ORDER || _la===SqlBaseParser.SORT)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2678;
                    this.match(SqlBaseParser.BY);
                    this.state = 2679;
                    this.sortItem();
                    this.state = 2684;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===SqlBaseParser.T__2) {
                        this.state = 2680;
                        this.match(SqlBaseParser.T__2);
                        this.state = 2681;
                        this.sortItem();
                        this.state = 2686;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                }

                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2692;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.RANGE || _la===SqlBaseParser.ROWS) {
                this.state = 2691;
                this.windowFrame();
            }

            this.state = 2694;
            this.match(SqlBaseParser.T__1);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WindowFrameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_windowFrame;
    this.frameType = null; // Token
    this.start = null; // FrameBoundContext
    this.end = null; // FrameBoundContext
    return this;
}

WindowFrameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowFrameContext.prototype.constructor = WindowFrameContext;

WindowFrameContext.prototype.RANGE = function() {
    return this.getToken(SqlBaseParser.RANGE, 0);
};

WindowFrameContext.prototype.frameBound = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FrameBoundContext);
    } else {
        return this.getTypedRuleContext(FrameBoundContext,i);
    }
};

WindowFrameContext.prototype.ROWS = function() {
    return this.getToken(SqlBaseParser.ROWS, 0);
};

WindowFrameContext.prototype.BETWEEN = function() {
    return this.getToken(SqlBaseParser.BETWEEN, 0);
};

WindowFrameContext.prototype.AND = function() {
    return this.getToken(SqlBaseParser.AND, 0);
};




SqlBaseParser.WindowFrameContext = WindowFrameContext;

SqlBaseParser.prototype.windowFrame = function() {

    var localctx = new WindowFrameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, SqlBaseParser.RULE_windowFrame);
    try {
        this.state = 2713;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,351,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2697;
            localctx.frameType = this.match(SqlBaseParser.RANGE);
            this.state = 2698;
            localctx.start = this.frameBound();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2699;
            localctx.frameType = this.match(SqlBaseParser.ROWS);
            this.state = 2700;
            localctx.start = this.frameBound();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2701;
            localctx.frameType = this.match(SqlBaseParser.RANGE);
            this.state = 2702;
            this.match(SqlBaseParser.BETWEEN);
            this.state = 2703;
            localctx.start = this.frameBound();
            this.state = 2704;
            this.match(SqlBaseParser.AND);
            this.state = 2705;
            localctx.end = this.frameBound();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2707;
            localctx.frameType = this.match(SqlBaseParser.ROWS);
            this.state = 2708;
            this.match(SqlBaseParser.BETWEEN);
            this.state = 2709;
            localctx.start = this.frameBound();
            this.state = 2710;
            this.match(SqlBaseParser.AND);
            this.state = 2711;
            localctx.end = this.frameBound();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FrameBoundContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_frameBound;
    this.boundType = null; // Token
    return this;
}

FrameBoundContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FrameBoundContext.prototype.constructor = FrameBoundContext;

FrameBoundContext.prototype.UNBOUNDED = function() {
    return this.getToken(SqlBaseParser.UNBOUNDED, 0);
};

FrameBoundContext.prototype.PRECEDING = function() {
    return this.getToken(SqlBaseParser.PRECEDING, 0);
};

FrameBoundContext.prototype.FOLLOWING = function() {
    return this.getToken(SqlBaseParser.FOLLOWING, 0);
};

FrameBoundContext.prototype.ROW = function() {
    return this.getToken(SqlBaseParser.ROW, 0);
};

FrameBoundContext.prototype.CURRENT = function() {
    return this.getToken(SqlBaseParser.CURRENT, 0);
};

FrameBoundContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};




SqlBaseParser.FrameBoundContext = FrameBoundContext;

SqlBaseParser.prototype.frameBound = function() {

    var localctx = new FrameBoundContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, SqlBaseParser.RULE_frameBound);
    var _la = 0; // Token type
    try {
        this.state = 2722;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,352,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2715;
            this.match(SqlBaseParser.UNBOUNDED);
            this.state = 2716;
            localctx.boundType = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.FOLLOWING || _la===SqlBaseParser.PRECEDING)) {
                localctx.boundType = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2717;
            localctx.boundType = this.match(SqlBaseParser.CURRENT);
            this.state = 2718;
            this.match(SqlBaseParser.ROW);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2719;
            this.expression();
            this.state = 2720;
            localctx.boundType = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.FOLLOWING || _la===SqlBaseParser.PRECEDING)) {
                localctx.boundType = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QualifiedNameListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_qualifiedNameList;
    return this;
}

QualifiedNameListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiedNameListContext.prototype.constructor = QualifiedNameListContext;

QualifiedNameListContext.prototype.qualifiedName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QualifiedNameContext);
    } else {
        return this.getTypedRuleContext(QualifiedNameContext,i);
    }
};




SqlBaseParser.QualifiedNameListContext = QualifiedNameListContext;

SqlBaseParser.prototype.qualifiedNameList = function() {

    var localctx = new QualifiedNameListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, SqlBaseParser.RULE_qualifiedNameList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2724;
        this.qualifiedName();
        this.state = 2729;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__2) {
            this.state = 2725;
            this.match(SqlBaseParser.T__2);
            this.state = 2726;
            this.qualifiedName();
            this.state = 2731;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QualifiedNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_qualifiedName;
    return this;
}

QualifiedNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiedNameContext.prototype.constructor = QualifiedNameContext;

QualifiedNameContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};




SqlBaseParser.QualifiedNameContext = QualifiedNameContext;

SqlBaseParser.prototype.qualifiedName = function() {

    var localctx = new QualifiedNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, SqlBaseParser.RULE_qualifiedName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2732;
        this.identifier();
        this.state = 2737;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,354,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2733;
                this.match(SqlBaseParser.T__3);
                this.state = 2734;
                this.identifier();
            }
            this.state = 2739;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,354,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ErrorCapturingIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_errorCapturingIdentifier;
    return this;
}

ErrorCapturingIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ErrorCapturingIdentifierContext.prototype.constructor = ErrorCapturingIdentifierContext;

ErrorCapturingIdentifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ErrorCapturingIdentifierContext.prototype.errorCapturingIdentifierExtra = function() {
    return this.getTypedRuleContext(ErrorCapturingIdentifierExtraContext,0);
};




SqlBaseParser.ErrorCapturingIdentifierContext = ErrorCapturingIdentifierContext;

SqlBaseParser.prototype.errorCapturingIdentifier = function() {

    var localctx = new ErrorCapturingIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, SqlBaseParser.RULE_errorCapturingIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2740;
        this.identifier();
        this.state = 2741;
        this.errorCapturingIdentifierExtra();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ErrorCapturingIdentifierExtraContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_errorCapturingIdentifierExtra;
    return this;
}

ErrorCapturingIdentifierExtraContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ErrorCapturingIdentifierExtraContext.prototype.constructor = ErrorCapturingIdentifierExtraContext;



ErrorCapturingIdentifierExtraContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ErrorIdentContext(parser, ctx) {
	ErrorCapturingIdentifierExtraContext.call(this, parser);
    ErrorCapturingIdentifierExtraContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ErrorIdentContext.prototype = Object.create(ErrorCapturingIdentifierExtraContext.prototype);
ErrorIdentContext.prototype.constructor = ErrorIdentContext;

SqlBaseParser.ErrorIdentContext = ErrorIdentContext;

ErrorIdentContext.prototype.MINUS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.MINUS);
    } else {
        return this.getToken(SqlBaseParser.MINUS, i);
    }
};


ErrorIdentContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

function RealIdentContext(parser, ctx) {
	ErrorCapturingIdentifierExtraContext.call(this, parser);
    ErrorCapturingIdentifierExtraContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RealIdentContext.prototype = Object.create(ErrorCapturingIdentifierExtraContext.prototype);
RealIdentContext.prototype.constructor = RealIdentContext;

SqlBaseParser.RealIdentContext = RealIdentContext;



SqlBaseParser.ErrorCapturingIdentifierExtraContext = ErrorCapturingIdentifierExtraContext;

SqlBaseParser.prototype.errorCapturingIdentifierExtra = function() {

    var localctx = new ErrorCapturingIdentifierExtraContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, SqlBaseParser.RULE_errorCapturingIdentifierExtra);
    try {
        this.state = 2750;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,356,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ErrorIdentContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2745;
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 2743;
            		this.match(SqlBaseParser.MINUS);
            		this.state = 2744;
            		this.identifier();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 2747;
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,355, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;

        case 2:
            localctx = new RealIdentContext(this, localctx);
            this.enterOuterAlt(localctx, 2);

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.strictIdentifier = function() {
    return this.getTypedRuleContext(StrictIdentifierContext,0);
};

IdentifierContext.prototype.strictNonReserved = function() {
    return this.getTypedRuleContext(StrictNonReservedContext,0);
};




SqlBaseParser.IdentifierContext = IdentifierContext;

SqlBaseParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, SqlBaseParser.RULE_identifier);
    try {
        this.state = 2755;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,357,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2752;
            this.strictIdentifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2753;
            if (!( !ansi)) {
                throw new antlr4.error.FailedPredicateException(this, "!ansi");
            }
            this.state = 2754;
            this.strictNonReserved();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StrictIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_strictIdentifier;
    return this;
}

StrictIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StrictIdentifierContext.prototype.constructor = StrictIdentifierContext;



StrictIdentifierContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function QuotedIdentifierAlternativeContext(parser, ctx) {
	StrictIdentifierContext.call(this, parser);
    StrictIdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QuotedIdentifierAlternativeContext.prototype = Object.create(StrictIdentifierContext.prototype);
QuotedIdentifierAlternativeContext.prototype.constructor = QuotedIdentifierAlternativeContext;

SqlBaseParser.QuotedIdentifierAlternativeContext = QuotedIdentifierAlternativeContext;

QuotedIdentifierAlternativeContext.prototype.quotedIdentifier = function() {
    return this.getTypedRuleContext(QuotedIdentifierContext,0);
};

function UnquotedIdentifierContext(parser, ctx) {
	StrictIdentifierContext.call(this, parser);
    StrictIdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnquotedIdentifierContext.prototype = Object.create(StrictIdentifierContext.prototype);
UnquotedIdentifierContext.prototype.constructor = UnquotedIdentifierContext;

SqlBaseParser.UnquotedIdentifierContext = UnquotedIdentifierContext;

UnquotedIdentifierContext.prototype.IDENTIFIER = function() {
    return this.getToken(SqlBaseParser.IDENTIFIER, 0);
};

UnquotedIdentifierContext.prototype.ansiNonReserved = function() {
    return this.getTypedRuleContext(AnsiNonReservedContext,0);
};

UnquotedIdentifierContext.prototype.nonReserved = function() {
    return this.getTypedRuleContext(NonReservedContext,0);
};


SqlBaseParser.StrictIdentifierContext = StrictIdentifierContext;

SqlBaseParser.prototype.strictIdentifier = function() {

    var localctx = new StrictIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, SqlBaseParser.RULE_strictIdentifier);
    try {
        this.state = 2763;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,358,this._ctx);
        switch(la_) {
        case 1:
            localctx = new UnquotedIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2757;
            this.match(SqlBaseParser.IDENTIFIER);
            break;

        case 2:
            localctx = new QuotedIdentifierAlternativeContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2758;
            this.quotedIdentifier();
            break;

        case 3:
            localctx = new UnquotedIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2759;
            if (!( ansi)) {
                throw new antlr4.error.FailedPredicateException(this, "ansi");
            }
            this.state = 2760;
            this.ansiNonReserved();
            break;

        case 4:
            localctx = new UnquotedIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 2761;
            if (!( !ansi)) {
                throw new antlr4.error.FailedPredicateException(this, "!ansi");
            }
            this.state = 2762;
            this.nonReserved();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QuotedIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_quotedIdentifier;
    return this;
}

QuotedIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuotedIdentifierContext.prototype.constructor = QuotedIdentifierContext;

QuotedIdentifierContext.prototype.BACKQUOTED_IDENTIFIER = function() {
    return this.getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0);
};




SqlBaseParser.QuotedIdentifierContext = QuotedIdentifierContext;

SqlBaseParser.prototype.quotedIdentifier = function() {

    var localctx = new QuotedIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, SqlBaseParser.RULE_quotedIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2765;
        this.match(SqlBaseParser.BACKQUOTED_IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_number;
    return this;
}

NumberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumberContext.prototype.constructor = NumberContext;



NumberContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DecimalLiteralContext(parser, ctx) {
	NumberContext.call(this, parser);
    NumberContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DecimalLiteralContext.prototype = Object.create(NumberContext.prototype);
DecimalLiteralContext.prototype.constructor = DecimalLiteralContext;

SqlBaseParser.DecimalLiteralContext = DecimalLiteralContext;

DecimalLiteralContext.prototype.DECIMAL_VALUE = function() {
    return this.getToken(SqlBaseParser.DECIMAL_VALUE, 0);
};

DecimalLiteralContext.prototype.MINUS = function() {
    return this.getToken(SqlBaseParser.MINUS, 0);
};

function BigIntLiteralContext(parser, ctx) {
	NumberContext.call(this, parser);
    NumberContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BigIntLiteralContext.prototype = Object.create(NumberContext.prototype);
BigIntLiteralContext.prototype.constructor = BigIntLiteralContext;

SqlBaseParser.BigIntLiteralContext = BigIntLiteralContext;

BigIntLiteralContext.prototype.BIGINT_LITERAL = function() {
    return this.getToken(SqlBaseParser.BIGINT_LITERAL, 0);
};

BigIntLiteralContext.prototype.MINUS = function() {
    return this.getToken(SqlBaseParser.MINUS, 0);
};

function TinyIntLiteralContext(parser, ctx) {
	NumberContext.call(this, parser);
    NumberContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TinyIntLiteralContext.prototype = Object.create(NumberContext.prototype);
TinyIntLiteralContext.prototype.constructor = TinyIntLiteralContext;

SqlBaseParser.TinyIntLiteralContext = TinyIntLiteralContext;

TinyIntLiteralContext.prototype.TINYINT_LITERAL = function() {
    return this.getToken(SqlBaseParser.TINYINT_LITERAL, 0);
};

TinyIntLiteralContext.prototype.MINUS = function() {
    return this.getToken(SqlBaseParser.MINUS, 0);
};

function BigDecimalLiteralContext(parser, ctx) {
	NumberContext.call(this, parser);
    NumberContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BigDecimalLiteralContext.prototype = Object.create(NumberContext.prototype);
BigDecimalLiteralContext.prototype.constructor = BigDecimalLiteralContext;

SqlBaseParser.BigDecimalLiteralContext = BigDecimalLiteralContext;

BigDecimalLiteralContext.prototype.BIGDECIMAL_LITERAL = function() {
    return this.getToken(SqlBaseParser.BIGDECIMAL_LITERAL, 0);
};

BigDecimalLiteralContext.prototype.MINUS = function() {
    return this.getToken(SqlBaseParser.MINUS, 0);
};

function DoubleLiteralContext(parser, ctx) {
	NumberContext.call(this, parser);
    NumberContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DoubleLiteralContext.prototype = Object.create(NumberContext.prototype);
DoubleLiteralContext.prototype.constructor = DoubleLiteralContext;

SqlBaseParser.DoubleLiteralContext = DoubleLiteralContext;

DoubleLiteralContext.prototype.DOUBLE_LITERAL = function() {
    return this.getToken(SqlBaseParser.DOUBLE_LITERAL, 0);
};

DoubleLiteralContext.prototype.MINUS = function() {
    return this.getToken(SqlBaseParser.MINUS, 0);
};

function IntegerLiteralContext(parser, ctx) {
	NumberContext.call(this, parser);
    NumberContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IntegerLiteralContext.prototype = Object.create(NumberContext.prototype);
IntegerLiteralContext.prototype.constructor = IntegerLiteralContext;

SqlBaseParser.IntegerLiteralContext = IntegerLiteralContext;

IntegerLiteralContext.prototype.INTEGER_VALUE = function() {
    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
};

IntegerLiteralContext.prototype.MINUS = function() {
    return this.getToken(SqlBaseParser.MINUS, 0);
};

function SmallIntLiteralContext(parser, ctx) {
	NumberContext.call(this, parser);
    NumberContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SmallIntLiteralContext.prototype = Object.create(NumberContext.prototype);
SmallIntLiteralContext.prototype.constructor = SmallIntLiteralContext;

SqlBaseParser.SmallIntLiteralContext = SmallIntLiteralContext;

SmallIntLiteralContext.prototype.SMALLINT_LITERAL = function() {
    return this.getToken(SqlBaseParser.SMALLINT_LITERAL, 0);
};

SmallIntLiteralContext.prototype.MINUS = function() {
    return this.getToken(SqlBaseParser.MINUS, 0);
};


SqlBaseParser.NumberContext = NumberContext;

SqlBaseParser.prototype.number = function() {

    var localctx = new NumberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, SqlBaseParser.RULE_number);
    var _la = 0; // Token type
    try {
        this.state = 2795;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,366,this._ctx);
        switch(la_) {
        case 1:
            localctx = new DecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2768;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.MINUS) {
                this.state = 2767;
                this.match(SqlBaseParser.MINUS);
            }

            this.state = 2770;
            this.match(SqlBaseParser.DECIMAL_VALUE);
            break;

        case 2:
            localctx = new IntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2772;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.MINUS) {
                this.state = 2771;
                this.match(SqlBaseParser.MINUS);
            }

            this.state = 2774;
            this.match(SqlBaseParser.INTEGER_VALUE);
            break;

        case 3:
            localctx = new BigIntLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2776;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.MINUS) {
                this.state = 2775;
                this.match(SqlBaseParser.MINUS);
            }

            this.state = 2778;
            this.match(SqlBaseParser.BIGINT_LITERAL);
            break;

        case 4:
            localctx = new SmallIntLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 2780;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.MINUS) {
                this.state = 2779;
                this.match(SqlBaseParser.MINUS);
            }

            this.state = 2782;
            this.match(SqlBaseParser.SMALLINT_LITERAL);
            break;

        case 5:
            localctx = new TinyIntLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 2784;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.MINUS) {
                this.state = 2783;
                this.match(SqlBaseParser.MINUS);
            }

            this.state = 2786;
            this.match(SqlBaseParser.TINYINT_LITERAL);
            break;

        case 6:
            localctx = new DoubleLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 2788;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.MINUS) {
                this.state = 2787;
                this.match(SqlBaseParser.MINUS);
            }

            this.state = 2790;
            this.match(SqlBaseParser.DOUBLE_LITERAL);
            break;

        case 7:
            localctx = new BigDecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 2792;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.MINUS) {
                this.state = 2791;
                this.match(SqlBaseParser.MINUS);
            }

            this.state = 2794;
            this.match(SqlBaseParser.BIGDECIMAL_LITERAL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnsiNonReservedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_ansiNonReserved;
    return this;
}

AnsiNonReservedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnsiNonReservedContext.prototype.constructor = AnsiNonReservedContext;

AnsiNonReservedContext.prototype.ADD = function() {
    return this.getToken(SqlBaseParser.ADD, 0);
};

AnsiNonReservedContext.prototype.AFTER = function() {
    return this.getToken(SqlBaseParser.AFTER, 0);
};

AnsiNonReservedContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

AnsiNonReservedContext.prototype.ANALYZE = function() {
    return this.getToken(SqlBaseParser.ANALYZE, 0);
};

AnsiNonReservedContext.prototype.ARCHIVE = function() {
    return this.getToken(SqlBaseParser.ARCHIVE, 0);
};

AnsiNonReservedContext.prototype.ARRAY = function() {
    return this.getToken(SqlBaseParser.ARRAY, 0);
};

AnsiNonReservedContext.prototype.ASC = function() {
    return this.getToken(SqlBaseParser.ASC, 0);
};

AnsiNonReservedContext.prototype.AT = function() {
    return this.getToken(SqlBaseParser.AT, 0);
};

AnsiNonReservedContext.prototype.BETWEEN = function() {
    return this.getToken(SqlBaseParser.BETWEEN, 0);
};

AnsiNonReservedContext.prototype.BUCKET = function() {
    return this.getToken(SqlBaseParser.BUCKET, 0);
};

AnsiNonReservedContext.prototype.BUCKETS = function() {
    return this.getToken(SqlBaseParser.BUCKETS, 0);
};

AnsiNonReservedContext.prototype.BY = function() {
    return this.getToken(SqlBaseParser.BY, 0);
};

AnsiNonReservedContext.prototype.CACHE = function() {
    return this.getToken(SqlBaseParser.CACHE, 0);
};

AnsiNonReservedContext.prototype.CASCADE = function() {
    return this.getToken(SqlBaseParser.CASCADE, 0);
};

AnsiNonReservedContext.prototype.CHANGE = function() {
    return this.getToken(SqlBaseParser.CHANGE, 0);
};

AnsiNonReservedContext.prototype.CLEAR = function() {
    return this.getToken(SqlBaseParser.CLEAR, 0);
};

AnsiNonReservedContext.prototype.CLUSTER = function() {
    return this.getToken(SqlBaseParser.CLUSTER, 0);
};

AnsiNonReservedContext.prototype.CLUSTERED = function() {
    return this.getToken(SqlBaseParser.CLUSTERED, 0);
};

AnsiNonReservedContext.prototype.CODEGEN = function() {
    return this.getToken(SqlBaseParser.CODEGEN, 0);
};

AnsiNonReservedContext.prototype.COLLECTION = function() {
    return this.getToken(SqlBaseParser.COLLECTION, 0);
};

AnsiNonReservedContext.prototype.COLUMNS = function() {
    return this.getToken(SqlBaseParser.COLUMNS, 0);
};

AnsiNonReservedContext.prototype.COMMENT = function() {
    return this.getToken(SqlBaseParser.COMMENT, 0);
};

AnsiNonReservedContext.prototype.COMMIT = function() {
    return this.getToken(SqlBaseParser.COMMIT, 0);
};

AnsiNonReservedContext.prototype.COMPACT = function() {
    return this.getToken(SqlBaseParser.COMPACT, 0);
};

AnsiNonReservedContext.prototype.COMPACTIONS = function() {
    return this.getToken(SqlBaseParser.COMPACTIONS, 0);
};

AnsiNonReservedContext.prototype.COMPUTE = function() {
    return this.getToken(SqlBaseParser.COMPUTE, 0);
};

AnsiNonReservedContext.prototype.CONCATENATE = function() {
    return this.getToken(SqlBaseParser.CONCATENATE, 0);
};

AnsiNonReservedContext.prototype.COST = function() {
    return this.getToken(SqlBaseParser.COST, 0);
};

AnsiNonReservedContext.prototype.CUBE = function() {
    return this.getToken(SqlBaseParser.CUBE, 0);
};

AnsiNonReservedContext.prototype.CURRENT = function() {
    return this.getToken(SqlBaseParser.CURRENT, 0);
};

AnsiNonReservedContext.prototype.DATA = function() {
    return this.getToken(SqlBaseParser.DATA, 0);
};

AnsiNonReservedContext.prototype.DATABASE = function() {
    return this.getToken(SqlBaseParser.DATABASE, 0);
};

AnsiNonReservedContext.prototype.DATABASES = function() {
    return this.getToken(SqlBaseParser.DATABASES, 0);
};

AnsiNonReservedContext.prototype.DAYS = function() {
    return this.getToken(SqlBaseParser.DAYS, 0);
};

AnsiNonReservedContext.prototype.DBPROPERTIES = function() {
    return this.getToken(SqlBaseParser.DBPROPERTIES, 0);
};

AnsiNonReservedContext.prototype.DEFINED = function() {
    return this.getToken(SqlBaseParser.DEFINED, 0);
};

AnsiNonReservedContext.prototype.DELETE = function() {
    return this.getToken(SqlBaseParser.DELETE, 0);
};

AnsiNonReservedContext.prototype.DELIMITED = function() {
    return this.getToken(SqlBaseParser.DELIMITED, 0);
};

AnsiNonReservedContext.prototype.DESC = function() {
    return this.getToken(SqlBaseParser.DESC, 0);
};

AnsiNonReservedContext.prototype.DESCRIBE = function() {
    return this.getToken(SqlBaseParser.DESCRIBE, 0);
};

AnsiNonReservedContext.prototype.DFS = function() {
    return this.getToken(SqlBaseParser.DFS, 0);
};

AnsiNonReservedContext.prototype.DIRECTORIES = function() {
    return this.getToken(SqlBaseParser.DIRECTORIES, 0);
};

AnsiNonReservedContext.prototype.DIRECTORY = function() {
    return this.getToken(SqlBaseParser.DIRECTORY, 0);
};

AnsiNonReservedContext.prototype.DISTRIBUTE = function() {
    return this.getToken(SqlBaseParser.DISTRIBUTE, 0);
};

AnsiNonReservedContext.prototype.DIV = function() {
    return this.getToken(SqlBaseParser.DIV, 0);
};

AnsiNonReservedContext.prototype.DROP = function() {
    return this.getToken(SqlBaseParser.DROP, 0);
};

AnsiNonReservedContext.prototype.ESCAPED = function() {
    return this.getToken(SqlBaseParser.ESCAPED, 0);
};

AnsiNonReservedContext.prototype.EXCHANGE = function() {
    return this.getToken(SqlBaseParser.EXCHANGE, 0);
};

AnsiNonReservedContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

AnsiNonReservedContext.prototype.EXPLAIN = function() {
    return this.getToken(SqlBaseParser.EXPLAIN, 0);
};

AnsiNonReservedContext.prototype.EXPORT = function() {
    return this.getToken(SqlBaseParser.EXPORT, 0);
};

AnsiNonReservedContext.prototype.EXTENDED = function() {
    return this.getToken(SqlBaseParser.EXTENDED, 0);
};

AnsiNonReservedContext.prototype.EXTERNAL = function() {
    return this.getToken(SqlBaseParser.EXTERNAL, 0);
};

AnsiNonReservedContext.prototype.EXTRACT = function() {
    return this.getToken(SqlBaseParser.EXTRACT, 0);
};

AnsiNonReservedContext.prototype.FIELDS = function() {
    return this.getToken(SqlBaseParser.FIELDS, 0);
};

AnsiNonReservedContext.prototype.FILEFORMAT = function() {
    return this.getToken(SqlBaseParser.FILEFORMAT, 0);
};

AnsiNonReservedContext.prototype.FIRST = function() {
    return this.getToken(SqlBaseParser.FIRST, 0);
};

AnsiNonReservedContext.prototype.FOLLOWING = function() {
    return this.getToken(SqlBaseParser.FOLLOWING, 0);
};

AnsiNonReservedContext.prototype.FORMAT = function() {
    return this.getToken(SqlBaseParser.FORMAT, 0);
};

AnsiNonReservedContext.prototype.FORMATTED = function() {
    return this.getToken(SqlBaseParser.FORMATTED, 0);
};

AnsiNonReservedContext.prototype.FUNCTION = function() {
    return this.getToken(SqlBaseParser.FUNCTION, 0);
};

AnsiNonReservedContext.prototype.FUNCTIONS = function() {
    return this.getToken(SqlBaseParser.FUNCTIONS, 0);
};

AnsiNonReservedContext.prototype.GLOBAL = function() {
    return this.getToken(SqlBaseParser.GLOBAL, 0);
};

AnsiNonReservedContext.prototype.GROUPING = function() {
    return this.getToken(SqlBaseParser.GROUPING, 0);
};

AnsiNonReservedContext.prototype.HOURS = function() {
    return this.getToken(SqlBaseParser.HOURS, 0);
};

AnsiNonReservedContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

AnsiNonReservedContext.prototype.IGNORE = function() {
    return this.getToken(SqlBaseParser.IGNORE, 0);
};

AnsiNonReservedContext.prototype.IMPORT = function() {
    return this.getToken(SqlBaseParser.IMPORT, 0);
};

AnsiNonReservedContext.prototype.INDEX = function() {
    return this.getToken(SqlBaseParser.INDEX, 0);
};

AnsiNonReservedContext.prototype.INDEXES = function() {
    return this.getToken(SqlBaseParser.INDEXES, 0);
};

AnsiNonReservedContext.prototype.INPATH = function() {
    return this.getToken(SqlBaseParser.INPATH, 0);
};

AnsiNonReservedContext.prototype.INPUTFORMAT = function() {
    return this.getToken(SqlBaseParser.INPUTFORMAT, 0);
};

AnsiNonReservedContext.prototype.INSERT = function() {
    return this.getToken(SqlBaseParser.INSERT, 0);
};

AnsiNonReservedContext.prototype.INTERVAL = function() {
    return this.getToken(SqlBaseParser.INTERVAL, 0);
};

AnsiNonReservedContext.prototype.ITEMS = function() {
    return this.getToken(SqlBaseParser.ITEMS, 0);
};

AnsiNonReservedContext.prototype.KEYS = function() {
    return this.getToken(SqlBaseParser.KEYS, 0);
};

AnsiNonReservedContext.prototype.LAST = function() {
    return this.getToken(SqlBaseParser.LAST, 0);
};

AnsiNonReservedContext.prototype.LATERAL = function() {
    return this.getToken(SqlBaseParser.LATERAL, 0);
};

AnsiNonReservedContext.prototype.LAZY = function() {
    return this.getToken(SqlBaseParser.LAZY, 0);
};

AnsiNonReservedContext.prototype.LIKE = function() {
    return this.getToken(SqlBaseParser.LIKE, 0);
};

AnsiNonReservedContext.prototype.LIMIT = function() {
    return this.getToken(SqlBaseParser.LIMIT, 0);
};

AnsiNonReservedContext.prototype.LINES = function() {
    return this.getToken(SqlBaseParser.LINES, 0);
};

AnsiNonReservedContext.prototype.LIST = function() {
    return this.getToken(SqlBaseParser.LIST, 0);
};

AnsiNonReservedContext.prototype.LOAD = function() {
    return this.getToken(SqlBaseParser.LOAD, 0);
};

AnsiNonReservedContext.prototype.LOCAL = function() {
    return this.getToken(SqlBaseParser.LOCAL, 0);
};

AnsiNonReservedContext.prototype.LOCATION = function() {
    return this.getToken(SqlBaseParser.LOCATION, 0);
};

AnsiNonReservedContext.prototype.LOCK = function() {
    return this.getToken(SqlBaseParser.LOCK, 0);
};

AnsiNonReservedContext.prototype.LOCKS = function() {
    return this.getToken(SqlBaseParser.LOCKS, 0);
};

AnsiNonReservedContext.prototype.LOGICAL = function() {
    return this.getToken(SqlBaseParser.LOGICAL, 0);
};

AnsiNonReservedContext.prototype.MACRO = function() {
    return this.getToken(SqlBaseParser.MACRO, 0);
};

AnsiNonReservedContext.prototype.MAP = function() {
    return this.getToken(SqlBaseParser.MAP, 0);
};

AnsiNonReservedContext.prototype.MICROSECOND = function() {
    return this.getToken(SqlBaseParser.MICROSECOND, 0);
};

AnsiNonReservedContext.prototype.MICROSECONDS = function() {
    return this.getToken(SqlBaseParser.MICROSECONDS, 0);
};

AnsiNonReservedContext.prototype.MILLISECOND = function() {
    return this.getToken(SqlBaseParser.MILLISECOND, 0);
};

AnsiNonReservedContext.prototype.MILLISECONDS = function() {
    return this.getToken(SqlBaseParser.MILLISECONDS, 0);
};

AnsiNonReservedContext.prototype.MINUTES = function() {
    return this.getToken(SqlBaseParser.MINUTES, 0);
};

AnsiNonReservedContext.prototype.MONTHS = function() {
    return this.getToken(SqlBaseParser.MONTHS, 0);
};

AnsiNonReservedContext.prototype.MSCK = function() {
    return this.getToken(SqlBaseParser.MSCK, 0);
};

AnsiNonReservedContext.prototype.NAMESPACE = function() {
    return this.getToken(SqlBaseParser.NAMESPACE, 0);
};

AnsiNonReservedContext.prototype.NAMESPACES = function() {
    return this.getToken(SqlBaseParser.NAMESPACES, 0);
};

AnsiNonReservedContext.prototype.NO = function() {
    return this.getToken(SqlBaseParser.NO, 0);
};

AnsiNonReservedContext.prototype.NULLS = function() {
    return this.getToken(SqlBaseParser.NULLS, 0);
};

AnsiNonReservedContext.prototype.OF = function() {
    return this.getToken(SqlBaseParser.OF, 0);
};

AnsiNonReservedContext.prototype.OPTION = function() {
    return this.getToken(SqlBaseParser.OPTION, 0);
};

AnsiNonReservedContext.prototype.OPTIONS = function() {
    return this.getToken(SqlBaseParser.OPTIONS, 0);
};

AnsiNonReservedContext.prototype.OUT = function() {
    return this.getToken(SqlBaseParser.OUT, 0);
};

AnsiNonReservedContext.prototype.OUTPUTFORMAT = function() {
    return this.getToken(SqlBaseParser.OUTPUTFORMAT, 0);
};

AnsiNonReservedContext.prototype.OVER = function() {
    return this.getToken(SqlBaseParser.OVER, 0);
};

AnsiNonReservedContext.prototype.OVERLAY = function() {
    return this.getToken(SqlBaseParser.OVERLAY, 0);
};

AnsiNonReservedContext.prototype.OVERWRITE = function() {
    return this.getToken(SqlBaseParser.OVERWRITE, 0);
};

AnsiNonReservedContext.prototype.PARTITION = function() {
    return this.getToken(SqlBaseParser.PARTITION, 0);
};

AnsiNonReservedContext.prototype.PARTITIONED = function() {
    return this.getToken(SqlBaseParser.PARTITIONED, 0);
};

AnsiNonReservedContext.prototype.PARTITIONS = function() {
    return this.getToken(SqlBaseParser.PARTITIONS, 0);
};

AnsiNonReservedContext.prototype.PERCENTLIT = function() {
    return this.getToken(SqlBaseParser.PERCENTLIT, 0);
};

AnsiNonReservedContext.prototype.PIVOT = function() {
    return this.getToken(SqlBaseParser.PIVOT, 0);
};

AnsiNonReservedContext.prototype.PLACING = function() {
    return this.getToken(SqlBaseParser.PLACING, 0);
};

AnsiNonReservedContext.prototype.POSITION = function() {
    return this.getToken(SqlBaseParser.POSITION, 0);
};

AnsiNonReservedContext.prototype.PRECEDING = function() {
    return this.getToken(SqlBaseParser.PRECEDING, 0);
};

AnsiNonReservedContext.prototype.PRINCIPALS = function() {
    return this.getToken(SqlBaseParser.PRINCIPALS, 0);
};

AnsiNonReservedContext.prototype.PURGE = function() {
    return this.getToken(SqlBaseParser.PURGE, 0);
};

AnsiNonReservedContext.prototype.QUERY = function() {
    return this.getToken(SqlBaseParser.QUERY, 0);
};

AnsiNonReservedContext.prototype.RANGE = function() {
    return this.getToken(SqlBaseParser.RANGE, 0);
};

AnsiNonReservedContext.prototype.RECORDREADER = function() {
    return this.getToken(SqlBaseParser.RECORDREADER, 0);
};

AnsiNonReservedContext.prototype.RECORDWRITER = function() {
    return this.getToken(SqlBaseParser.RECORDWRITER, 0);
};

AnsiNonReservedContext.prototype.RECOVER = function() {
    return this.getToken(SqlBaseParser.RECOVER, 0);
};

AnsiNonReservedContext.prototype.REDUCE = function() {
    return this.getToken(SqlBaseParser.REDUCE, 0);
};

AnsiNonReservedContext.prototype.REFRESH = function() {
    return this.getToken(SqlBaseParser.REFRESH, 0);
};

AnsiNonReservedContext.prototype.RENAME = function() {
    return this.getToken(SqlBaseParser.RENAME, 0);
};

AnsiNonReservedContext.prototype.REPAIR = function() {
    return this.getToken(SqlBaseParser.REPAIR, 0);
};

AnsiNonReservedContext.prototype.REPLACE = function() {
    return this.getToken(SqlBaseParser.REPLACE, 0);
};

AnsiNonReservedContext.prototype.RESET = function() {
    return this.getToken(SqlBaseParser.RESET, 0);
};

AnsiNonReservedContext.prototype.RESPECT = function() {
    return this.getToken(SqlBaseParser.RESPECT, 0);
};

AnsiNonReservedContext.prototype.RESTRICT = function() {
    return this.getToken(SqlBaseParser.RESTRICT, 0);
};

AnsiNonReservedContext.prototype.REVOKE = function() {
    return this.getToken(SqlBaseParser.REVOKE, 0);
};

AnsiNonReservedContext.prototype.RLIKE = function() {
    return this.getToken(SqlBaseParser.RLIKE, 0);
};

AnsiNonReservedContext.prototype.ROLE = function() {
    return this.getToken(SqlBaseParser.ROLE, 0);
};

AnsiNonReservedContext.prototype.ROLES = function() {
    return this.getToken(SqlBaseParser.ROLES, 0);
};

AnsiNonReservedContext.prototype.ROLLBACK = function() {
    return this.getToken(SqlBaseParser.ROLLBACK, 0);
};

AnsiNonReservedContext.prototype.ROLLUP = function() {
    return this.getToken(SqlBaseParser.ROLLUP, 0);
};

AnsiNonReservedContext.prototype.ROW = function() {
    return this.getToken(SqlBaseParser.ROW, 0);
};

AnsiNonReservedContext.prototype.ROWS = function() {
    return this.getToken(SqlBaseParser.ROWS, 0);
};

AnsiNonReservedContext.prototype.SCHEMA = function() {
    return this.getToken(SqlBaseParser.SCHEMA, 0);
};

AnsiNonReservedContext.prototype.SECONDS = function() {
    return this.getToken(SqlBaseParser.SECONDS, 0);
};

AnsiNonReservedContext.prototype.SEPARATED = function() {
    return this.getToken(SqlBaseParser.SEPARATED, 0);
};

AnsiNonReservedContext.prototype.SERDE = function() {
    return this.getToken(SqlBaseParser.SERDE, 0);
};

AnsiNonReservedContext.prototype.SERDEPROPERTIES = function() {
    return this.getToken(SqlBaseParser.SERDEPROPERTIES, 0);
};

AnsiNonReservedContext.prototype.SET = function() {
    return this.getToken(SqlBaseParser.SET, 0);
};

AnsiNonReservedContext.prototype.SETS = function() {
    return this.getToken(SqlBaseParser.SETS, 0);
};

AnsiNonReservedContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

AnsiNonReservedContext.prototype.SKEWED = function() {
    return this.getToken(SqlBaseParser.SKEWED, 0);
};

AnsiNonReservedContext.prototype.SORT = function() {
    return this.getToken(SqlBaseParser.SORT, 0);
};

AnsiNonReservedContext.prototype.SORTED = function() {
    return this.getToken(SqlBaseParser.SORTED, 0);
};

AnsiNonReservedContext.prototype.START = function() {
    return this.getToken(SqlBaseParser.START, 0);
};

AnsiNonReservedContext.prototype.STATISTICS = function() {
    return this.getToken(SqlBaseParser.STATISTICS, 0);
};

AnsiNonReservedContext.prototype.STORED = function() {
    return this.getToken(SqlBaseParser.STORED, 0);
};

AnsiNonReservedContext.prototype.STRATIFY = function() {
    return this.getToken(SqlBaseParser.STRATIFY, 0);
};

AnsiNonReservedContext.prototype.STRUCT = function() {
    return this.getToken(SqlBaseParser.STRUCT, 0);
};

AnsiNonReservedContext.prototype.SUBSTR = function() {
    return this.getToken(SqlBaseParser.SUBSTR, 0);
};

AnsiNonReservedContext.prototype.SUBSTRING = function() {
    return this.getToken(SqlBaseParser.SUBSTRING, 0);
};

AnsiNonReservedContext.prototype.TABLES = function() {
    return this.getToken(SqlBaseParser.TABLES, 0);
};

AnsiNonReservedContext.prototype.TABLESAMPLE = function() {
    return this.getToken(SqlBaseParser.TABLESAMPLE, 0);
};

AnsiNonReservedContext.prototype.TBLPROPERTIES = function() {
    return this.getToken(SqlBaseParser.TBLPROPERTIES, 0);
};

AnsiNonReservedContext.prototype.TEMPORARY = function() {
    return this.getToken(SqlBaseParser.TEMPORARY, 0);
};

AnsiNonReservedContext.prototype.TERMINATED = function() {
    return this.getToken(SqlBaseParser.TERMINATED, 0);
};

AnsiNonReservedContext.prototype.TOUCH = function() {
    return this.getToken(SqlBaseParser.TOUCH, 0);
};

AnsiNonReservedContext.prototype.TRANSACTION = function() {
    return this.getToken(SqlBaseParser.TRANSACTION, 0);
};

AnsiNonReservedContext.prototype.TRANSACTIONS = function() {
    return this.getToken(SqlBaseParser.TRANSACTIONS, 0);
};

AnsiNonReservedContext.prototype.TRANSFORM = function() {
    return this.getToken(SqlBaseParser.TRANSFORM, 0);
};

AnsiNonReservedContext.prototype.TRIM = function() {
    return this.getToken(SqlBaseParser.TRIM, 0);
};

AnsiNonReservedContext.prototype.TRUE = function() {
    return this.getToken(SqlBaseParser.TRUE, 0);
};

AnsiNonReservedContext.prototype.TRUNCATE = function() {
    return this.getToken(SqlBaseParser.TRUNCATE, 0);
};

AnsiNonReservedContext.prototype.UNARCHIVE = function() {
    return this.getToken(SqlBaseParser.UNARCHIVE, 0);
};

AnsiNonReservedContext.prototype.UNBOUNDED = function() {
    return this.getToken(SqlBaseParser.UNBOUNDED, 0);
};

AnsiNonReservedContext.prototype.UNCACHE = function() {
    return this.getToken(SqlBaseParser.UNCACHE, 0);
};

AnsiNonReservedContext.prototype.UNLOCK = function() {
    return this.getToken(SqlBaseParser.UNLOCK, 0);
};

AnsiNonReservedContext.prototype.UNSET = function() {
    return this.getToken(SqlBaseParser.UNSET, 0);
};

AnsiNonReservedContext.prototype.UPDATE = function() {
    return this.getToken(SqlBaseParser.UPDATE, 0);
};

AnsiNonReservedContext.prototype.USE = function() {
    return this.getToken(SqlBaseParser.USE, 0);
};

AnsiNonReservedContext.prototype.VALUES = function() {
    return this.getToken(SqlBaseParser.VALUES, 0);
};

AnsiNonReservedContext.prototype.VIEW = function() {
    return this.getToken(SqlBaseParser.VIEW, 0);
};

AnsiNonReservedContext.prototype.WEEK = function() {
    return this.getToken(SqlBaseParser.WEEK, 0);
};

AnsiNonReservedContext.prototype.WEEKS = function() {
    return this.getToken(SqlBaseParser.WEEKS, 0);
};

AnsiNonReservedContext.prototype.WINDOW = function() {
    return this.getToken(SqlBaseParser.WINDOW, 0);
};

AnsiNonReservedContext.prototype.YEARS = function() {
    return this.getToken(SqlBaseParser.YEARS, 0);
};




SqlBaseParser.AnsiNonReservedContext = AnsiNonReservedContext;

SqlBaseParser.prototype.ansiNonReserved = function() {

    var localctx = new AnsiNonReservedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, SqlBaseParser.RULE_ansiNonReserved);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2797;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AFTER) | (1 << SqlBaseParser.ALTER) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ARCHIVE) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.BETWEEN) | (1 << SqlBaseParser.BUCKET) | (1 << SqlBaseParser.BUCKETS) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.CACHE) | (1 << SqlBaseParser.CASCADE))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (SqlBaseParser.CHANGE - 34)) | (1 << (SqlBaseParser.CLEAR - 34)) | (1 << (SqlBaseParser.CLUSTER - 34)) | (1 << (SqlBaseParser.CLUSTERED - 34)) | (1 << (SqlBaseParser.CODEGEN - 34)) | (1 << (SqlBaseParser.COLLECTION - 34)) | (1 << (SqlBaseParser.COLUMNS - 34)) | (1 << (SqlBaseParser.COMMENT - 34)) | (1 << (SqlBaseParser.COMMIT - 34)) | (1 << (SqlBaseParser.COMPACT - 34)) | (1 << (SqlBaseParser.COMPACTIONS - 34)) | (1 << (SqlBaseParser.COMPUTE - 34)) | (1 << (SqlBaseParser.CONCATENATE - 34)) | (1 << (SqlBaseParser.COST - 34)) | (1 << (SqlBaseParser.CUBE - 34)) | (1 << (SqlBaseParser.CURRENT - 34)) | (1 << (SqlBaseParser.DATA - 34)) | (1 << (SqlBaseParser.DATABASE - 34)) | (1 << (SqlBaseParser.DATABASES - 34)) | (1 << (SqlBaseParser.DAYS - 34)) | (1 << (SqlBaseParser.DBPROPERTIES - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (SqlBaseParser.DEFINED - 66)) | (1 << (SqlBaseParser.DELETE - 66)) | (1 << (SqlBaseParser.DELIMITED - 66)) | (1 << (SqlBaseParser.DESC - 66)) | (1 << (SqlBaseParser.DESCRIBE - 66)) | (1 << (SqlBaseParser.DFS - 66)) | (1 << (SqlBaseParser.DIRECTORIES - 66)) | (1 << (SqlBaseParser.DIRECTORY - 66)) | (1 << (SqlBaseParser.DISTRIBUTE - 66)) | (1 << (SqlBaseParser.DROP - 66)) | (1 << (SqlBaseParser.ESCAPED - 66)) | (1 << (SqlBaseParser.EXCHANGE - 66)) | (1 << (SqlBaseParser.EXISTS - 66)) | (1 << (SqlBaseParser.EXPLAIN - 66)) | (1 << (SqlBaseParser.EXPORT - 66)) | (1 << (SqlBaseParser.EXTENDED - 66)) | (1 << (SqlBaseParser.EXTERNAL - 66)) | (1 << (SqlBaseParser.EXTRACT - 66)) | (1 << (SqlBaseParser.FIELDS - 66)) | (1 << (SqlBaseParser.FILEFORMAT - 66)) | (1 << (SqlBaseParser.FIRST - 66)) | (1 << (SqlBaseParser.FOLLOWING - 66)) | (1 << (SqlBaseParser.FORMAT - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (SqlBaseParser.FORMATTED - 98)) | (1 << (SqlBaseParser.FUNCTION - 98)) | (1 << (SqlBaseParser.FUNCTIONS - 98)) | (1 << (SqlBaseParser.GLOBAL - 98)) | (1 << (SqlBaseParser.GROUPING - 98)) | (1 << (SqlBaseParser.HOURS - 98)) | (1 << (SqlBaseParser.IF - 98)) | (1 << (SqlBaseParser.IGNORE - 98)) | (1 << (SqlBaseParser.IMPORT - 98)) | (1 << (SqlBaseParser.INDEX - 98)) | (1 << (SqlBaseParser.INDEXES - 98)) | (1 << (SqlBaseParser.INPATH - 98)) | (1 << (SqlBaseParser.INPUTFORMAT - 98)) | (1 << (SqlBaseParser.INSERT - 98)) | (1 << (SqlBaseParser.INTERVAL - 98)) | (1 << (SqlBaseParser.ITEMS - 98)) | (1 << (SqlBaseParser.KEYS - 98)) | (1 << (SqlBaseParser.LAST - 98)) | (1 << (SqlBaseParser.LATERAL - 98)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (SqlBaseParser.LAZY - 130)) | (1 << (SqlBaseParser.LIKE - 130)) | (1 << (SqlBaseParser.LIMIT - 130)) | (1 << (SqlBaseParser.LINES - 130)) | (1 << (SqlBaseParser.LIST - 130)) | (1 << (SqlBaseParser.LOAD - 130)) | (1 << (SqlBaseParser.LOCAL - 130)) | (1 << (SqlBaseParser.LOCATION - 130)) | (1 << (SqlBaseParser.LOCK - 130)) | (1 << (SqlBaseParser.LOCKS - 130)) | (1 << (SqlBaseParser.LOGICAL - 130)) | (1 << (SqlBaseParser.MACRO - 130)) | (1 << (SqlBaseParser.MAP - 130)) | (1 << (SqlBaseParser.MICROSECOND - 130)) | (1 << (SqlBaseParser.MICROSECONDS - 130)) | (1 << (SqlBaseParser.MILLISECOND - 130)) | (1 << (SqlBaseParser.MILLISECONDS - 130)) | (1 << (SqlBaseParser.MINUTES - 130)) | (1 << (SqlBaseParser.MONTHS - 130)) | (1 << (SqlBaseParser.MSCK - 130)) | (1 << (SqlBaseParser.NAMESPACE - 130)) | (1 << (SqlBaseParser.NAMESPACES - 130)) | (1 << (SqlBaseParser.NO - 130)) | (1 << (SqlBaseParser.NULLS - 130)) | (1 << (SqlBaseParser.OF - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (SqlBaseParser.OPTION - 164)) | (1 << (SqlBaseParser.OPTIONS - 164)) | (1 << (SqlBaseParser.OUT - 164)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 164)) | (1 << (SqlBaseParser.OVER - 164)) | (1 << (SqlBaseParser.OVERLAY - 164)) | (1 << (SqlBaseParser.OVERWRITE - 164)) | (1 << (SqlBaseParser.PARTITION - 164)) | (1 << (SqlBaseParser.PARTITIONED - 164)) | (1 << (SqlBaseParser.PARTITIONS - 164)) | (1 << (SqlBaseParser.PERCENTLIT - 164)) | (1 << (SqlBaseParser.PIVOT - 164)) | (1 << (SqlBaseParser.PLACING - 164)) | (1 << (SqlBaseParser.POSITION - 164)) | (1 << (SqlBaseParser.PRECEDING - 164)) | (1 << (SqlBaseParser.PRINCIPALS - 164)) | (1 << (SqlBaseParser.PURGE - 164)) | (1 << (SqlBaseParser.QUERY - 164)) | (1 << (SqlBaseParser.RANGE - 164)) | (1 << (SqlBaseParser.RECORDREADER - 164)) | (1 << (SqlBaseParser.RECORDWRITER - 164)) | (1 << (SqlBaseParser.RECOVER - 164)) | (1 << (SqlBaseParser.REDUCE - 164)) | (1 << (SqlBaseParser.REFRESH - 164)) | (1 << (SqlBaseParser.RENAME - 164)) | (1 << (SqlBaseParser.REPAIR - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (SqlBaseParser.REPLACE - 196)) | (1 << (SqlBaseParser.RESET - 196)) | (1 << (SqlBaseParser.RESPECT - 196)) | (1 << (SqlBaseParser.RESTRICT - 196)) | (1 << (SqlBaseParser.REVOKE - 196)) | (1 << (SqlBaseParser.RLIKE - 196)) | (1 << (SqlBaseParser.ROLE - 196)) | (1 << (SqlBaseParser.ROLES - 196)) | (1 << (SqlBaseParser.ROLLBACK - 196)) | (1 << (SqlBaseParser.ROLLUP - 196)) | (1 << (SqlBaseParser.ROW - 196)) | (1 << (SqlBaseParser.ROWS - 196)) | (1 << (SqlBaseParser.SCHEMA - 196)) | (1 << (SqlBaseParser.SECONDS - 196)) | (1 << (SqlBaseParser.SEPARATED - 196)) | (1 << (SqlBaseParser.SERDE - 196)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 196)) | (1 << (SqlBaseParser.SET - 196)) | (1 << (SqlBaseParser.SETS - 196)) | (1 << (SqlBaseParser.SHOW - 196)) | (1 << (SqlBaseParser.SKEWED - 196)) | (1 << (SqlBaseParser.SORT - 196)) | (1 << (SqlBaseParser.SORTED - 196)) | (1 << (SqlBaseParser.START - 196)) | (1 << (SqlBaseParser.STATISTICS - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (SqlBaseParser.STORED - 228)) | (1 << (SqlBaseParser.STRATIFY - 228)) | (1 << (SqlBaseParser.STRUCT - 228)) | (1 << (SqlBaseParser.SUBSTR - 228)) | (1 << (SqlBaseParser.SUBSTRING - 228)) | (1 << (SqlBaseParser.TABLES - 228)) | (1 << (SqlBaseParser.TABLESAMPLE - 228)) | (1 << (SqlBaseParser.TBLPROPERTIES - 228)) | (1 << (SqlBaseParser.TEMPORARY - 228)) | (1 << (SqlBaseParser.TERMINATED - 228)) | (1 << (SqlBaseParser.TOUCH - 228)) | (1 << (SqlBaseParser.TRANSACTION - 228)) | (1 << (SqlBaseParser.TRANSACTIONS - 228)) | (1 << (SqlBaseParser.TRANSFORM - 228)) | (1 << (SqlBaseParser.TRIM - 228)) | (1 << (SqlBaseParser.TRUE - 228)) | (1 << (SqlBaseParser.TRUNCATE - 228)) | (1 << (SqlBaseParser.UNARCHIVE - 228)) | (1 << (SqlBaseParser.UNBOUNDED - 228)) | (1 << (SqlBaseParser.UNCACHE - 228)) | (1 << (SqlBaseParser.UNLOCK - 228)) | (1 << (SqlBaseParser.UNSET - 228)) | (1 << (SqlBaseParser.UPDATE - 228)) | (1 << (SqlBaseParser.USE - 228)))) !== 0) || ((((_la - 262)) & ~0x1f) == 0 && ((1 << (_la - 262)) & ((1 << (SqlBaseParser.VALUES - 262)) | (1 << (SqlBaseParser.VIEW - 262)) | (1 << (SqlBaseParser.WEEK - 262)) | (1 << (SqlBaseParser.WEEKS - 262)) | (1 << (SqlBaseParser.WINDOW - 262)) | (1 << (SqlBaseParser.YEARS - 262)) | (1 << (SqlBaseParser.DIV - 262)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StrictNonReservedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_strictNonReserved;
    return this;
}

StrictNonReservedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StrictNonReservedContext.prototype.constructor = StrictNonReservedContext;

StrictNonReservedContext.prototype.ANTI = function() {
    return this.getToken(SqlBaseParser.ANTI, 0);
};

StrictNonReservedContext.prototype.CROSS = function() {
    return this.getToken(SqlBaseParser.CROSS, 0);
};

StrictNonReservedContext.prototype.EXCEPT = function() {
    return this.getToken(SqlBaseParser.EXCEPT, 0);
};

StrictNonReservedContext.prototype.FULL = function() {
    return this.getToken(SqlBaseParser.FULL, 0);
};

StrictNonReservedContext.prototype.INNER = function() {
    return this.getToken(SqlBaseParser.INNER, 0);
};

StrictNonReservedContext.prototype.INTERSECT = function() {
    return this.getToken(SqlBaseParser.INTERSECT, 0);
};

StrictNonReservedContext.prototype.JOIN = function() {
    return this.getToken(SqlBaseParser.JOIN, 0);
};

StrictNonReservedContext.prototype.LEFT = function() {
    return this.getToken(SqlBaseParser.LEFT, 0);
};

StrictNonReservedContext.prototype.NATURAL = function() {
    return this.getToken(SqlBaseParser.NATURAL, 0);
};

StrictNonReservedContext.prototype.ON = function() {
    return this.getToken(SqlBaseParser.ON, 0);
};

StrictNonReservedContext.prototype.RIGHT = function() {
    return this.getToken(SqlBaseParser.RIGHT, 0);
};

StrictNonReservedContext.prototype.SEMI = function() {
    return this.getToken(SqlBaseParser.SEMI, 0);
};

StrictNonReservedContext.prototype.SETMINUS = function() {
    return this.getToken(SqlBaseParser.SETMINUS, 0);
};

StrictNonReservedContext.prototype.UNION = function() {
    return this.getToken(SqlBaseParser.UNION, 0);
};

StrictNonReservedContext.prototype.USING = function() {
    return this.getToken(SqlBaseParser.USING, 0);
};




SqlBaseParser.StrictNonReservedContext = StrictNonReservedContext;

SqlBaseParser.prototype.strictNonReserved = function() {

    var localctx = new StrictNonReservedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, SqlBaseParser.RULE_strictNonReserved);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2799;
        _la = this._input.LA(1);
        if(!(_la===SqlBaseParser.ANTI || _la===SqlBaseParser.CROSS || _la===SqlBaseParser.EXCEPT || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (SqlBaseParser.FULL - 100)) | (1 << (SqlBaseParser.INNER - 100)) | (1 << (SqlBaseParser.INTERSECT - 100)) | (1 << (SqlBaseParser.JOIN - 100)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (SqlBaseParser.LEFT - 132)) | (1 << (SqlBaseParser.NATURAL - 132)) | (1 << (SqlBaseParser.ON - 132)))) !== 0) || ((((_la - 201)) & ~0x1f) == 0 && ((1 << (_la - 201)) & ((1 << (SqlBaseParser.RIGHT - 201)) | (1 << (SqlBaseParser.SEMI - 201)) | (1 << (SqlBaseParser.SETMINUS - 201)))) !== 0) || _la===SqlBaseParser.UNION || _la===SqlBaseParser.USING)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NonReservedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_nonReserved;
    return this;
}

NonReservedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NonReservedContext.prototype.constructor = NonReservedContext;

NonReservedContext.prototype.ADD = function() {
    return this.getToken(SqlBaseParser.ADD, 0);
};

NonReservedContext.prototype.AFTER = function() {
    return this.getToken(SqlBaseParser.AFTER, 0);
};

NonReservedContext.prototype.ALL = function() {
    return this.getToken(SqlBaseParser.ALL, 0);
};

NonReservedContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

NonReservedContext.prototype.ANALYZE = function() {
    return this.getToken(SqlBaseParser.ANALYZE, 0);
};

NonReservedContext.prototype.AND = function() {
    return this.getToken(SqlBaseParser.AND, 0);
};

NonReservedContext.prototype.ANY = function() {
    return this.getToken(SqlBaseParser.ANY, 0);
};

NonReservedContext.prototype.ARCHIVE = function() {
    return this.getToken(SqlBaseParser.ARCHIVE, 0);
};

NonReservedContext.prototype.ARRAY = function() {
    return this.getToken(SqlBaseParser.ARRAY, 0);
};

NonReservedContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

NonReservedContext.prototype.ASC = function() {
    return this.getToken(SqlBaseParser.ASC, 0);
};

NonReservedContext.prototype.AT = function() {
    return this.getToken(SqlBaseParser.AT, 0);
};

NonReservedContext.prototype.AUTHORIZATION = function() {
    return this.getToken(SqlBaseParser.AUTHORIZATION, 0);
};

NonReservedContext.prototype.BETWEEN = function() {
    return this.getToken(SqlBaseParser.BETWEEN, 0);
};

NonReservedContext.prototype.BOTH = function() {
    return this.getToken(SqlBaseParser.BOTH, 0);
};

NonReservedContext.prototype.BUCKET = function() {
    return this.getToken(SqlBaseParser.BUCKET, 0);
};

NonReservedContext.prototype.BUCKETS = function() {
    return this.getToken(SqlBaseParser.BUCKETS, 0);
};

NonReservedContext.prototype.BY = function() {
    return this.getToken(SqlBaseParser.BY, 0);
};

NonReservedContext.prototype.CACHE = function() {
    return this.getToken(SqlBaseParser.CACHE, 0);
};

NonReservedContext.prototype.CASCADE = function() {
    return this.getToken(SqlBaseParser.CASCADE, 0);
};

NonReservedContext.prototype.CASE = function() {
    return this.getToken(SqlBaseParser.CASE, 0);
};

NonReservedContext.prototype.CAST = function() {
    return this.getToken(SqlBaseParser.CAST, 0);
};

NonReservedContext.prototype.CHANGE = function() {
    return this.getToken(SqlBaseParser.CHANGE, 0);
};

NonReservedContext.prototype.CHECK = function() {
    return this.getToken(SqlBaseParser.CHECK, 0);
};

NonReservedContext.prototype.CLEAR = function() {
    return this.getToken(SqlBaseParser.CLEAR, 0);
};

NonReservedContext.prototype.CLUSTER = function() {
    return this.getToken(SqlBaseParser.CLUSTER, 0);
};

NonReservedContext.prototype.CLUSTERED = function() {
    return this.getToken(SqlBaseParser.CLUSTERED, 0);
};

NonReservedContext.prototype.CODEGEN = function() {
    return this.getToken(SqlBaseParser.CODEGEN, 0);
};

NonReservedContext.prototype.COLLATE = function() {
    return this.getToken(SqlBaseParser.COLLATE, 0);
};

NonReservedContext.prototype.COLLECTION = function() {
    return this.getToken(SqlBaseParser.COLLECTION, 0);
};

NonReservedContext.prototype.COLUMN = function() {
    return this.getToken(SqlBaseParser.COLUMN, 0);
};

NonReservedContext.prototype.COLUMNS = function() {
    return this.getToken(SqlBaseParser.COLUMNS, 0);
};

NonReservedContext.prototype.COMMENT = function() {
    return this.getToken(SqlBaseParser.COMMENT, 0);
};

NonReservedContext.prototype.COMMIT = function() {
    return this.getToken(SqlBaseParser.COMMIT, 0);
};

NonReservedContext.prototype.COMPACT = function() {
    return this.getToken(SqlBaseParser.COMPACT, 0);
};

NonReservedContext.prototype.COMPACTIONS = function() {
    return this.getToken(SqlBaseParser.COMPACTIONS, 0);
};

NonReservedContext.prototype.COMPUTE = function() {
    return this.getToken(SqlBaseParser.COMPUTE, 0);
};

NonReservedContext.prototype.CONCATENATE = function() {
    return this.getToken(SqlBaseParser.CONCATENATE, 0);
};

NonReservedContext.prototype.CONSTRAINT = function() {
    return this.getToken(SqlBaseParser.CONSTRAINT, 0);
};

NonReservedContext.prototype.COST = function() {
    return this.getToken(SqlBaseParser.COST, 0);
};

NonReservedContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

NonReservedContext.prototype.CUBE = function() {
    return this.getToken(SqlBaseParser.CUBE, 0);
};

NonReservedContext.prototype.CURRENT = function() {
    return this.getToken(SqlBaseParser.CURRENT, 0);
};

NonReservedContext.prototype.CURRENT_DATE = function() {
    return this.getToken(SqlBaseParser.CURRENT_DATE, 0);
};

NonReservedContext.prototype.CURRENT_TIME = function() {
    return this.getToken(SqlBaseParser.CURRENT_TIME, 0);
};

NonReservedContext.prototype.CURRENT_TIMESTAMP = function() {
    return this.getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0);
};

NonReservedContext.prototype.CURRENT_USER = function() {
    return this.getToken(SqlBaseParser.CURRENT_USER, 0);
};

NonReservedContext.prototype.DATA = function() {
    return this.getToken(SqlBaseParser.DATA, 0);
};

NonReservedContext.prototype.DATABASE = function() {
    return this.getToken(SqlBaseParser.DATABASE, 0);
};

NonReservedContext.prototype.DATABASES = function() {
    return this.getToken(SqlBaseParser.DATABASES, 0);
};

NonReservedContext.prototype.DAY = function() {
    return this.getToken(SqlBaseParser.DAY, 0);
};

NonReservedContext.prototype.DAYS = function() {
    return this.getToken(SqlBaseParser.DAYS, 0);
};

NonReservedContext.prototype.DBPROPERTIES = function() {
    return this.getToken(SqlBaseParser.DBPROPERTIES, 0);
};

NonReservedContext.prototype.DEFINED = function() {
    return this.getToken(SqlBaseParser.DEFINED, 0);
};

NonReservedContext.prototype.DELETE = function() {
    return this.getToken(SqlBaseParser.DELETE, 0);
};

NonReservedContext.prototype.DELIMITED = function() {
    return this.getToken(SqlBaseParser.DELIMITED, 0);
};

NonReservedContext.prototype.DESC = function() {
    return this.getToken(SqlBaseParser.DESC, 0);
};

NonReservedContext.prototype.DESCRIBE = function() {
    return this.getToken(SqlBaseParser.DESCRIBE, 0);
};

NonReservedContext.prototype.DFS = function() {
    return this.getToken(SqlBaseParser.DFS, 0);
};

NonReservedContext.prototype.DIRECTORIES = function() {
    return this.getToken(SqlBaseParser.DIRECTORIES, 0);
};

NonReservedContext.prototype.DIRECTORY = function() {
    return this.getToken(SqlBaseParser.DIRECTORY, 0);
};

NonReservedContext.prototype.DISTINCT = function() {
    return this.getToken(SqlBaseParser.DISTINCT, 0);
};

NonReservedContext.prototype.DISTRIBUTE = function() {
    return this.getToken(SqlBaseParser.DISTRIBUTE, 0);
};

NonReservedContext.prototype.DIV = function() {
    return this.getToken(SqlBaseParser.DIV, 0);
};

NonReservedContext.prototype.DROP = function() {
    return this.getToken(SqlBaseParser.DROP, 0);
};

NonReservedContext.prototype.ELSE = function() {
    return this.getToken(SqlBaseParser.ELSE, 0);
};

NonReservedContext.prototype.END = function() {
    return this.getToken(SqlBaseParser.END, 0);
};

NonReservedContext.prototype.ESCAPED = function() {
    return this.getToken(SqlBaseParser.ESCAPED, 0);
};

NonReservedContext.prototype.EXCHANGE = function() {
    return this.getToken(SqlBaseParser.EXCHANGE, 0);
};

NonReservedContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

NonReservedContext.prototype.EXPLAIN = function() {
    return this.getToken(SqlBaseParser.EXPLAIN, 0);
};

NonReservedContext.prototype.EXPORT = function() {
    return this.getToken(SqlBaseParser.EXPORT, 0);
};

NonReservedContext.prototype.EXTENDED = function() {
    return this.getToken(SqlBaseParser.EXTENDED, 0);
};

NonReservedContext.prototype.EXTERNAL = function() {
    return this.getToken(SqlBaseParser.EXTERNAL, 0);
};

NonReservedContext.prototype.EXTRACT = function() {
    return this.getToken(SqlBaseParser.EXTRACT, 0);
};

NonReservedContext.prototype.FALSE = function() {
    return this.getToken(SqlBaseParser.FALSE, 0);
};

NonReservedContext.prototype.FETCH = function() {
    return this.getToken(SqlBaseParser.FETCH, 0);
};

NonReservedContext.prototype.FIELDS = function() {
    return this.getToken(SqlBaseParser.FIELDS, 0);
};

NonReservedContext.prototype.FILEFORMAT = function() {
    return this.getToken(SqlBaseParser.FILEFORMAT, 0);
};

NonReservedContext.prototype.FIRST = function() {
    return this.getToken(SqlBaseParser.FIRST, 0);
};

NonReservedContext.prototype.FIRST_VALUE = function() {
    return this.getToken(SqlBaseParser.FIRST_VALUE, 0);
};

NonReservedContext.prototype.FOLLOWING = function() {
    return this.getToken(SqlBaseParser.FOLLOWING, 0);
};

NonReservedContext.prototype.FOR = function() {
    return this.getToken(SqlBaseParser.FOR, 0);
};

NonReservedContext.prototype.FOREIGN = function() {
    return this.getToken(SqlBaseParser.FOREIGN, 0);
};

NonReservedContext.prototype.FORMAT = function() {
    return this.getToken(SqlBaseParser.FORMAT, 0);
};

NonReservedContext.prototype.FORMATTED = function() {
    return this.getToken(SqlBaseParser.FORMATTED, 0);
};

NonReservedContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

NonReservedContext.prototype.FUNCTION = function() {
    return this.getToken(SqlBaseParser.FUNCTION, 0);
};

NonReservedContext.prototype.FUNCTIONS = function() {
    return this.getToken(SqlBaseParser.FUNCTIONS, 0);
};

NonReservedContext.prototype.GLOBAL = function() {
    return this.getToken(SqlBaseParser.GLOBAL, 0);
};

NonReservedContext.prototype.GRANT = function() {
    return this.getToken(SqlBaseParser.GRANT, 0);
};

NonReservedContext.prototype.GROUP = function() {
    return this.getToken(SqlBaseParser.GROUP, 0);
};

NonReservedContext.prototype.GROUPING = function() {
    return this.getToken(SqlBaseParser.GROUPING, 0);
};

NonReservedContext.prototype.HAVING = function() {
    return this.getToken(SqlBaseParser.HAVING, 0);
};

NonReservedContext.prototype.HOUR = function() {
    return this.getToken(SqlBaseParser.HOUR, 0);
};

NonReservedContext.prototype.HOURS = function() {
    return this.getToken(SqlBaseParser.HOURS, 0);
};

NonReservedContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

NonReservedContext.prototype.IGNORE = function() {
    return this.getToken(SqlBaseParser.IGNORE, 0);
};

NonReservedContext.prototype.IMPORT = function() {
    return this.getToken(SqlBaseParser.IMPORT, 0);
};

NonReservedContext.prototype.IN = function() {
    return this.getToken(SqlBaseParser.IN, 0);
};

NonReservedContext.prototype.INDEX = function() {
    return this.getToken(SqlBaseParser.INDEX, 0);
};

NonReservedContext.prototype.INDEXES = function() {
    return this.getToken(SqlBaseParser.INDEXES, 0);
};

NonReservedContext.prototype.INPATH = function() {
    return this.getToken(SqlBaseParser.INPATH, 0);
};

NonReservedContext.prototype.INPUTFORMAT = function() {
    return this.getToken(SqlBaseParser.INPUTFORMAT, 0);
};

NonReservedContext.prototype.INSERT = function() {
    return this.getToken(SqlBaseParser.INSERT, 0);
};

NonReservedContext.prototype.INTERVAL = function() {
    return this.getToken(SqlBaseParser.INTERVAL, 0);
};

NonReservedContext.prototype.INTO = function() {
    return this.getToken(SqlBaseParser.INTO, 0);
};

NonReservedContext.prototype.IS = function() {
    return this.getToken(SqlBaseParser.IS, 0);
};

NonReservedContext.prototype.ITEMS = function() {
    return this.getToken(SqlBaseParser.ITEMS, 0);
};

NonReservedContext.prototype.KEYS = function() {
    return this.getToken(SqlBaseParser.KEYS, 0);
};

NonReservedContext.prototype.LAST = function() {
    return this.getToken(SqlBaseParser.LAST, 0);
};

NonReservedContext.prototype.LAST_VALUE = function() {
    return this.getToken(SqlBaseParser.LAST_VALUE, 0);
};

NonReservedContext.prototype.LATERAL = function() {
    return this.getToken(SqlBaseParser.LATERAL, 0);
};

NonReservedContext.prototype.LAZY = function() {
    return this.getToken(SqlBaseParser.LAZY, 0);
};

NonReservedContext.prototype.LEADING = function() {
    return this.getToken(SqlBaseParser.LEADING, 0);
};

NonReservedContext.prototype.LIKE = function() {
    return this.getToken(SqlBaseParser.LIKE, 0);
};

NonReservedContext.prototype.LIMIT = function() {
    return this.getToken(SqlBaseParser.LIMIT, 0);
};

NonReservedContext.prototype.LINES = function() {
    return this.getToken(SqlBaseParser.LINES, 0);
};

NonReservedContext.prototype.LIST = function() {
    return this.getToken(SqlBaseParser.LIST, 0);
};

NonReservedContext.prototype.LOAD = function() {
    return this.getToken(SqlBaseParser.LOAD, 0);
};

NonReservedContext.prototype.LOCAL = function() {
    return this.getToken(SqlBaseParser.LOCAL, 0);
};

NonReservedContext.prototype.LOCATION = function() {
    return this.getToken(SqlBaseParser.LOCATION, 0);
};

NonReservedContext.prototype.LOCK = function() {
    return this.getToken(SqlBaseParser.LOCK, 0);
};

NonReservedContext.prototype.LOCKS = function() {
    return this.getToken(SqlBaseParser.LOCKS, 0);
};

NonReservedContext.prototype.LOGICAL = function() {
    return this.getToken(SqlBaseParser.LOGICAL, 0);
};

NonReservedContext.prototype.MACRO = function() {
    return this.getToken(SqlBaseParser.MACRO, 0);
};

NonReservedContext.prototype.MAP = function() {
    return this.getToken(SqlBaseParser.MAP, 0);
};

NonReservedContext.prototype.MICROSECOND = function() {
    return this.getToken(SqlBaseParser.MICROSECOND, 0);
};

NonReservedContext.prototype.MICROSECONDS = function() {
    return this.getToken(SqlBaseParser.MICROSECONDS, 0);
};

NonReservedContext.prototype.MILLISECOND = function() {
    return this.getToken(SqlBaseParser.MILLISECOND, 0);
};

NonReservedContext.prototype.MILLISECONDS = function() {
    return this.getToken(SqlBaseParser.MILLISECONDS, 0);
};

NonReservedContext.prototype.MINUTE = function() {
    return this.getToken(SqlBaseParser.MINUTE, 0);
};

NonReservedContext.prototype.MINUTES = function() {
    return this.getToken(SqlBaseParser.MINUTES, 0);
};

NonReservedContext.prototype.MONTH = function() {
    return this.getToken(SqlBaseParser.MONTH, 0);
};

NonReservedContext.prototype.MONTHS = function() {
    return this.getToken(SqlBaseParser.MONTHS, 0);
};

NonReservedContext.prototype.MSCK = function() {
    return this.getToken(SqlBaseParser.MSCK, 0);
};

NonReservedContext.prototype.NAMESPACE = function() {
    return this.getToken(SqlBaseParser.NAMESPACE, 0);
};

NonReservedContext.prototype.NAMESPACES = function() {
    return this.getToken(SqlBaseParser.NAMESPACES, 0);
};

NonReservedContext.prototype.NO = function() {
    return this.getToken(SqlBaseParser.NO, 0);
};

NonReservedContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

NonReservedContext.prototype.NULL = function() {
    return this.getToken(SqlBaseParser.NULL, 0);
};

NonReservedContext.prototype.NULLS = function() {
    return this.getToken(SqlBaseParser.NULLS, 0);
};

NonReservedContext.prototype.OF = function() {
    return this.getToken(SqlBaseParser.OF, 0);
};

NonReservedContext.prototype.ONLY = function() {
    return this.getToken(SqlBaseParser.ONLY, 0);
};

NonReservedContext.prototype.OPTION = function() {
    return this.getToken(SqlBaseParser.OPTION, 0);
};

NonReservedContext.prototype.OPTIONS = function() {
    return this.getToken(SqlBaseParser.OPTIONS, 0);
};

NonReservedContext.prototype.OR = function() {
    return this.getToken(SqlBaseParser.OR, 0);
};

NonReservedContext.prototype.ORDER = function() {
    return this.getToken(SqlBaseParser.ORDER, 0);
};

NonReservedContext.prototype.OUT = function() {
    return this.getToken(SqlBaseParser.OUT, 0);
};

NonReservedContext.prototype.OUTER = function() {
    return this.getToken(SqlBaseParser.OUTER, 0);
};

NonReservedContext.prototype.OUTPUTFORMAT = function() {
    return this.getToken(SqlBaseParser.OUTPUTFORMAT, 0);
};

NonReservedContext.prototype.OVER = function() {
    return this.getToken(SqlBaseParser.OVER, 0);
};

NonReservedContext.prototype.OVERLAPS = function() {
    return this.getToken(SqlBaseParser.OVERLAPS, 0);
};

NonReservedContext.prototype.OVERLAY = function() {
    return this.getToken(SqlBaseParser.OVERLAY, 0);
};

NonReservedContext.prototype.OVERWRITE = function() {
    return this.getToken(SqlBaseParser.OVERWRITE, 0);
};

NonReservedContext.prototype.PARTITION = function() {
    return this.getToken(SqlBaseParser.PARTITION, 0);
};

NonReservedContext.prototype.PARTITIONED = function() {
    return this.getToken(SqlBaseParser.PARTITIONED, 0);
};

NonReservedContext.prototype.PARTITIONS = function() {
    return this.getToken(SqlBaseParser.PARTITIONS, 0);
};

NonReservedContext.prototype.PERCENTLIT = function() {
    return this.getToken(SqlBaseParser.PERCENTLIT, 0);
};

NonReservedContext.prototype.PIVOT = function() {
    return this.getToken(SqlBaseParser.PIVOT, 0);
};

NonReservedContext.prototype.PLACING = function() {
    return this.getToken(SqlBaseParser.PLACING, 0);
};

NonReservedContext.prototype.POSITION = function() {
    return this.getToken(SqlBaseParser.POSITION, 0);
};

NonReservedContext.prototype.PRECEDING = function() {
    return this.getToken(SqlBaseParser.PRECEDING, 0);
};

NonReservedContext.prototype.PRIMARY = function() {
    return this.getToken(SqlBaseParser.PRIMARY, 0);
};

NonReservedContext.prototype.PRINCIPALS = function() {
    return this.getToken(SqlBaseParser.PRINCIPALS, 0);
};

NonReservedContext.prototype.PURGE = function() {
    return this.getToken(SqlBaseParser.PURGE, 0);
};

NonReservedContext.prototype.QUERY = function() {
    return this.getToken(SqlBaseParser.QUERY, 0);
};

NonReservedContext.prototype.RANGE = function() {
    return this.getToken(SqlBaseParser.RANGE, 0);
};

NonReservedContext.prototype.RECORDREADER = function() {
    return this.getToken(SqlBaseParser.RECORDREADER, 0);
};

NonReservedContext.prototype.RECORDWRITER = function() {
    return this.getToken(SqlBaseParser.RECORDWRITER, 0);
};

NonReservedContext.prototype.RECOVER = function() {
    return this.getToken(SqlBaseParser.RECOVER, 0);
};

NonReservedContext.prototype.REDUCE = function() {
    return this.getToken(SqlBaseParser.REDUCE, 0);
};

NonReservedContext.prototype.REFERENCES = function() {
    return this.getToken(SqlBaseParser.REFERENCES, 0);
};

NonReservedContext.prototype.REFRESH = function() {
    return this.getToken(SqlBaseParser.REFRESH, 0);
};

NonReservedContext.prototype.RENAME = function() {
    return this.getToken(SqlBaseParser.RENAME, 0);
};

NonReservedContext.prototype.REPAIR = function() {
    return this.getToken(SqlBaseParser.REPAIR, 0);
};

NonReservedContext.prototype.REPLACE = function() {
    return this.getToken(SqlBaseParser.REPLACE, 0);
};

NonReservedContext.prototype.RESET = function() {
    return this.getToken(SqlBaseParser.RESET, 0);
};

NonReservedContext.prototype.RESPECT = function() {
    return this.getToken(SqlBaseParser.RESPECT, 0);
};

NonReservedContext.prototype.RESTRICT = function() {
    return this.getToken(SqlBaseParser.RESTRICT, 0);
};

NonReservedContext.prototype.REVOKE = function() {
    return this.getToken(SqlBaseParser.REVOKE, 0);
};

NonReservedContext.prototype.RLIKE = function() {
    return this.getToken(SqlBaseParser.RLIKE, 0);
};

NonReservedContext.prototype.ROLE = function() {
    return this.getToken(SqlBaseParser.ROLE, 0);
};

NonReservedContext.prototype.ROLES = function() {
    return this.getToken(SqlBaseParser.ROLES, 0);
};

NonReservedContext.prototype.ROLLBACK = function() {
    return this.getToken(SqlBaseParser.ROLLBACK, 0);
};

NonReservedContext.prototype.ROLLUP = function() {
    return this.getToken(SqlBaseParser.ROLLUP, 0);
};

NonReservedContext.prototype.ROW = function() {
    return this.getToken(SqlBaseParser.ROW, 0);
};

NonReservedContext.prototype.ROWS = function() {
    return this.getToken(SqlBaseParser.ROWS, 0);
};

NonReservedContext.prototype.SCHEMA = function() {
    return this.getToken(SqlBaseParser.SCHEMA, 0);
};

NonReservedContext.prototype.SECOND = function() {
    return this.getToken(SqlBaseParser.SECOND, 0);
};

NonReservedContext.prototype.SECONDS = function() {
    return this.getToken(SqlBaseParser.SECONDS, 0);
};

NonReservedContext.prototype.SELECT = function() {
    return this.getToken(SqlBaseParser.SELECT, 0);
};

NonReservedContext.prototype.SEPARATED = function() {
    return this.getToken(SqlBaseParser.SEPARATED, 0);
};

NonReservedContext.prototype.SERDE = function() {
    return this.getToken(SqlBaseParser.SERDE, 0);
};

NonReservedContext.prototype.SERDEPROPERTIES = function() {
    return this.getToken(SqlBaseParser.SERDEPROPERTIES, 0);
};

NonReservedContext.prototype.SESSION_USER = function() {
    return this.getToken(SqlBaseParser.SESSION_USER, 0);
};

NonReservedContext.prototype.SET = function() {
    return this.getToken(SqlBaseParser.SET, 0);
};

NonReservedContext.prototype.SETS = function() {
    return this.getToken(SqlBaseParser.SETS, 0);
};

NonReservedContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

NonReservedContext.prototype.SKEWED = function() {
    return this.getToken(SqlBaseParser.SKEWED, 0);
};

NonReservedContext.prototype.SOME = function() {
    return this.getToken(SqlBaseParser.SOME, 0);
};

NonReservedContext.prototype.SORT = function() {
    return this.getToken(SqlBaseParser.SORT, 0);
};

NonReservedContext.prototype.SORTED = function() {
    return this.getToken(SqlBaseParser.SORTED, 0);
};

NonReservedContext.prototype.START = function() {
    return this.getToken(SqlBaseParser.START, 0);
};

NonReservedContext.prototype.STATISTICS = function() {
    return this.getToken(SqlBaseParser.STATISTICS, 0);
};

NonReservedContext.prototype.STORED = function() {
    return this.getToken(SqlBaseParser.STORED, 0);
};

NonReservedContext.prototype.STRATIFY = function() {
    return this.getToken(SqlBaseParser.STRATIFY, 0);
};

NonReservedContext.prototype.STRUCT = function() {
    return this.getToken(SqlBaseParser.STRUCT, 0);
};

NonReservedContext.prototype.SUBSTR = function() {
    return this.getToken(SqlBaseParser.SUBSTR, 0);
};

NonReservedContext.prototype.SUBSTRING = function() {
    return this.getToken(SqlBaseParser.SUBSTRING, 0);
};

NonReservedContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

NonReservedContext.prototype.TABLES = function() {
    return this.getToken(SqlBaseParser.TABLES, 0);
};

NonReservedContext.prototype.TABLESAMPLE = function() {
    return this.getToken(SqlBaseParser.TABLESAMPLE, 0);
};

NonReservedContext.prototype.TBLPROPERTIES = function() {
    return this.getToken(SqlBaseParser.TBLPROPERTIES, 0);
};

NonReservedContext.prototype.TEMPORARY = function() {
    return this.getToken(SqlBaseParser.TEMPORARY, 0);
};

NonReservedContext.prototype.TERMINATED = function() {
    return this.getToken(SqlBaseParser.TERMINATED, 0);
};

NonReservedContext.prototype.THEN = function() {
    return this.getToken(SqlBaseParser.THEN, 0);
};

NonReservedContext.prototype.TO = function() {
    return this.getToken(SqlBaseParser.TO, 0);
};

NonReservedContext.prototype.TOUCH = function() {
    return this.getToken(SqlBaseParser.TOUCH, 0);
};

NonReservedContext.prototype.TRAILING = function() {
    return this.getToken(SqlBaseParser.TRAILING, 0);
};

NonReservedContext.prototype.TRANSACTION = function() {
    return this.getToken(SqlBaseParser.TRANSACTION, 0);
};

NonReservedContext.prototype.TRANSACTIONS = function() {
    return this.getToken(SqlBaseParser.TRANSACTIONS, 0);
};

NonReservedContext.prototype.TRANSFORM = function() {
    return this.getToken(SqlBaseParser.TRANSFORM, 0);
};

NonReservedContext.prototype.TRIM = function() {
    return this.getToken(SqlBaseParser.TRIM, 0);
};

NonReservedContext.prototype.TRUE = function() {
    return this.getToken(SqlBaseParser.TRUE, 0);
};

NonReservedContext.prototype.TRUNCATE = function() {
    return this.getToken(SqlBaseParser.TRUNCATE, 0);
};

NonReservedContext.prototype.TYPE = function() {
    return this.getToken(SqlBaseParser.TYPE, 0);
};

NonReservedContext.prototype.UNARCHIVE = function() {
    return this.getToken(SqlBaseParser.UNARCHIVE, 0);
};

NonReservedContext.prototype.UNBOUNDED = function() {
    return this.getToken(SqlBaseParser.UNBOUNDED, 0);
};

NonReservedContext.prototype.UNCACHE = function() {
    return this.getToken(SqlBaseParser.UNCACHE, 0);
};

NonReservedContext.prototype.UNIQUE = function() {
    return this.getToken(SqlBaseParser.UNIQUE, 0);
};

NonReservedContext.prototype.UNKNOWN = function() {
    return this.getToken(SqlBaseParser.UNKNOWN, 0);
};

NonReservedContext.prototype.UNLOCK = function() {
    return this.getToken(SqlBaseParser.UNLOCK, 0);
};

NonReservedContext.prototype.UNSET = function() {
    return this.getToken(SqlBaseParser.UNSET, 0);
};

NonReservedContext.prototype.UPDATE = function() {
    return this.getToken(SqlBaseParser.UPDATE, 0);
};

NonReservedContext.prototype.USE = function() {
    return this.getToken(SqlBaseParser.USE, 0);
};

NonReservedContext.prototype.USER = function() {
    return this.getToken(SqlBaseParser.USER, 0);
};

NonReservedContext.prototype.VALUES = function() {
    return this.getToken(SqlBaseParser.VALUES, 0);
};

NonReservedContext.prototype.VIEW = function() {
    return this.getToken(SqlBaseParser.VIEW, 0);
};

NonReservedContext.prototype.WEEK = function() {
    return this.getToken(SqlBaseParser.WEEK, 0);
};

NonReservedContext.prototype.WEEKS = function() {
    return this.getToken(SqlBaseParser.WEEKS, 0);
};

NonReservedContext.prototype.WHEN = function() {
    return this.getToken(SqlBaseParser.WHEN, 0);
};

NonReservedContext.prototype.WHERE = function() {
    return this.getToken(SqlBaseParser.WHERE, 0);
};

NonReservedContext.prototype.WINDOW = function() {
    return this.getToken(SqlBaseParser.WINDOW, 0);
};

NonReservedContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

NonReservedContext.prototype.YEAR = function() {
    return this.getToken(SqlBaseParser.YEAR, 0);
};

NonReservedContext.prototype.YEARS = function() {
    return this.getToken(SqlBaseParser.YEARS, 0);
};




SqlBaseParser.NonReservedContext = NonReservedContext;

SqlBaseParser.prototype.nonReserved = function() {

    var localctx = new NonReservedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, SqlBaseParser.RULE_nonReserved);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2801;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AFTER) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ALTER) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARCHIVE) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.AUTHORIZATION) | (1 << SqlBaseParser.BETWEEN) | (1 << SqlBaseParser.BOTH) | (1 << SqlBaseParser.BUCKET) | (1 << SqlBaseParser.BUCKETS) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.CACHE) | (1 << SqlBaseParser.CASCADE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.CASE - 32)) | (1 << (SqlBaseParser.CAST - 32)) | (1 << (SqlBaseParser.CHANGE - 32)) | (1 << (SqlBaseParser.CHECK - 32)) | (1 << (SqlBaseParser.CLEAR - 32)) | (1 << (SqlBaseParser.CLUSTER - 32)) | (1 << (SqlBaseParser.CLUSTERED - 32)) | (1 << (SqlBaseParser.CODEGEN - 32)) | (1 << (SqlBaseParser.COLLATE - 32)) | (1 << (SqlBaseParser.COLLECTION - 32)) | (1 << (SqlBaseParser.COLUMN - 32)) | (1 << (SqlBaseParser.COLUMNS - 32)) | (1 << (SqlBaseParser.COMMENT - 32)) | (1 << (SqlBaseParser.COMMIT - 32)) | (1 << (SqlBaseParser.COMPACT - 32)) | (1 << (SqlBaseParser.COMPACTIONS - 32)) | (1 << (SqlBaseParser.COMPUTE - 32)) | (1 << (SqlBaseParser.CONCATENATE - 32)) | (1 << (SqlBaseParser.CONSTRAINT - 32)) | (1 << (SqlBaseParser.COST - 32)) | (1 << (SqlBaseParser.CREATE - 32)) | (1 << (SqlBaseParser.CUBE - 32)) | (1 << (SqlBaseParser.CURRENT - 32)) | (1 << (SqlBaseParser.CURRENT_DATE - 32)) | (1 << (SqlBaseParser.CURRENT_TIME - 32)) | (1 << (SqlBaseParser.CURRENT_TIMESTAMP - 32)) | (1 << (SqlBaseParser.CURRENT_USER - 32)) | (1 << (SqlBaseParser.DATA - 32)) | (1 << (SqlBaseParser.DATABASE - 32)) | (1 << (SqlBaseParser.DATABASES - 32)) | (1 << (SqlBaseParser.DAY - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlBaseParser.DAYS - 64)) | (1 << (SqlBaseParser.DBPROPERTIES - 64)) | (1 << (SqlBaseParser.DEFINED - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.DELIMITED - 64)) | (1 << (SqlBaseParser.DESC - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.DFS - 64)) | (1 << (SqlBaseParser.DIRECTORIES - 64)) | (1 << (SqlBaseParser.DIRECTORY - 64)) | (1 << (SqlBaseParser.DISTINCT - 64)) | (1 << (SqlBaseParser.DISTRIBUTE - 64)) | (1 << (SqlBaseParser.DROP - 64)) | (1 << (SqlBaseParser.ELSE - 64)) | (1 << (SqlBaseParser.END - 64)) | (1 << (SqlBaseParser.ESCAPED - 64)) | (1 << (SqlBaseParser.EXCHANGE - 64)) | (1 << (SqlBaseParser.EXISTS - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.EXPORT - 64)) | (1 << (SqlBaseParser.EXTENDED - 64)) | (1 << (SqlBaseParser.EXTERNAL - 64)) | (1 << (SqlBaseParser.EXTRACT - 64)) | (1 << (SqlBaseParser.FALSE - 64)) | (1 << (SqlBaseParser.FETCH - 64)) | (1 << (SqlBaseParser.FIELDS - 64)) | (1 << (SqlBaseParser.FILEFORMAT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FIRST_VALUE - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.FOR - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SqlBaseParser.FOREIGN - 96)) | (1 << (SqlBaseParser.FORMAT - 96)) | (1 << (SqlBaseParser.FORMATTED - 96)) | (1 << (SqlBaseParser.FROM - 96)) | (1 << (SqlBaseParser.FUNCTION - 96)) | (1 << (SqlBaseParser.FUNCTIONS - 96)) | (1 << (SqlBaseParser.GLOBAL - 96)) | (1 << (SqlBaseParser.GRANT - 96)) | (1 << (SqlBaseParser.GROUP - 96)) | (1 << (SqlBaseParser.GROUPING - 96)) | (1 << (SqlBaseParser.HAVING - 96)) | (1 << (SqlBaseParser.HOUR - 96)) | (1 << (SqlBaseParser.HOURS - 96)) | (1 << (SqlBaseParser.IF - 96)) | (1 << (SqlBaseParser.IGNORE - 96)) | (1 << (SqlBaseParser.IMPORT - 96)) | (1 << (SqlBaseParser.IN - 96)) | (1 << (SqlBaseParser.INDEX - 96)) | (1 << (SqlBaseParser.INDEXES - 96)) | (1 << (SqlBaseParser.INPATH - 96)) | (1 << (SqlBaseParser.INPUTFORMAT - 96)) | (1 << (SqlBaseParser.INSERT - 96)) | (1 << (SqlBaseParser.INTERVAL - 96)) | (1 << (SqlBaseParser.INTO - 96)) | (1 << (SqlBaseParser.IS - 96)) | (1 << (SqlBaseParser.ITEMS - 96)) | (1 << (SqlBaseParser.KEYS - 96)) | (1 << (SqlBaseParser.LAST - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SqlBaseParser.LAST_VALUE - 128)) | (1 << (SqlBaseParser.LATERAL - 128)) | (1 << (SqlBaseParser.LAZY - 128)) | (1 << (SqlBaseParser.LEADING - 128)) | (1 << (SqlBaseParser.LIKE - 128)) | (1 << (SqlBaseParser.LIMIT - 128)) | (1 << (SqlBaseParser.LINES - 128)) | (1 << (SqlBaseParser.LIST - 128)) | (1 << (SqlBaseParser.LOAD - 128)) | (1 << (SqlBaseParser.LOCAL - 128)) | (1 << (SqlBaseParser.LOCATION - 128)) | (1 << (SqlBaseParser.LOCK - 128)) | (1 << (SqlBaseParser.LOCKS - 128)) | (1 << (SqlBaseParser.LOGICAL - 128)) | (1 << (SqlBaseParser.MACRO - 128)) | (1 << (SqlBaseParser.MAP - 128)) | (1 << (SqlBaseParser.MICROSECOND - 128)) | (1 << (SqlBaseParser.MICROSECONDS - 128)) | (1 << (SqlBaseParser.MILLISECOND - 128)) | (1 << (SqlBaseParser.MILLISECONDS - 128)) | (1 << (SqlBaseParser.MINUTE - 128)) | (1 << (SqlBaseParser.MINUTES - 128)) | (1 << (SqlBaseParser.MONTH - 128)) | (1 << (SqlBaseParser.MONTHS - 128)) | (1 << (SqlBaseParser.MSCK - 128)) | (1 << (SqlBaseParser.NAMESPACE - 128)) | (1 << (SqlBaseParser.NAMESPACES - 128)) | (1 << (SqlBaseParser.NO - 128)) | (1 << (SqlBaseParser.NOT - 128)) | (1 << (SqlBaseParser.NULL - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SqlBaseParser.NULLS - 160)) | (1 << (SqlBaseParser.OF - 160)) | (1 << (SqlBaseParser.ONLY - 160)) | (1 << (SqlBaseParser.OPTION - 160)) | (1 << (SqlBaseParser.OPTIONS - 160)) | (1 << (SqlBaseParser.OR - 160)) | (1 << (SqlBaseParser.ORDER - 160)) | (1 << (SqlBaseParser.OUT - 160)) | (1 << (SqlBaseParser.OUTER - 160)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 160)) | (1 << (SqlBaseParser.OVER - 160)) | (1 << (SqlBaseParser.OVERLAPS - 160)) | (1 << (SqlBaseParser.OVERLAY - 160)) | (1 << (SqlBaseParser.OVERWRITE - 160)) | (1 << (SqlBaseParser.PARTITION - 160)) | (1 << (SqlBaseParser.PARTITIONED - 160)) | (1 << (SqlBaseParser.PARTITIONS - 160)) | (1 << (SqlBaseParser.PERCENTLIT - 160)) | (1 << (SqlBaseParser.PIVOT - 160)) | (1 << (SqlBaseParser.PLACING - 160)) | (1 << (SqlBaseParser.POSITION - 160)) | (1 << (SqlBaseParser.PRECEDING - 160)) | (1 << (SqlBaseParser.PRIMARY - 160)) | (1 << (SqlBaseParser.PRINCIPALS - 160)) | (1 << (SqlBaseParser.PURGE - 160)) | (1 << (SqlBaseParser.QUERY - 160)) | (1 << (SqlBaseParser.RANGE - 160)) | (1 << (SqlBaseParser.RECORDREADER - 160)) | (1 << (SqlBaseParser.RECORDWRITER - 160)) | (1 << (SqlBaseParser.RECOVER - 160)) | (1 << (SqlBaseParser.REDUCE - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (SqlBaseParser.REFERENCES - 192)) | (1 << (SqlBaseParser.REFRESH - 192)) | (1 << (SqlBaseParser.RENAME - 192)) | (1 << (SqlBaseParser.REPAIR - 192)) | (1 << (SqlBaseParser.REPLACE - 192)) | (1 << (SqlBaseParser.RESET - 192)) | (1 << (SqlBaseParser.RESPECT - 192)) | (1 << (SqlBaseParser.RESTRICT - 192)) | (1 << (SqlBaseParser.REVOKE - 192)) | (1 << (SqlBaseParser.RLIKE - 192)) | (1 << (SqlBaseParser.ROLE - 192)) | (1 << (SqlBaseParser.ROLES - 192)) | (1 << (SqlBaseParser.ROLLBACK - 192)) | (1 << (SqlBaseParser.ROLLUP - 192)) | (1 << (SqlBaseParser.ROW - 192)) | (1 << (SqlBaseParser.ROWS - 192)) | (1 << (SqlBaseParser.SCHEMA - 192)) | (1 << (SqlBaseParser.SECOND - 192)) | (1 << (SqlBaseParser.SECONDS - 192)) | (1 << (SqlBaseParser.SELECT - 192)) | (1 << (SqlBaseParser.SEPARATED - 192)) | (1 << (SqlBaseParser.SERDE - 192)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 192)) | (1 << (SqlBaseParser.SESSION_USER - 192)) | (1 << (SqlBaseParser.SET - 192)) | (1 << (SqlBaseParser.SETS - 192)) | (1 << (SqlBaseParser.SHOW - 192)) | (1 << (SqlBaseParser.SKEWED - 192)) | (1 << (SqlBaseParser.SOME - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (SqlBaseParser.SORT - 224)) | (1 << (SqlBaseParser.SORTED - 224)) | (1 << (SqlBaseParser.START - 224)) | (1 << (SqlBaseParser.STATISTICS - 224)) | (1 << (SqlBaseParser.STORED - 224)) | (1 << (SqlBaseParser.STRATIFY - 224)) | (1 << (SqlBaseParser.STRUCT - 224)) | (1 << (SqlBaseParser.SUBSTR - 224)) | (1 << (SqlBaseParser.SUBSTRING - 224)) | (1 << (SqlBaseParser.TABLE - 224)) | (1 << (SqlBaseParser.TABLES - 224)) | (1 << (SqlBaseParser.TABLESAMPLE - 224)) | (1 << (SqlBaseParser.TBLPROPERTIES - 224)) | (1 << (SqlBaseParser.TEMPORARY - 224)) | (1 << (SqlBaseParser.TERMINATED - 224)) | (1 << (SqlBaseParser.THEN - 224)) | (1 << (SqlBaseParser.TO - 224)) | (1 << (SqlBaseParser.TOUCH - 224)) | (1 << (SqlBaseParser.TRAILING - 224)) | (1 << (SqlBaseParser.TRANSACTION - 224)) | (1 << (SqlBaseParser.TRANSACTIONS - 224)) | (1 << (SqlBaseParser.TRANSFORM - 224)) | (1 << (SqlBaseParser.TRIM - 224)) | (1 << (SqlBaseParser.TRUE - 224)) | (1 << (SqlBaseParser.TRUNCATE - 224)) | (1 << (SqlBaseParser.TYPE - 224)) | (1 << (SqlBaseParser.UNARCHIVE - 224)) | (1 << (SqlBaseParser.UNBOUNDED - 224)) | (1 << (SqlBaseParser.UNCACHE - 224)) | (1 << (SqlBaseParser.UNIQUE - 224)) | (1 << (SqlBaseParser.UNKNOWN - 224)))) !== 0) || ((((_la - 256)) & ~0x1f) == 0 && ((1 << (_la - 256)) & ((1 << (SqlBaseParser.UNLOCK - 256)) | (1 << (SqlBaseParser.UNSET - 256)) | (1 << (SqlBaseParser.UPDATE - 256)) | (1 << (SqlBaseParser.USE - 256)) | (1 << (SqlBaseParser.USER - 256)) | (1 << (SqlBaseParser.VALUES - 256)) | (1 << (SqlBaseParser.VIEW - 256)) | (1 << (SqlBaseParser.WEEK - 256)) | (1 << (SqlBaseParser.WEEKS - 256)) | (1 << (SqlBaseParser.WHEN - 256)) | (1 << (SqlBaseParser.WHERE - 256)) | (1 << (SqlBaseParser.WINDOW - 256)) | (1 << (SqlBaseParser.WITH - 256)) | (1 << (SqlBaseParser.YEAR - 256)) | (1 << (SqlBaseParser.YEARS - 256)) | (1 << (SqlBaseParser.DIV - 256)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


SqlBaseParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 38:
			return this.queryTerm_sempred(localctx, predIndex);
	case 86:
			return this.booleanExpression_sempred(localctx, predIndex);
	case 88:
			return this.valueExpression_sempred(localctx, predIndex);
	case 89:
			return this.primaryExpression_sempred(localctx, predIndex);
	case 95:
			return this.interval_sempred(localctx, predIndex);
	case 117:
			return this.identifier_sempred(localctx, predIndex);
	case 118:
			return this.strictIdentifier_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

SqlBaseParser.prototype.queryTerm_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 3);
		case 1:
			return this.legacy_setops_precedence_enbled;
		case 2:
			return this.precpred(this._ctx, 2);
		case 3:
			return !this.legacy_setops_precedence_enbled;
		case 4:
			return this.precpred(this._ctx, 1);
		case 5:
			return !this.legacy_setops_precedence_enbled;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SqlBaseParser.prototype.booleanExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 6:
			return this.precpred(this._ctx, 2);
		case 7:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SqlBaseParser.prototype.valueExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 8:
			return this.precpred(this._ctx, 6);
		case 9:
			return this.precpred(this._ctx, 5);
		case 10:
			return this.precpred(this._ctx, 4);
		case 11:
			return this.precpred(this._ctx, 3);
		case 12:
			return this.precpred(this._ctx, 2);
		case 13:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SqlBaseParser.prototype.primaryExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 14:
			return this.precpred(this._ctx, 8);
		case 15:
			return this.precpred(this._ctx, 6);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SqlBaseParser.prototype.interval_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 16:
			return this.ansi;
		case 17:
			return !this.ansi;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SqlBaseParser.prototype.identifier_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 18:
			return !this.ansi;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SqlBaseParser.prototype.strictIdentifier_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 19:
			return this.ansi;
		case 20:
			return !this.ansi;
		default:
			throw "No predicate with index:" + predIndex;
	}
};


// exports.SqlBaseParser = SqlBaseParser;

export {
  SqlBaseParser
}
